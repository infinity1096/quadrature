
quadrature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a900  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800aad8  0800aad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab30  0800ab30  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab30  0800ab30  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab30  0800ab30  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab30  0800ab30  0001ab30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab34  0800ab34  0001ab34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800ab38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000143c  20000184  0800acbc  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c0  0800acbc  000215c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000238ba  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e90  00000000  00000000  00043a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f58  00000000  00000000  00048900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d00  00000000  00000000  0004a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d80  00000000  00000000  0004c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026a4e  00000000  00000000  000722d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6089  00000000  00000000  00098d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017edaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084c8  00000000  00000000  0017ee00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aac0 	.word	0x0800aac0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800aac0 	.word	0x0800aac0

08000218 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	; 0x30
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800021e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2220      	movs	r2, #32
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f00a fc3d 	bl	800aab0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000236:	4b33      	ldr	r3, [pc, #204]	; (8000304 <MX_ADC1_Init+0xec>)
 8000238:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800023e:	4b31      	ldr	r3, [pc, #196]	; (8000304 <MX_ADC1_Init+0xec>)
 8000240:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000244:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000246:	4b2f      	ldr	r3, [pc, #188]	; (8000304 <MX_ADC1_Init+0xec>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024c:	4b2d      	ldr	r3, [pc, #180]	; (8000304 <MX_ADC1_Init+0xec>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000252:	4b2c      	ldr	r3, [pc, #176]	; (8000304 <MX_ADC1_Init+0xec>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000258:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <MX_ADC1_Init+0xec>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025e:	4b29      	ldr	r3, [pc, #164]	; (8000304 <MX_ADC1_Init+0xec>)
 8000260:	2204      	movs	r2, #4
 8000262:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000264:	4b27      	ldr	r3, [pc, #156]	; (8000304 <MX_ADC1_Init+0xec>)
 8000266:	2200      	movs	r2, #0
 8000268:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800026a:	4b26      	ldr	r3, [pc, #152]	; (8000304 <MX_ADC1_Init+0xec>)
 800026c:	2200      	movs	r2, #0
 800026e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <MX_ADC1_Init+0xec>)
 8000272:	2201      	movs	r2, #1
 8000274:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000276:	4b23      	ldr	r3, [pc, #140]	; (8000304 <MX_ADC1_Init+0xec>)
 8000278:	2200      	movs	r2, #0
 800027a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800027e:	4b21      	ldr	r3, [pc, #132]	; (8000304 <MX_ADC1_Init+0xec>)
 8000280:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000284:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000286:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <MX_ADC1_Init+0xec>)
 8000288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800028e:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <MX_ADC1_Init+0xec>)
 8000290:	2200      	movs	r2, #0
 8000292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000296:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <MX_ADC1_Init+0xec>)
 8000298:	2200      	movs	r2, #0
 800029a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800029c:	4b19      	ldr	r3, [pc, #100]	; (8000304 <MX_ADC1_Init+0xec>)
 800029e:	2200      	movs	r2, #0
 80002a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a4:	4817      	ldr	r0, [pc, #92]	; (8000304 <MX_ADC1_Init+0xec>)
 80002a6:	f001 f86f 	bl	8001388 <HAL_ADC_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80002b0:	f000 fba3 	bl	80009fa <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002b4:	2300      	movs	r3, #0
 80002b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002bc:	4619      	mov	r1, r3
 80002be:	4811      	ldr	r0, [pc, #68]	; (8000304 <MX_ADC1_Init+0xec>)
 80002c0:	f001 fe02 	bl	8001ec8 <HAL_ADCEx_MultiModeConfigChannel>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80002ca:	f000 fb96 	bl	80009fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_ADC1_Init+0xf0>)
 80002d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d2:	2306      	movs	r3, #6
 80002d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002da:	237f      	movs	r3, #127	; 0x7f
 80002dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002de:	2304      	movs	r3, #4
 80002e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4619      	mov	r1, r3
 80002ea:	4806      	ldr	r0, [pc, #24]	; (8000304 <MX_ADC1_Init+0xec>)
 80002ec:	f001 f9d6 	bl	800169c <HAL_ADC_ConfigChannel>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80002f6:	f000 fb80 	bl	80009fa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	3730      	adds	r7, #48	; 0x30
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200001a0 	.word	0x200001a0
 8000308:	14f00020 	.word	0x14f00020

0800030c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000312:	463b      	mov	r3, r7
 8000314:	2220      	movs	r2, #32
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f00a fbc9 	bl	800aab0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800031e:	4b2b      	ldr	r3, [pc, #172]	; (80003cc <MX_ADC2_Init+0xc0>)
 8000320:	4a2b      	ldr	r2, [pc, #172]	; (80003d0 <MX_ADC2_Init+0xc4>)
 8000322:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000324:	4b29      	ldr	r3, [pc, #164]	; (80003cc <MX_ADC2_Init+0xc0>)
 8000326:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800032a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800032c:	4b27      	ldr	r3, [pc, #156]	; (80003cc <MX_ADC2_Init+0xc0>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000332:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_ADC2_Init+0xc0>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000338:	4b24      	ldr	r3, [pc, #144]	; (80003cc <MX_ADC2_Init+0xc0>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800033e:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_ADC2_Init+0xc0>)
 8000340:	2200      	movs	r2, #0
 8000342:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000344:	4b21      	ldr	r3, [pc, #132]	; (80003cc <MX_ADC2_Init+0xc0>)
 8000346:	2204      	movs	r2, #4
 8000348:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_ADC2_Init+0xc0>)
 800034c:	2200      	movs	r2, #0
 800034e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_ADC2_Init+0xc0>)
 8000352:	2200      	movs	r2, #0
 8000354:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000356:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <MX_ADC2_Init+0xc0>)
 8000358:	2201      	movs	r2, #1
 800035a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_ADC2_Init+0xc0>)
 800035e:	2200      	movs	r2, #0
 8000360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000364:	4b19      	ldr	r3, [pc, #100]	; (80003cc <MX_ADC2_Init+0xc0>)
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800036a:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_ADC2_Init+0xc0>)
 800036c:	2200      	movs	r2, #0
 800036e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <MX_ADC2_Init+0xc0>)
 8000372:	2200      	movs	r2, #0
 8000374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_ADC2_Init+0xc0>)
 800037a:	2200      	movs	r2, #0
 800037c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <MX_ADC2_Init+0xc0>)
 8000380:	2200      	movs	r2, #0
 8000382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000386:	4811      	ldr	r0, [pc, #68]	; (80003cc <MX_ADC2_Init+0xc0>)
 8000388:	f000 fffe 	bl	8001388 <HAL_ADC_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000392:	f000 fb32 	bl	80009fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_ADC2_Init+0xc8>)
 8000398:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039a:	2306      	movs	r3, #6
 800039c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800039e:	2300      	movs	r3, #0
 80003a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003a2:	237f      	movs	r3, #127	; 0x7f
 80003a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a6:	2304      	movs	r3, #4
 80003a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ae:	463b      	mov	r3, r7
 80003b0:	4619      	mov	r1, r3
 80003b2:	4806      	ldr	r0, [pc, #24]	; (80003cc <MX_ADC2_Init+0xc0>)
 80003b4:	f001 f972 	bl	800169c <HAL_ADC_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80003be:	f000 fb1c 	bl	80009fa <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000020c 	.word	0x2000020c
 80003d0:	50000100 	.word	0x50000100
 80003d4:	32601000 	.word	0x32601000

080003d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b09e      	sub	sp, #120	; 0x78
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f0:	f107 0320 	add.w	r3, r7, #32
 80003f4:	2244      	movs	r2, #68	; 0x44
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f00a fb59 	bl	800aab0 <memset>
  if(adcHandle->Instance==ADC1)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000406:	d13e      	bne.n	8000486 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800040c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800040e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000412:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000414:	f107 0320 	add.w	r3, r7, #32
 8000418:	4618      	mov	r0, r3
 800041a:	f004 fea9 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000424:	f000 fae9 	bl	80009fa <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000428:	4b47      	ldr	r3, [pc, #284]	; (8000548 <HAL_ADC_MspInit+0x170>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	4a46      	ldr	r2, [pc, #280]	; (8000548 <HAL_ADC_MspInit+0x170>)
 8000430:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000432:	4b45      	ldr	r3, [pc, #276]	; (8000548 <HAL_ADC_MspInit+0x170>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d10b      	bne.n	8000452 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800043a:	4b44      	ldr	r3, [pc, #272]	; (800054c <HAL_ADC_MspInit+0x174>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a43      	ldr	r2, [pc, #268]	; (800054c <HAL_ADC_MspInit+0x174>)
 8000440:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b41      	ldr	r3, [pc, #260]	; (800054c <HAL_ADC_MspInit+0x174>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800044e:	61fb      	str	r3, [r7, #28]
 8000450:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b3e      	ldr	r3, [pc, #248]	; (800054c <HAL_ADC_MspInit+0x174>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a3d      	ldr	r2, [pc, #244]	; (800054c <HAL_ADC_MspInit+0x174>)
 8000458:	f043 0302 	orr.w	r3, r3, #2
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b3b      	ldr	r3, [pc, #236]	; (800054c <HAL_ADC_MspInit+0x174>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	61bb      	str	r3, [r7, #24]
 8000468:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 800046a:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800046e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000470:	2303      	movs	r3, #3
 8000472:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000478:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800047c:	4619      	mov	r1, r3
 800047e:	4834      	ldr	r0, [pc, #208]	; (8000550 <HAL_ADC_MspInit+0x178>)
 8000480:	f002 f8b8 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000484:	e05b      	b.n	800053e <HAL_ADC_MspInit+0x166>
  else if(adcHandle->Instance==ADC2)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a32      	ldr	r2, [pc, #200]	; (8000554 <HAL_ADC_MspInit+0x17c>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d156      	bne.n	800053e <HAL_ADC_MspInit+0x166>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000494:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000496:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800049a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049c:	f107 0320 	add.w	r3, r7, #32
 80004a0:	4618      	mov	r0, r3
 80004a2:	f004 fe65 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80004ac:	f000 faa5 	bl	80009fa <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80004b0:	4b25      	ldr	r3, [pc, #148]	; (8000548 <HAL_ADC_MspInit+0x170>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4a24      	ldr	r2, [pc, #144]	; (8000548 <HAL_ADC_MspInit+0x170>)
 80004b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004ba:	4b23      	ldr	r3, [pc, #140]	; (8000548 <HAL_ADC_MspInit+0x170>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d10b      	bne.n	80004da <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80004c2:	4b22      	ldr	r3, [pc, #136]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	4a21      	ldr	r2, [pc, #132]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ce:	4b1f      	ldr	r3, [pc, #124]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b1c      	ldr	r3, [pc, #112]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a1b      	ldr	r2, [pc, #108]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b19      	ldr	r3, [pc, #100]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a15      	ldr	r2, [pc, #84]	; (800054c <HAL_ADC_MspInit+0x174>)
 80004f8:	f043 0302 	orr.w	r3, r3, #2
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <HAL_ADC_MspInit+0x174>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800050a:	23c0      	movs	r3, #192	; 0xc0
 800050c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050e:	2303      	movs	r3, #3
 8000510:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800051a:	4619      	mov	r1, r3
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f002 f868 	bl	80025f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000524:	f248 0304 	movw	r3, #32772	; 0x8004
 8000528:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052a:	2303      	movs	r3, #3
 800052c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <HAL_ADC_MspInit+0x178>)
 800053a:	f002 f85b 	bl	80025f4 <HAL_GPIO_Init>
}
 800053e:	bf00      	nop
 8000540:	3778      	adds	r7, #120	; 0x78
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000278 	.word	0x20000278
 800054c:	40021000 	.word	0x40021000
 8000550:	48000400 	.word	0x48000400
 8000554:	50000100 	.word	0x50000100

08000558 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_CORDIC_Init+0x20>)
 800055e:	4a07      	ldr	r2, [pc, #28]	; (800057c <MX_CORDIC_Init+0x24>)
 8000560:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_CORDIC_Init+0x20>)
 8000564:	f001 fd54 	bl	8002010 <HAL_CORDIC_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800056e:	f000 fa44 	bl	80009fa <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	2000027c 	.word	0x2000027c
 800057c:	40020c00 	.word	0x40020c00

08000580 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <HAL_CORDIC_MspInit+0x38>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d10b      	bne.n	80005aa <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_CORDIC_MspInit+0x3c>)
 8000594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000596:	4a09      	ldr	r2, [pc, #36]	; (80005bc <HAL_CORDIC_MspInit+0x3c>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	6493      	str	r3, [r2, #72]	; 0x48
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <HAL_CORDIC_MspInit+0x3c>)
 80005a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40020c00 	.word	0x40020c00
 80005bc:	40021000 	.word	0x40021000

080005c0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <MX_FDCAN1_Init+0x84>)
 80005c6:	4a20      	ldr	r2, [pc, #128]	; (8000648 <MX_FDCAN1_Init+0x88>)
 80005c8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <MX_FDCAN1_Init+0x84>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <MX_FDCAN1_Init+0x84>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005d6:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <MX_FDCAN1_Init+0x84>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <MX_FDCAN1_Init+0x84>)
 80005de:	2200      	movs	r2, #0
 80005e0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_FDCAN1_Init+0x84>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <MX_FDCAN1_Init+0x84>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_FDCAN1_Init+0x84>)
 80005f0:	2210      	movs	r2, #16
 80005f2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <MX_FDCAN1_Init+0x84>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_FDCAN1_Init+0x84>)
 80005fc:	2202      	movs	r2, #2
 80005fe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_FDCAN1_Init+0x84>)
 8000602:	2202      	movs	r2, #2
 8000604:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_FDCAN1_Init+0x84>)
 8000608:	2201      	movs	r2, #1
 800060a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_FDCAN1_Init+0x84>)
 800060e:	2201      	movs	r2, #1
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_FDCAN1_Init+0x84>)
 8000614:	2201      	movs	r2, #1
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_FDCAN1_Init+0x84>)
 800061a:	2201      	movs	r2, #1
 800061c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_FDCAN1_Init+0x84>)
 8000620:	2200      	movs	r2, #0
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_FDCAN1_Init+0x84>)
 8000626:	2200      	movs	r2, #0
 8000628:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_FDCAN1_Init+0x84>)
 800062c:	2200      	movs	r2, #0
 800062e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_FDCAN1_Init+0x84>)
 8000632:	f001 fe2f 	bl	8002294 <HAL_FDCAN_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800063c:	f000 f9dd 	bl	80009fa <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200002a4 	.word	0x200002a4
 8000648:	40006400 	.word	0x40006400

0800064c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b09a      	sub	sp, #104	; 0x68
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2244      	movs	r2, #68	; 0x44
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f00a fa1f 	bl	800aab0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <HAL_FDCAN_MspInit+0xac>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d138      	bne.n	80006ee <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fd6f 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000698:	f000 f9af 	bl	80009fa <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_FDCAN_MspInit+0xb0>)
 800069e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a0:	4a16      	ldr	r2, [pc, #88]	; (80006fc <HAL_FDCAN_MspInit+0xb0>)
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a6:	6593      	str	r3, [r2, #88]	; 0x58
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <HAL_FDCAN_MspInit+0xb0>)
 80006aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_FDCAN_MspInit+0xb0>)
 80006b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b8:	4a10      	ldr	r2, [pc, #64]	; (80006fc <HAL_FDCAN_MspInit+0xb0>)
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_FDCAN_MspInit+0xb0>)
 80006c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006d0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	2302      	movs	r3, #2
 80006d4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80006de:	2309      	movs	r3, #9
 80006e0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <HAL_FDCAN_MspInit+0xb4>)
 80006ea:	f001 ff83 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3768      	adds	r7, #104	; 0x68
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40006400 	.word	0x40006400
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000400 	.word	0x48000400

08000704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xa4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <MX_GPIO_Init+0xa4>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_GPIO_Init+0xa4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_GPIO_Init+0xa4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <MX_GPIO_Init+0xa4>)
 8000738:	f043 0320 	orr.w	r3, r3, #32
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_GPIO_Init+0xa4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0320 	and.w	r3, r3, #32
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_GPIO_Init+0xa4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <MX_GPIO_Init+0xa4>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_GPIO_Init+0xa4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_GPIO_Init+0xa4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <MX_GPIO_Init+0xa4>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_GPIO_Init+0xa4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_nCS0_GPIO_Port, SPI3_nCS0_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0xa8>)
 8000780:	f002 f8ba 	bl	80028f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_nCS0_Pin;
 8000784:	2340      	movs	r3, #64	; 0x40
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_nCS0_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0xa8>)
 800079c:	f001 ff2a 	bl	80025f4 <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000400 	.word	0x48000400

080007b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_I2C1_Init+0x74>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <MX_I2C1_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60505F8C;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_I2C1_Init+0x74>)
 80007bc:	4a1b      	ldr	r2, [pc, #108]	; (800082c <MX_I2C1_Init+0x7c>)
 80007be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_I2C1_Init+0x74>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_I2C1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_I2C1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ea:	480e      	ldr	r0, [pc, #56]	; (8000824 <MX_I2C1_Init+0x74>)
 80007ec:	f002 f8b6 	bl	800295c <HAL_I2C_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007f6:	f000 f900 	bl	80009fa <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <MX_I2C1_Init+0x74>)
 80007fe:	f002 f93c 	bl	8002a7a <HAL_I2CEx_ConfigAnalogFilter>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000808:	f000 f8f7 	bl	80009fa <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_I2C1_Init+0x74>)
 8000810:	f002 f97e 	bl	8002b10 <HAL_I2CEx_ConfigDigitalFilter>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800081a:	f000 f8ee 	bl	80009fa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000308 	.word	0x20000308
 8000828:	40005400 	.word	0x40005400
 800082c:	60505f8c 	.word	0x60505f8c

08000830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	; 0x70
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000848:	f107 0318 	add.w	r3, r7, #24
 800084c:	2244      	movs	r2, #68	; 0x44
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f00a f92d 	bl	800aab0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a2d      	ldr	r2, [pc, #180]	; (8000910 <HAL_I2C_MspInit+0xe0>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d153      	bne.n	8000908 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000860:	2340      	movs	r3, #64	; 0x40
 8000862:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000864:	2300      	movs	r3, #0
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4618      	mov	r0, r3
 800086e:	f004 fc7f 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000878:	f000 f8bf 	bl	80009fa <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <HAL_I2C_MspInit+0xe4>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000880:	4a24      	ldr	r2, [pc, #144]	; (8000914 <HAL_I2C_MspInit+0xe4>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <HAL_I2C_MspInit+0xe4>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <HAL_I2C_MspInit+0xe4>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <HAL_I2C_MspInit+0xe4>)
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_I2C_MspInit+0xe4>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a4:	f003 0302 	and.w	r3, r3, #2
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b2:	2312      	movs	r3, #18
 80008b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008be:	2304      	movs	r3, #4
 80008c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f001 fe92 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d4:	2312      	movs	r3, #18
 80008d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e0:	2304      	movs	r3, #4
 80008e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008e8:	4619      	mov	r1, r3
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <HAL_I2C_MspInit+0xe8>)
 80008ec:	f001 fe82 	bl	80025f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_I2C_MspInit+0xe4>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_I2C_MspInit+0xe4>)
 80008f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008fa:	6593      	str	r3, [r2, #88]	; 0x58
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_I2C_MspInit+0xe4>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000908:	bf00      	nop
 800090a:	3770      	adds	r7, #112	; 0x70
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40005400 	.word	0x40005400
 8000914:	40021000 	.word	0x40021000
 8000918:	48000400 	.word	0x48000400

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000920:	f000 fac5 	bl	8000eae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 f81e 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f7ff feec 	bl	8000704 <MX_GPIO_Init>
  MX_ADC1_Init();
 800092c:	f7ff fc74 	bl	8000218 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000930:	f7ff fe46 	bl	80005c0 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000934:	f7ff ff3c 	bl	80007b0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000938:	f000 f950 	bl	8000bdc <MX_TIM1_Init>
  MX_ADC2_Init();
 800093c:	f7ff fce6 	bl	800030c <MX_ADC2_Init>
  MX_CORDIC_Init();
 8000940:	f7ff fe0a 	bl	8000558 <MX_CORDIC_Init>
  MX_SPI3_Init();
 8000944:	f000 f85e 	bl	8000a04 <MX_SPI3_Init>
  MX_USB_Device_Init();
 8000948:	f009 fba8 	bl	800a09c <MX_USB_Device_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(500);
 800094c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000950:	f000 fb1e 	bl	8000f90 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8000954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000958:	4801      	ldr	r0, [pc, #4]	; (8000960 <main+0x44>)
 800095a:	f001 ffe5 	bl	8002928 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800095e:	e7f5      	b.n	800094c <main+0x30>
 8000960:	48000800 	.word	0x48000800

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b094      	sub	sp, #80	; 0x50
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0318 	add.w	r3, r7, #24
 800096e:	2238      	movs	r2, #56	; 0x38
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f00a f89c 	bl	800aab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000986:	2000      	movs	r0, #0
 8000988:	f003 fe42 	bl	8004610 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800098c:	2321      	movs	r3, #33	; 0x21
 800098e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000994:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000996:	2301      	movs	r3, #1
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	2303      	movs	r3, #3
 80009a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 80009a6:	231c      	movs	r3, #28
 80009a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 fedc 	bl	8004778 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009c6:	f000 f818 	bl	80009fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2303      	movs	r3, #3
 80009d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2104      	movs	r1, #4
 80009e2:	4618      	mov	r0, r3
 80009e4:	f004 f9e0 	bl	8004da8 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009ee:	f000 f804 	bl	80009fa <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3750      	adds	r7, #80	; 0x50
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fe:	b672      	cpsid	i
}
 8000a00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <Error_Handler+0x8>

08000a04 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_SPI3_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a22:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a36:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a52:	2207      	movs	r2, #7
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a64:	f004 fd74 	bl	8005550 <HAL_SPI_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f7ff ffc4 	bl	80009fa <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000354 	.word	0x20000354
 8000a7c:	40003c00 	.word	0x40003c00

08000a80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_SPI_MspInit+0x7c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d127      	bne.n	8000af2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_SPI_MspInit+0x80>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <HAL_SPI_MspInit+0x80>)
 8000aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aac:	6593      	str	r3, [r2, #88]	; 0x58
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_SPI_MspInit+0x80>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_SPI_MspInit+0x80>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <HAL_SPI_MspInit+0x80>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_SPI_MspInit+0x80>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ad2:	2338      	movs	r3, #56	; 0x38
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <HAL_SPI_MspInit+0x84>)
 8000aee:	f001 fd81 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40003c00 	.word	0x40003c00
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48000400 	.word	0x48000400

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x44>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b3e:	f003 fe0b 	bl	8004758 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f9da 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <USB_LP_IRQHandler+0x10>)
 8000baa:	f002 f904 	bl	8002db6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200010ac 	.word	0x200010ac

08000bb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b098      	sub	sp, #96	; 0x60
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]
 8000bfe:	615a      	str	r2, [r3, #20]
 8000c00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2234      	movs	r2, #52	; 0x34
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f009 ff51 	bl	800aab0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c0e:	4b47      	ldr	r3, [pc, #284]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000c10:	4a47      	ldr	r2, [pc, #284]	; (8000d30 <MX_TIM1_Init+0x154>)
 8000c12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c14:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b44      	ldr	r3, [pc, #272]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c20:	4b42      	ldr	r3, [pc, #264]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c28:	4b40      	ldr	r3, [pc, #256]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c2e:	4b3f      	ldr	r3, [pc, #252]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c34:	4b3d      	ldr	r3, [pc, #244]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c3a:	483c      	ldr	r0, [pc, #240]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000c3c:	f004 fd33 	bl	80056a6 <HAL_TIM_PWM_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c46:	f7ff fed8 	bl	80009fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4833      	ldr	r0, [pc, #204]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000c5e:	f005 fa13 	bl	8006088 <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c68:	f7ff fec7 	bl	80009fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6c:	2360      	movs	r3, #96	; 0x60
 8000c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c74:	2300      	movs	r3, #0
 8000c76:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4826      	ldr	r0, [pc, #152]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000c92:	f004 fd5f 	bl	8005754 <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c9c:	f7ff fead 	bl	80009fa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4820      	ldr	r0, [pc, #128]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000caa:	f004 fd53 	bl	8005754 <HAL_TIM_PWM_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000cb4:	f7ff fea1 	bl	80009fa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	481a      	ldr	r0, [pc, #104]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000cc2:	f004 fd47 	bl	8005754 <HAL_TIM_PWM_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000ccc:	f7ff fe95 	bl	80009fa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000d0e:	f005 fa3d 	bl	800618c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000d18:	f7ff fe6f 	bl	80009fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <MX_TIM1_Init+0x150>)
 8000d1e:	f000 f829 	bl	8000d74 <HAL_TIM_MspPostInit>

}
 8000d22:	bf00      	nop
 8000d24:	3760      	adds	r7, #96	; 0x60
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200003b8 	.word	0x200003b8
 8000d30:	40012c00 	.word	0x40012c00

08000d34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_TIM_PWM_MspInit+0x38>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10b      	bne.n	8000d5e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4a:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d50:	6613      	str	r3, [r2, #96]	; 0x60
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40012c00 	.word	0x40012c00
 8000d70:	40021000 	.word	0x40021000

08000d74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a2e      	ldr	r2, [pc, #184]	; (8000e4c <HAL_TIM_MspPostInit+0xd8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d156      	bne.n	8000e44 <HAL_TIM_MspPostInit+0xd0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <HAL_TIM_MspPostInit+0xdc>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a2d      	ldr	r2, [pc, #180]	; (8000e50 <HAL_TIM_MspPostInit+0xdc>)
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_TIM_MspPostInit+0xdc>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <HAL_TIM_MspPostInit+0xdc>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <HAL_TIM_MspPostInit+0xdc>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <HAL_TIM_MspPostInit+0xdc>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <HAL_TIM_MspPostInit+0xdc>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a21      	ldr	r2, [pc, #132]	; (8000e50 <HAL_TIM_MspPostInit+0xdc>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <HAL_TIM_MspPostInit+0xdc>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000df0:	2304      	movs	r3, #4
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4816      	ldr	r0, [pc, #88]	; (8000e54 <HAL_TIM_MspPostInit+0xe0>)
 8000dfc:	f001 fbfa 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e00:	2303      	movs	r3, #3
 8000e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e10:	2306      	movs	r3, #6
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480f      	ldr	r0, [pc, #60]	; (8000e58 <HAL_TIM_MspPostInit+0xe4>)
 8000e1c:	f001 fbea 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e20:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e32:	2306      	movs	r3, #6
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f001 fbd8 	bl	80025f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000800 	.word	0x48000800
 8000e58:	48000400 	.word	0x48000400

08000e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490e      	ldr	r1, [pc, #56]	; (8000e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0b      	ldr	r4, [pc, #44]	; (8000ea8 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e86:	f7ff fe97 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f009 fded 	bl	800aa68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e8e:	f7ff fd45 	bl	800091c <main>

08000e92 <LoopForever>:

LoopForever:
    b LoopForever
 8000e92:	e7fe      	b.n	8000e92 <LoopForever>
  ldr   r0, =_estack
 8000e94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000ea0:	0800ab38 	.word	0x0800ab38
  ldr r2, =_sbss
 8000ea4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000ea8:	200015c0 	.word	0x200015c0

08000eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_2_IRQHandler>

08000eae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f001 f9ab 	bl	8002214 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f000 f80e 	bl	8000ee0 <HAL_InitTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	e001      	b.n	8000ed4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed0:	f7ff fe1a 	bl	8000b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_InitTick+0x68>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d022      	beq.n	8000f3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_InitTick+0x6c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_InitTick+0x68>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 f9b6 	bl	800227a <HAL_SYSTICK_Config>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10f      	bne.n	8000f34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	d809      	bhi.n	8000f2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	f001 f982 	bl	800222a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_InitTick+0x70>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e007      	b.n	8000f3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e004      	b.n	8000f3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e001      	b.n	8000f3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f64:	6013      	str	r3, [r2, #0]
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20000404 	.word	0x20000404
 8000f74:	20000008 	.word	0x20000008

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000404 	.word	0x20000404

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d004      	beq.n	8000fb4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_Delay+0x40>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb4:	bf00      	nop
 8000fb6:	f7ff ffdf 	bl	8000f78 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d8f7      	bhi.n	8000fb6 <HAL_Delay+0x26>
  {
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	609a      	str	r2, [r3, #8]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3360      	adds	r3, #96	; 0x60
 800104e:	461a      	mov	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <LL_ADC_SetOffset+0x44>)
 800105e:	4013      	ands	r3, r2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	4313      	orrs	r3, r2
 800106c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	03fff000 	.word	0x03fff000

08001084 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3360      	adds	r3, #96	; 0x60
 8001092:	461a      	mov	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3360      	adds	r3, #96	; 0x60
 80010c0:	461a      	mov	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b087      	sub	sp, #28
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3360      	adds	r3, #96	; 0x60
 80010f6:	461a      	mov	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	431a      	orrs	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001110:	bf00      	nop
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3360      	adds	r3, #96	; 0x60
 800112c:	461a      	mov	r2, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	431a      	orrs	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001146:	bf00      	nop
 8001148:	371c      	adds	r7, #28
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	615a      	str	r2, [r3, #20]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3330      	adds	r3, #48	; 0x30
 8001188:	461a      	mov	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	4413      	add	r3, r2
 8001196:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	211f      	movs	r1, #31
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	401a      	ands	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	0e9b      	lsrs	r3, r3, #26
 80011b0:	f003 011f 	and.w	r1, r3, #31
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	431a      	orrs	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011c4:	bf00      	nop
 80011c6:	371c      	adds	r7, #28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3314      	adds	r3, #20
 80011e0:	461a      	mov	r2, r3
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	0e5b      	lsrs	r3, r3, #25
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	4413      	add	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	0d1b      	lsrs	r3, r3, #20
 80011f8:	f003 031f 	and.w	r3, r3, #31
 80011fc:	2107      	movs	r1, #7
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	401a      	ands	r2, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	0d1b      	lsrs	r3, r3, #20
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	431a      	orrs	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800121a:	bf00      	nop
 800121c:	371c      	adds	r7, #28
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d10a      	bne.n	8001252 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001248:	431a      	orrs	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001250:	e00a      	b.n	8001268 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125e:	43db      	mvns	r3, r3
 8001260:	401a      	ands	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	407f0000 	.word	0x407f0000

08001278 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6093      	str	r3, [r2, #8]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012b0:	d101      	bne.n	80012b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001300:	d101      	bne.n	8001306 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b01      	cmp	r3, #1
 8001326:	d101      	bne.n	800132c <LL_ADC_IsEnabled+0x18>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <LL_ADC_IsEnabled+0x1a>
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b04      	cmp	r3, #4
 800134c:	d101      	bne.n	8001352 <LL_ADC_REG_IsConversionOngoing+0x18>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b08      	cmp	r3, #8
 8001372:	d101      	bne.n	8001378 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e177      	b.n	8001692 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff f811 	bl	80003d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff67 	bl	800129c <LL_ADC_IsDeepPowerDownEnabled>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff4d 	bl	8001278 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff82 	bl	80012ec <LL_ADC_IsInternalRegulatorEnabled>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d115      	bne.n	800141a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff66 	bl	80012c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013f8:	4b9c      	ldr	r3, [pc, #624]	; (800166c <HAL_ADC_Init+0x2e4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	099b      	lsrs	r3, r3, #6
 80013fe:	4a9c      	ldr	r2, [pc, #624]	; (8001670 <HAL_ADC_Init+0x2e8>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	099b      	lsrs	r3, r3, #6
 8001406:	3301      	adds	r3, #1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800140c:	e002      	b.n	8001414 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3b01      	subs	r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f9      	bne.n	800140e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff64 	bl	80012ec <LL_ADC_IsInternalRegulatorEnabled>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10d      	bne.n	8001446 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142e:	f043 0210 	orr.w	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	f043 0201 	orr.w	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff75 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 8001450:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 8110 	bne.w	8001680 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 810c 	bne.w	8001680 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001470:	f043 0202 	orr.w	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff49 	bl	8001314 <LL_ADC_IsEnabled>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d111      	bne.n	80014ac <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001488:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800148c:	f7ff ff42 	bl	8001314 <LL_ADC_IsEnabled>
 8001490:	4604      	mov	r4, r0
 8001492:	4878      	ldr	r0, [pc, #480]	; (8001674 <HAL_ADC_Init+0x2ec>)
 8001494:	f7ff ff3e 	bl	8001314 <LL_ADC_IsEnabled>
 8001498:	4603      	mov	r3, r0
 800149a:	4323      	orrs	r3, r4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4874      	ldr	r0, [pc, #464]	; (8001678 <HAL_ADC_Init+0x2f0>)
 80014a8:	f7ff fd94 	bl	8000fd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7f5b      	ldrb	r3, [r3, #29]
 80014b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d106      	bne.n	80014e8 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	3b01      	subs	r3, #1
 80014e0:	045b      	lsls	r3, r3, #17
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d009      	beq.n	8001504 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	4b5c      	ldr	r3, [pc, #368]	; (800167c <HAL_ADC_Init+0x2f4>)
 800150c:	4013      	ands	r3, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	69b9      	ldr	r1, [r7, #24]
 8001514:	430b      	orrs	r3, r1
 8001516:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff01 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 8001538:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff0e 	bl	8001360 <LL_ADC_INJ_IsConversionOngoing>
 8001544:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d16d      	bne.n	8001628 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d16a      	bne.n	8001628 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001556:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800155e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800156e:	f023 0302 	bic.w	r3, r3, #2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	69b9      	ldr	r1, [r7, #24]
 8001578:	430b      	orrs	r3, r1
 800157a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d017      	beq.n	80015b4 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001592:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800159c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6911      	ldr	r1, [r2, #16]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80015b2:	e013      	b.n	80015dc <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	691a      	ldr	r2, [r3, #16]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d118      	bne.n	8001618 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015fc:	4311      	orrs	r1, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001602:	4311      	orrs	r1, r2
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001608:	430a      	orrs	r2, r1
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0201 	orr.w	r2, r2, #1
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	e007      	b.n	8001628 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d10c      	bne.n	800164a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f023 010f 	bic.w	r1, r3, #15
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	1e5a      	subs	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
 8001648:	e007      	b.n	800165a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 020f 	bic.w	r2, r2, #15
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	f023 0303 	bic.w	r3, r3, #3
 8001662:	f043 0201 	orr.w	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	65da      	str	r2, [r3, #92]	; 0x5c
 800166a:	e011      	b.n	8001690 <HAL_ADC_Init+0x308>
 800166c:	20000000 	.word	0x20000000
 8001670:	053e2d63 	.word	0x053e2d63
 8001674:	50000100 	.word	0x50000100
 8001678:	50000300 	.word	0x50000300
 800167c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	f043 0210 	orr.w	r2, r3, #16
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001690:	7ffb      	ldrb	r3, [r7, #31]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	bf00      	nop

0800169c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b0b6      	sub	sp, #216	; 0xd8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_ADC_ConfigChannel+0x22>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e3c8      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x7b4>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe35 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 83ad 	bne.w	8001e32 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	f7ff fd47 	bl	8001178 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fe23 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 80016f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fe2f 	bl	8001360 <LL_ADC_INJ_IsConversionOngoing>
 8001702:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001706:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 81d9 	bne.w	8001ac2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001714:	2b00      	cmp	r3, #0
 8001716:	f040 81d4 	bne.w	8001ac2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001722:	d10f      	bne.n	8001744 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff fd4e 	bl	80011d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fd08 	bl	8001152 <LL_ADC_SetSamplingTimeCommonConfig>
 8001742:	e00e      	b.n	8001762 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6819      	ldr	r1, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	461a      	mov	r2, r3
 8001752:	f7ff fd3d 	bl	80011d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fcf8 	bl	8001152 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2b04      	cmp	r3, #4
 8001782:	d022      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6919      	ldr	r1, [r3, #16]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001794:	f7ff fc52 	bl	800103c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6919      	ldr	r1, [r3, #16]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	461a      	mov	r2, r3
 80017a6:	f7ff fc9e 	bl	80010e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6919      	ldr	r1, [r3, #16]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	7f1b      	ldrb	r3, [r3, #28]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d102      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x124>
 80017ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017be:	e000      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x126>
 80017c0:	2300      	movs	r3, #0
 80017c2:	461a      	mov	r2, r3
 80017c4:	f7ff fcaa 	bl	800111c <LL_ADC_SetOffsetSaturation>
 80017c8:	e17b      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fc57 	bl	8001084 <LL_ADC_GetOffsetChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10a      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x15a>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fc4c 	bl	8001084 <LL_ADC_GetOffsetChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	0e9b      	lsrs	r3, r3, #26
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	e01e      	b.n	8001834 <HAL_ADC_ConfigChannel+0x198>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fc41 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001818:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800181c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001824:	2320      	movs	r3, #32
 8001826:	e004      	b.n	8001832 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001828:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <HAL_ADC_ConfigChannel+0x1b0>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0e9b      	lsrs	r3, r3, #26
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	e018      	b.n	800187e <HAL_ADC_ConfigChannel+0x1e2>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001868:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001870:	2320      	movs	r3, #32
 8001872:	e004      	b.n	800187e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001874:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800187e:	429a      	cmp	r2, r3
 8001880:	d106      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fc10 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2101      	movs	r1, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fbf4 	bl	8001084 <LL_ADC_GetOffsetChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x220>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2101      	movs	r1, #1
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fbe9 	bl	8001084 <LL_ADC_GetOffsetChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	0e9b      	lsrs	r3, r3, #26
 80018b6:	f003 021f 	and.w	r2, r3, #31
 80018ba:	e01e      	b.n	80018fa <HAL_ADC_ConfigChannel+0x25e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fbde 	bl	8001084 <LL_ADC_GetOffsetChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80018da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80018e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80018ea:	2320      	movs	r3, #32
 80018ec:	e004      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80018ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001902:	2b00      	cmp	r3, #0
 8001904:	d105      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x276>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	0e9b      	lsrs	r3, r3, #26
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	e018      	b.n	8001944 <HAL_ADC_ConfigChannel+0x2a8>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001926:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800192a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800192e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001936:	2320      	movs	r3, #32
 8001938:	e004      	b.n	8001944 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800193a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001944:	429a      	cmp	r2, r3
 8001946:	d106      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2200      	movs	r2, #0
 800194e:	2101      	movs	r1, #1
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fbad 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2102      	movs	r1, #2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fb91 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10a      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x2e6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2102      	movs	r1, #2
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fb86 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	0e9b      	lsrs	r3, r3, #26
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	e01e      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x324>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2102      	movs	r1, #2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fb7b 	bl	8001084 <LL_ADC_GetOffsetChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80019a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80019a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80019b0:	2320      	movs	r3, #32
 80019b2:	e004      	b.n	80019be <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80019b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x33c>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0e9b      	lsrs	r3, r3, #26
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	e016      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x36a>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80019ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80019f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80019f8:	2320      	movs	r3, #32
 80019fa:	e004      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80019fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d106      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2102      	movs	r1, #2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fb4c 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2103      	movs	r1, #3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fb30 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10a      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x3a8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2103      	movs	r1, #3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fb25 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	f003 021f 	and.w	r2, r3, #31
 8001a42:	e017      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x3d8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2103      	movs	r1, #3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fb1a 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a5e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001a66:	2320      	movs	r3, #32
 8001a68:	e003      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x3f0>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	e011      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x414>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	e003      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d106      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2103      	movs	r1, #3
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff faf7 	bl	80010b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fc24 	bl	8001314 <LL_ADC_IsEnabled>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 8140 	bne.w	8001d54 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6819      	ldr	r1, [r3, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f7ff fba1 	bl	8001228 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4a8f      	ldr	r2, [pc, #572]	; (8001d28 <HAL_ADC_ConfigChannel+0x68c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	f040 8131 	bne.w	8001d54 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10b      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x47e>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0e9b      	lsrs	r3, r3, #26
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2b09      	cmp	r3, #9
 8001b10:	bf94      	ite	ls
 8001b12:	2301      	movls	r3, #1
 8001b14:	2300      	movhi	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	e019      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x4b2>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b2a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001b32:	2320      	movs	r3, #32
 8001b34:	e003      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	2b09      	cmp	r3, #9
 8001b46:	bf94      	ite	ls
 8001b48:	2301      	movls	r3, #1
 8001b4a:	2300      	movhi	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d079      	beq.n	8001c46 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d107      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x4d2>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0e9b      	lsrs	r3, r3, #26
 8001b64:	3301      	adds	r3, #1
 8001b66:	069b      	lsls	r3, r3, #26
 8001b68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b6c:	e015      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x4fe>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e003      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	069b      	lsls	r3, r3, #26
 8001b96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x51e>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0e9b      	lsrs	r3, r3, #26
 8001bac:	3301      	adds	r3, #1
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	e017      	b.n	8001bea <HAL_ADC_ConfigChannel+0x54e>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	e003      	b.n	8001bde <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	3301      	adds	r3, #1
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	ea42 0103 	orr.w	r1, r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10a      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x574>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0e9b      	lsrs	r3, r3, #26
 8001c00:	3301      	adds	r3, #1
 8001c02:	f003 021f 	and.w	r2, r3, #31
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	051b      	lsls	r3, r3, #20
 8001c0e:	e018      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x5a6>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	e003      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	f003 021f 	and.w	r2, r3, #31
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c42:	430b      	orrs	r3, r1
 8001c44:	e081      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d107      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x5c6>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0e9b      	lsrs	r3, r3, #26
 8001c58:	3301      	adds	r3, #1
 8001c5a:	069b      	lsls	r3, r3, #26
 8001c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c60:	e015      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x5f2>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	e003      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	069b      	lsls	r3, r3, #26
 8001c8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x612>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0e9b      	lsrs	r3, r3, #26
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	e017      	b.n	8001cde <HAL_ADC_ConfigChannel+0x642>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	61fb      	str	r3, [r7, #28]
  return result;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	e003      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	ea42 0103 	orr.w	r1, r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10d      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x66e>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f003 021f 	and.w	r2, r3, #31
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b1e      	subs	r3, #30
 8001d02:	051b      	lsls	r3, r3, #20
 8001d04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d08:	e01e      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x6ac>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	613b      	str	r3, [r7, #16]
  return result;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d104      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001d22:	2320      	movs	r3, #32
 8001d24:	e006      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x698>
 8001d26:	bf00      	nop
 8001d28:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	f003 021f 	and.w	r2, r3, #31
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b1e      	subs	r3, #30
 8001d42:	051b      	lsls	r3, r3, #20
 8001d44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	6892      	ldr	r2, [r2, #8]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f7ff fa3e 	bl	80011d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <HAL_ADC_ConfigChannel+0x7bc>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d071      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d60:	483e      	ldr	r0, [pc, #248]	; (8001e5c <HAL_ADC_ConfigChannel+0x7c0>)
 8001d62:	f7ff f95d 	bl	8001020 <LL_ADC_GetCommonPathInternalCh>
 8001d66:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a3c      	ldr	r2, [pc, #240]	; (8001e60 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d004      	beq.n	8001d7e <HAL_ADC_ConfigChannel+0x6e2>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a3a      	ldr	r2, [pc, #232]	; (8001e64 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d127      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d121      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d92:	d157      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	482f      	ldr	r0, [pc, #188]	; (8001e5c <HAL_ADC_ConfigChannel+0x7c0>)
 8001da0:	f7ff f92b 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001da4:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_ADC_ConfigChannel+0x7cc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	4a30      	ldr	r2, [pc, #192]	; (8001e6c <HAL_ADC_ConfigChannel+0x7d0>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dbe:	e002      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f9      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dcc:	e03a      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_ADC_ConfigChannel+0x7d4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d113      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x764>
 8001dd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10d      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <HAL_ADC_ConfigChannel+0x7d8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d02a      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df6:	4619      	mov	r1, r3
 8001df8:	4818      	ldr	r0, [pc, #96]	; (8001e5c <HAL_ADC_ConfigChannel+0x7c0>)
 8001dfa:	f7ff f8fe 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dfe:	e021      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d11c      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d116      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a16      	ldr	r2, [pc, #88]	; (8001e74 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d011      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480c      	ldr	r0, [pc, #48]	; (8001e5c <HAL_ADC_ConfigChannel+0x7c0>)
 8001e2c:	f7ff f8e5 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
 8001e30:	e008      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	f043 0220 	orr.w	r2, r3, #32
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	37d8      	adds	r7, #216	; 0xd8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	80080000 	.word	0x80080000
 8001e5c:	50000300 	.word	0x50000300
 8001e60:	c3210000 	.word	0xc3210000
 8001e64:	90c00010 	.word	0x90c00010
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	053e2d63 	.word	0x053e2d63
 8001e70:	c7520000 	.word	0xc7520000
 8001e74:	50000100 	.word	0x50000100
 8001e78:	cb840000 	.word	0xcb840000

08001e7c <LL_ADC_IsEnabled>:
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <LL_ADC_IsEnabled+0x18>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <LL_ADC_IsEnabled+0x1a>
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d101      	bne.n	8001eba <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b0a1      	sub	sp, #132	; 0x84
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e08b      	b.n	8001ffe <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001efe:	d102      	bne.n	8001f06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f00:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	e001      	b.n	8001f0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10b      	bne.n	8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	f043 0220 	orr.w	r2, r3, #32
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e06a      	b.n	8001ffe <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ffb9 	bl	8001ea2 <LL_ADC_REG_IsConversionOngoing>
 8001f30:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ffb3 	bl	8001ea2 <LL_ADC_REG_IsConversionOngoing>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d14c      	bne.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d149      	bne.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001f4a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d028      	beq.n	8001fa6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f66:	035b      	lsls	r3, r3, #13
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f74:	f7ff ff82 	bl	8001e7c <LL_ADC_IsEnabled>
 8001f78:	4604      	mov	r4, r0
 8001f7a:	4823      	ldr	r0, [pc, #140]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f7c:	f7ff ff7e 	bl	8001e7c <LL_ADC_IsEnabled>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4323      	orrs	r3, r4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d133      	bne.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f90:	f023 030f 	bic.w	r3, r3, #15
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	6811      	ldr	r1, [r2, #0]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	6892      	ldr	r2, [r2, #8]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fa4:	e024      	b.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fb2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001fb6:	f7ff ff61 	bl	8001e7c <LL_ADC_IsEnabled>
 8001fba:	4604      	mov	r4, r0
 8001fbc:	4812      	ldr	r0, [pc, #72]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001fbe:	f7ff ff5d 	bl	8001e7c <LL_ADC_IsEnabled>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4323      	orrs	r3, r4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d112      	bne.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fd2:	f023 030f 	bic.w	r3, r3, #15
 8001fd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fd8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fda:	e009      	b.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe0:	f043 0220 	orr.w	r2, r3, #32
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001fee:	e000      	b.n	8001ff2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ff0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001ffa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3784      	adds	r7, #132	; 0x84
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	bf00      	nop
 8002008:	50000100 	.word	0x50000100
 800200c:	50000300 	.word	0x50000300

08002010 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e023      	b.n	800206a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe faa2 	bl	8000580 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002090:	4013      	ands	r3, r2
 8002092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800209c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a6:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	60d3      	str	r3, [r2, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <__NVIC_GetPriorityGrouping+0x18>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	f003 0307 	and.w	r3, r3, #7
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	db0b      	blt.n	8002102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4907      	ldr	r1, [pc, #28]	; (8002110 <__NVIC_EnableIRQ+0x38>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2001      	movs	r0, #1
 80020fa:	fa00 f202 	lsl.w	r2, r0, r2
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000e100 	.word	0xe000e100

08002114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	2b00      	cmp	r3, #0
 8002126:	db0a      	blt.n	800213e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	490c      	ldr	r1, [pc, #48]	; (8002160 <__NVIC_SetPriority+0x4c>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	0112      	lsls	r2, r2, #4
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	440b      	add	r3, r1
 8002138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800213c:	e00a      	b.n	8002154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4908      	ldr	r1, [pc, #32]	; (8002164 <__NVIC_SetPriority+0x50>)
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	3b04      	subs	r3, #4
 800214c:	0112      	lsls	r2, r2, #4
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	440b      	add	r3, r1
 8002152:	761a      	strb	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000e100 	.word	0xe000e100
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f1c3 0307 	rsb	r3, r3, #7
 8002182:	2b04      	cmp	r3, #4
 8002184:	bf28      	it	cs
 8002186:	2304      	movcs	r3, #4
 8002188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3304      	adds	r3, #4
 800218e:	2b06      	cmp	r3, #6
 8002190:	d902      	bls.n	8002198 <NVIC_EncodePriority+0x30>
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3b03      	subs	r3, #3
 8002196:	e000      	b.n	800219a <NVIC_EncodePriority+0x32>
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	f04f 32ff 	mov.w	r2, #4294967295
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43da      	mvns	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	401a      	ands	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b0:	f04f 31ff 	mov.w	r1, #4294967295
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	43d9      	mvns	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	4313      	orrs	r3, r2
         );
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3724      	adds	r7, #36	; 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e0:	d301      	bcc.n	80021e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00f      	b.n	8002206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <SysTick_Config+0x40>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ee:	210f      	movs	r1, #15
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f7ff ff8e 	bl	8002114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <SysTick_Config+0x40>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <SysTick_Config+0x40>)
 8002200:	2207      	movs	r2, #7
 8002202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	e000e010 	.word	0xe000e010

08002214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff29 	bl	8002074 <__NVIC_SetPriorityGrouping>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002238:	f7ff ff40 	bl	80020bc <__NVIC_GetPriorityGrouping>
 800223c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	6978      	ldr	r0, [r7, #20]
 8002244:	f7ff ff90 	bl	8002168 <NVIC_EncodePriority>
 8002248:	4602      	mov	r2, r0
 800224a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff5f 	bl	8002114 <__NVIC_SetPriority>
}
 8002256:	bf00      	nop
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff33 	bl	80020d8 <__NVIC_EnableIRQ>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ffa4 	bl	80021d0 <SysTick_Config>
 8002288:	4603      	mov	r3, r0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e147      	b.n	8002536 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe f9c6 	bl	800064c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0210 	bic.w	r2, r2, #16
 80022ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d0:	f7fe fe52 	bl	8000f78 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80022d6:	e012      	b.n	80022fe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80022d8:	f7fe fe4e 	bl	8000f78 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b0a      	cmp	r3, #10
 80022e4:	d90b      	bls.n	80022fe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2203      	movs	r2, #3
 80022f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e11b      	b.n	8002536 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b08      	cmp	r3, #8
 800230a:	d0e5      	beq.n	80022d8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800231c:	f7fe fe2c 	bl	8000f78 <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002322:	e012      	b.n	800234a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002324:	f7fe fe28 	bl	8000f78 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b0a      	cmp	r3, #10
 8002330:	d90b      	bls.n	800234a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	f043 0201 	orr.w	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0f5      	b.n	8002536 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0e5      	beq.n	8002324 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0202 	orr.w	r2, r2, #2
 8002366:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a74      	ldr	r2, [pc, #464]	; (8002540 <HAL_FDCAN_Init+0x2ac>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d103      	bne.n	800237a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002372:	4a74      	ldr	r2, [pc, #464]	; (8002544 <HAL_FDCAN_Init+0x2b0>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7c1b      	ldrb	r3, [r3, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d108      	bne.n	8002394 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002390:	619a      	str	r2, [r3, #24]
 8002392:	e007      	b.n	80023a4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7c5b      	ldrb	r3, [r3, #17]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d108      	bne.n	80023be <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ba:	619a      	str	r2, [r3, #24]
 80023bc:	e007      	b.n	80023ce <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7c9b      	ldrb	r3, [r3, #18]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d108      	bne.n	80023e8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699a      	ldr	r2, [r3, #24]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023e4:	619a      	str	r2, [r3, #24]
 80023e6:	e007      	b.n	80023f8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023f6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800241c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0210 	bic.w	r2, r2, #16
 800242c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699a      	ldr	r2, [r3, #24]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0204 	orr.w	r2, r2, #4
 8002444:	619a      	str	r2, [r3, #24]
 8002446:	e02c      	b.n	80024a2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d028      	beq.n	80024a2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d01c      	beq.n	8002492 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002466:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0210 	orr.w	r2, r2, #16
 8002476:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d110      	bne.n	80024a2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0220 	orr.w	r2, r2, #32
 800248e:	619a      	str	r2, [r3, #24]
 8002490:	e007      	b.n	80024a2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0220 	orr.w	r2, r2, #32
 80024a0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024b2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024ba:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024ca:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024cc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024d6:	d115      	bne.n	8002504 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	3b01      	subs	r3, #1
 80024e4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80024e6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	3b01      	subs	r3, #1
 80024ee:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80024f0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	3b01      	subs	r3, #1
 80024fa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002500:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002502:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f814 	bl	8002548 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40006400 	.word	0x40006400
 8002544:	40006500 	.word	0x40006500

08002548 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002552:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002562:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	041a      	lsls	r2, r3, #16
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002588:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	061a      	lsls	r2, r3, #24
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	e005      	b.n	80025d6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3304      	adds	r3, #4
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d3f3      	bcc.n	80025ca <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	4000a400 	.word	0x4000a400

080025f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002602:	e15a      	b.n	80028ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 814c 	beq.w	80028b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d005      	beq.n	8002634 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002630:	2b02      	cmp	r3, #2
 8002632:	d130      	bne.n	8002696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800266a:	2201      	movs	r2, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 0201 	and.w	r2, r3, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d017      	beq.n	80026d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d123      	bne.n	8002726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	6939      	ldr	r1, [r7, #16]
 8002722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0203 	and.w	r2, r3, #3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 80a6 	beq.w	80028b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002768:	4b5b      	ldr	r3, [pc, #364]	; (80028d8 <HAL_GPIO_Init+0x2e4>)
 800276a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276c:	4a5a      	ldr	r2, [pc, #360]	; (80028d8 <HAL_GPIO_Init+0x2e4>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6613      	str	r3, [r2, #96]	; 0x60
 8002774:	4b58      	ldr	r3, [pc, #352]	; (80028d8 <HAL_GPIO_Init+0x2e4>)
 8002776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002780:	4a56      	ldr	r2, [pc, #344]	; (80028dc <HAL_GPIO_Init+0x2e8>)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3302      	adds	r3, #2
 8002788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027aa:	d01f      	beq.n	80027ec <HAL_GPIO_Init+0x1f8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a4c      	ldr	r2, [pc, #304]	; (80028e0 <HAL_GPIO_Init+0x2ec>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d019      	beq.n	80027e8 <HAL_GPIO_Init+0x1f4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a4b      	ldr	r2, [pc, #300]	; (80028e4 <HAL_GPIO_Init+0x2f0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d013      	beq.n	80027e4 <HAL_GPIO_Init+0x1f0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a4a      	ldr	r2, [pc, #296]	; (80028e8 <HAL_GPIO_Init+0x2f4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00d      	beq.n	80027e0 <HAL_GPIO_Init+0x1ec>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a49      	ldr	r2, [pc, #292]	; (80028ec <HAL_GPIO_Init+0x2f8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <HAL_GPIO_Init+0x1e8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a48      	ldr	r2, [pc, #288]	; (80028f0 <HAL_GPIO_Init+0x2fc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d101      	bne.n	80027d8 <HAL_GPIO_Init+0x1e4>
 80027d4:	2305      	movs	r3, #5
 80027d6:	e00a      	b.n	80027ee <HAL_GPIO_Init+0x1fa>
 80027d8:	2306      	movs	r3, #6
 80027da:	e008      	b.n	80027ee <HAL_GPIO_Init+0x1fa>
 80027dc:	2304      	movs	r3, #4
 80027de:	e006      	b.n	80027ee <HAL_GPIO_Init+0x1fa>
 80027e0:	2303      	movs	r3, #3
 80027e2:	e004      	b.n	80027ee <HAL_GPIO_Init+0x1fa>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e002      	b.n	80027ee <HAL_GPIO_Init+0x1fa>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_GPIO_Init+0x1fa>
 80027ec:	2300      	movs	r3, #0
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	f002 0203 	and.w	r2, r2, #3
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	4093      	lsls	r3, r2
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027fe:	4937      	ldr	r1, [pc, #220]	; (80028dc <HAL_GPIO_Init+0x2e8>)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800280c:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <HAL_GPIO_Init+0x300>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002830:	4a30      	ldr	r2, [pc, #192]	; (80028f4 <HAL_GPIO_Init+0x300>)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002836:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <HAL_GPIO_Init+0x300>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800285a:	4a26      	ldr	r2, [pc, #152]	; (80028f4 <HAL_GPIO_Init+0x300>)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002860:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <HAL_GPIO_Init+0x300>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002884:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_GPIO_Init+0x300>)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <HAL_GPIO_Init+0x300>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028ae:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_GPIO_Init+0x300>)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3301      	adds	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f47f ae9d 	bne.w	8002604 <HAL_GPIO_Init+0x10>
  }
}
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010000 	.word	0x40010000
 80028e0:	48000400 	.word	0x48000400
 80028e4:	48000800 	.word	0x48000800
 80028e8:	48000c00 	.word	0x48000c00
 80028ec:	48001000 	.word	0x48001000
 80028f0:	48001400 	.word	0x48001400
 80028f4:	40010400 	.word	0x40010400

080028f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
 8002904:	4613      	mov	r3, r2
 8002906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002908:	787b      	ldrb	r3, [r7, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002914:	e002      	b.n	800291c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4013      	ands	r3, r2
 8002940:	041a      	lsls	r2, r3, #16
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	43d9      	mvns	r1, r3
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	400b      	ands	r3, r1
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	619a      	str	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e081      	b.n	8002a72 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fd ff54 	bl	8000830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	; 0x24
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	e006      	b.n	80029e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d104      	bne.n	80029f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69d9      	ldr	r1, [r3, #28]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d138      	bne.n	8002b02 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e032      	b.n	8002b04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2224      	movs	r2, #36	; 0x24
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002acc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6819      	ldr	r1, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0201 	orr.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d139      	bne.n	8002b9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e033      	b.n	8002b9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2224      	movs	r2, #36	; 0x24
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
  }
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002baa:	b08b      	sub	sp, #44	; 0x2c
 8002bac:	af06      	add	r7, sp, #24
 8002bae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0d7      	b.n	8002d6a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f007 fc44 	bl	800a45c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 fb8a 	bl	80062fa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e04c      	b.n	8002c86 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	b298      	uxth	r0, r3
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	3336      	adds	r3, #54	; 0x36
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3303      	adds	r3, #3
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	3338      	adds	r3, #56	; 0x38
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	333c      	adds	r3, #60	; 0x3c
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	3340      	adds	r3, #64	; 0x40
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	3301      	adds	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3ad      	bcc.n	8002bec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e044      	b.n	8002d20 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	440b      	add	r3, r1
 8002cd0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3b5      	bcc.n	8002c96 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	687e      	ldr	r6, [r7, #4]
 8002d32:	466d      	mov	r5, sp
 8002d34:	f106 0410 	add.w	r4, r6, #16
 8002d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	602b      	str	r3, [r5, #0]
 8002d40:	1d33      	adds	r3, r6, #4
 8002d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d44:	6838      	ldr	r0, [r7, #0]
 8002d46:	f003 faf3 	bl	8006330 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d102      	bne.n	8002d68 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f001 fc29 	bl	80045ba <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_PCD_Start+0x16>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e012      	b.n	8002dae <HAL_PCD_Start+0x3c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 fa99 	bl	80062cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f005 fcb2 	bl	8008708 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f005 fcb7 	bl	8008736 <USB_ReadInterrupts>
 8002dc8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fb26 	bl	8003426 <PCD_EP_ISR_Handler>

    return;
 8002dda:	e110      	b.n	8002ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d013      	beq.n	8002e0e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df8:	b292      	uxth	r2, r2
 8002dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f007 fbbd 	bl	800a57e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e04:	2100      	movs	r1, #0
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8fc 	bl	8003004 <HAL_PCD_SetAddress>

    return;
 8002e0c:	e0f7      	b.n	8002ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00c      	beq.n	8002e32 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e30:	e0e5      	b.n	8002ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00c      	beq.n	8002e56 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e54:	e0d3      	b.n	8002ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d034      	beq.n	8002eca <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0204 	bic.w	r2, r2, #4
 8002e72:	b292      	uxth	r2, r2
 8002e74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0208 	bic.w	r2, r2, #8
 8002e8a:	b292      	uxth	r2, r2
 8002e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d107      	bne.n	8002eaa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f007 fd5f 	bl	800a968 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f007 fba0 	bl	800a5f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ec2:	b292      	uxth	r2, r2
 8002ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ec8:	e099      	b.n	8002ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d027      	beq.n	8002f24 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0208 	orr.w	r2, r2, #8
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efe:	b292      	uxth	r2, r2
 8002f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0204 	orr.w	r2, r2, #4
 8002f16:	b292      	uxth	r2, r2
 8002f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f007 fb4d 	bl	800a5bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f22:	e06c      	b.n	8002ffe <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d040      	beq.n	8002fb0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f40:	b292      	uxth	r2, r2
 8002f42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d12b      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0204 	orr.w	r2, r2, #4
 8002f62:	b292      	uxth	r2, r2
 8002f64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0208 	orr.w	r2, r2, #8
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	089b      	lsrs	r3, r3, #2
 8002f94:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f007 fce1 	bl	800a968 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002fa6:	e02a      	b.n	8002ffe <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f007 fb07 	bl	800a5bc <HAL_PCD_SuspendCallback>
    return;
 8002fae:	e026      	b.n	8002ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00f      	beq.n	8002fda <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f007 fac5 	bl	800a562 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fd8:	e011      	b.n	8002ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00c      	beq.n	8002ffe <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff6:	b292      	uxth	r2, r2
 8002ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ffc:	bf00      	nop
  }
}
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_PCD_SetAddress+0x1a>
 800301a:	2302      	movs	r3, #2
 800301c:	e013      	b.n	8003046 <HAL_PCD_SetAddress+0x42>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f005 fb52 	bl	80086e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	4608      	mov	r0, r1
 8003058:	4611      	mov	r1, r2
 800305a:	461a      	mov	r2, r3
 800305c:	4603      	mov	r3, r0
 800305e:	70fb      	strb	r3, [r7, #3]
 8003060:	460b      	mov	r3, r1
 8003062:	803b      	strh	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800306c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003070:	2b00      	cmp	r3, #0
 8003072:	da0e      	bge.n	8003092 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	705a      	strb	r2, [r3, #1]
 8003090:	e00e      	b.n	80030b0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 0207 	and.w	r2, r3, #7
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030bc:	883a      	ldrh	r2, [r7, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	78ba      	ldrb	r2, [r7, #2]
 80030c6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	785b      	ldrb	r3, [r3, #1]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030da:	78bb      	ldrb	r3, [r7, #2]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d102      	bne.n	80030e6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_PCD_EP_Open+0xa6>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e00e      	b.n	8003112 <HAL_PCD_EP_Open+0xc4>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68f9      	ldr	r1, [r7, #12]
 8003102:	4618      	mov	r0, r3
 8003104:	f003 f936 	bl	8006374 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003110:	7afb      	ldrb	r3, [r7, #11]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800312a:	2b00      	cmp	r3, #0
 800312c:	da0e      	bge.n	800314c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	705a      	strb	r2, [r3, #1]
 800314a:	e00e      	b.n	800316a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	f003 0207 	and.w	r2, r3, #7
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	b2da      	uxtb	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_PCD_EP_Close+0x6a>
 8003180:	2302      	movs	r3, #2
 8003182:	e00e      	b.n	80031a2 <HAL_PCD_EP_Close+0x88>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68f9      	ldr	r1, [r7, #12]
 8003192:	4618      	mov	r0, r3
 8003194:	f003 fc82 	bl	8006a9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	460b      	mov	r3, r1
 80031b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ba:	7afb      	ldrb	r3, [r7, #11]
 80031bc:	f003 0207 	and.w	r2, r3, #7
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2200      	movs	r2, #0
 80031e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2200      	movs	r2, #0
 80031e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ea:	7afb      	ldrb	r3, [r7, #11]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031f6:	7afb      	ldrb	r3, [r7, #11]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d106      	bne.n	800320e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6979      	ldr	r1, [r7, #20]
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fe35 	bl	8006e76 <USB_EPStartXfer>
 800320c:	e005      	b.n	800321a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6979      	ldr	r1, [r7, #20]
 8003214:	4618      	mov	r0, r3
 8003216:	f003 fe2e 	bl	8006e76 <USB_EPStartXfer>
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 0207 	and.w	r2, r3, #7
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	460b      	mov	r3, r1
 8003262:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003264:	7afb      	ldrb	r3, [r7, #11]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2201      	movs	r2, #1
 800329e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a0:	7afb      	ldrb	r3, [r7, #11]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ac:	7afb      	ldrb	r3, [r7, #11]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6979      	ldr	r1, [r7, #20]
 80032bc:	4618      	mov	r0, r3
 80032be:	f003 fdda 	bl	8006e76 <USB_EPStartXfer>
 80032c2:	e005      	b.n	80032d0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6979      	ldr	r1, [r7, #20]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 fdd3 	bl	8006e76 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 0207 	and.w	r2, r3, #7
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d901      	bls.n	80032f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e03e      	b.n	8003376 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da0e      	bge.n	800331e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	705a      	strb	r2, [r3, #1]
 800331c:	e00c      	b.n	8003338 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_PCD_EP_SetStall+0x7e>
 8003354:	2302      	movs	r3, #2
 8003356:	e00e      	b.n	8003376 <HAL_PCD_EP_SetStall+0x9c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68f9      	ldr	r1, [r7, #12]
 8003366:	4618      	mov	r0, r3
 8003368:	f005 f8bb 	bl	80084e2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 020f 	and.w	r2, r3, #15
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	429a      	cmp	r2, r3
 8003396:	d901      	bls.n	800339c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e040      	b.n	800341e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800339c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	da0e      	bge.n	80033c2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	705a      	strb	r2, [r3, #1]
 80033c0:	e00e      	b.n	80033e0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 0207 	and.w	r2, r3, #7
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_PCD_EP_ClrStall+0x82>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e00e      	b.n	800341e <HAL_PCD_EP_ClrStall+0xa0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68f9      	ldr	r1, [r7, #12]
 800340e:	4618      	mov	r0, r3
 8003410:	f005 f8b8 	bl	8008584 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b096      	sub	sp, #88	; 0x58
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800342e:	e39c      	b.n	8003b6a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003438:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800343c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800344a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 815e 	bne.w	8003710 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003454:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	d150      	bne.n	8003502 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800346c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003470:	81fb      	strh	r3, [r7, #14]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	89fb      	ldrh	r3, [r7, #14]
 8003478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003480:	b29b      	uxth	r3, r3
 8003482:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3328      	adds	r3, #40	; 0x28
 8003488:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003492:	b29b      	uxth	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	441a      	add	r2, r3
 80034bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034be:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034c0:	2100      	movs	r1, #0
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f007 f833 	bl	800a52e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 834a 	beq.w	8003b6a <PCD_EP_ISR_Handler+0x744>
 80034d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 8345 	bne.w	8003b6a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b292      	uxth	r2, r2
 80034f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003500:	e333      	b.n	8003b6a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003508:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003514:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351c:	2b00      	cmp	r3, #0
 800351e:	d032      	beq.n	8003586 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	4413      	add	r3, r2
 800353a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003546:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003554:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003558:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800355a:	b29b      	uxth	r3, r3
 800355c:	f005 f93d 	bl	80087da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29a      	uxth	r2, r3
 8003568:	f640 738f 	movw	r3, #3983	; 0xf8f
 800356c:	4013      	ands	r3, r2
 800356e:	823b      	strh	r3, [r7, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	8a3a      	ldrh	r2, [r7, #16]
 8003576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800357a:	b292      	uxth	r2, r2
 800357c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f006 ffa8 	bl	800a4d4 <HAL_PCD_SetupStageCallback>
 8003584:	e2f1      	b.n	8003b6a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003586:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800358a:	2b00      	cmp	r3, #0
 800358c:	f280 82ed 	bge.w	8003b6a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29a      	uxth	r2, r3
 8003598:	f640 738f 	movw	r3, #3983	; 0xf8f
 800359c:	4013      	ands	r3, r2
 800359e:	83fb      	strh	r3, [r7, #30]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	8bfa      	ldrh	r2, [r7, #30]
 80035a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035aa:	b292      	uxth	r2, r2
 80035ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	4413      	add	r3, r2
 80035c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d019      	beq.n	8003612 <PCD_EP_ISR_Handler+0x1ec>
 80035de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d015      	beq.n	8003612 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ec:	6959      	ldr	r1, [r3, #20]
 80035ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f005 f8ef 	bl	80087da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	441a      	add	r2, r3
 8003606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003608:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800360a:	2100      	movs	r1, #0
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f006 ff73 	bl	800a4f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 82a3 	bne.w	8003b6a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003632:	b29b      	uxth	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4413      	add	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b3e      	cmp	r3, #62	; 0x3e
 800364a:	d918      	bls.n	800367e <PCD_EP_ISR_Handler+0x258>
 800364c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	647b      	str	r3, [r7, #68]	; 0x44
 8003654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <PCD_EP_ISR_Handler+0x240>
 8003660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003662:	3b01      	subs	r3, #1
 8003664:	647b      	str	r3, [r7, #68]	; 0x44
 8003666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003668:	b29b      	uxth	r3, r3
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	b29b      	uxth	r3, r3
 800366e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003676:	b29a      	uxth	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	801a      	strh	r2, [r3, #0]
 800367c:	e029      	b.n	80036d2 <PCD_EP_ISR_Handler+0x2ac>
 800367e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d112      	bne.n	80036ac <PCD_EP_ISR_Handler+0x286>
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003690:	b29a      	uxth	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	801a      	strh	r2, [r3, #0]
 80036aa:	e012      	b.n	80036d2 <PCD_EP_ISR_Handler+0x2ac>
 80036ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	647b      	str	r3, [r7, #68]	; 0x44
 80036b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <PCD_EP_ISR_Handler+0x2a0>
 80036c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c2:	3301      	adds	r3, #1
 80036c4:	647b      	str	r3, [r7, #68]	; 0x44
 80036c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	029b      	lsls	r3, r3, #10
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	827b      	strh	r3, [r7, #18]
 80036e4:	8a7b      	ldrh	r3, [r7, #18]
 80036e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036ea:	827b      	strh	r3, [r7, #18]
 80036ec:	8a7b      	ldrh	r3, [r7, #18]
 80036ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036f2:	827b      	strh	r3, [r7, #18]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	8a7b      	ldrh	r3, [r7, #18]
 80036fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370a:	b29b      	uxth	r3, r3
 800370c:	8013      	strh	r3, [r2, #0]
 800370e:	e22c      	b.n	8003b6a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003724:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003728:	2b00      	cmp	r3, #0
 800372a:	f280 80f6 	bge.w	800391a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29a      	uxth	r2, r3
 8003740:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003744:	4013      	ands	r3, r2
 8003746:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800375c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003760:	b292      	uxth	r2, r2
 8003762:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003764:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800377a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377c:	7b1b      	ldrb	r3, [r3, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d123      	bne.n	80037ca <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	4413      	add	r3, r2
 800379c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80037aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 808e 	beq.w	80038d0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ba:	6959      	ldr	r1, [r3, #20]
 80037bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037be:	88da      	ldrh	r2, [r3, #6]
 80037c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037c4:	f005 f809 	bl	80087da <USB_ReadPMA>
 80037c8:	e082      	b.n	80038d0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037cc:	78db      	ldrb	r3, [r3, #3]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d10a      	bne.n	80037e8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037d6:	461a      	mov	r2, r3
 80037d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f9d3 	bl	8003b86 <HAL_PCD_EP_DB_Receive>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80037e6:	e073      	b.n	80038d0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	441a      	add	r2, r3
 8003814:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800381c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003824:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003828:	b29b      	uxth	r3, r3
 800382a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d022      	beq.n	800388c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384e:	b29b      	uxth	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	4413      	add	r3, r2
 8003860:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800386a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800386e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02c      	beq.n	80038d0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387c:	6959      	ldr	r1, [r3, #20]
 800387e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003880:	891a      	ldrh	r2, [r3, #8]
 8003882:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003886:	f004 ffa8 	bl	80087da <USB_ReadPMA>
 800388a:	e021      	b.n	80038d0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003894:	b29b      	uxth	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	4413      	add	r3, r2
 80038a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80038b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c2:	6959      	ldr	r1, [r3, #20]
 80038c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c6:	895a      	ldrh	r2, [r3, #10]
 80038c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038cc:	f004 ff85 	bl	80087da <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038d8:	441a      	add	r2, r3
 80038da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038e6:	441a      	add	r2, r3
 80038e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <PCD_EP_ISR_Handler+0x4da>
 80038f4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80038f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d206      	bcs.n	800390e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f006 fdf6 	bl	800a4f8 <HAL_PCD_DataOutStageCallback>
 800390c:	e005      	b.n	800391a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003914:	4618      	mov	r0, r3
 8003916:	f003 faae 	bl	8006e76 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800391a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8121 	beq.w	8003b6a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003928:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800396c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003974:	b29b      	uxth	r3, r3
 8003976:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397a:	78db      	ldrb	r3, [r3, #3]
 800397c:	2b02      	cmp	r3, #2
 800397e:	f000 80a2 	beq.w	8003ac6 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800398a:	7b1b      	ldrb	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8093 	beq.w	8003ab8 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003992:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d046      	beq.n	8003a2c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	785b      	ldrb	r3, [r3, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d126      	bne.n	80039f4 <PCD_EP_ISR_Handler+0x5ce>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	461a      	mov	r2, r3
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	4413      	add	r3, r2
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
 80039be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	00da      	lsls	r2, r3, #3
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	4413      	add	r3, r2
 80039c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039cc:	623b      	str	r3, [r7, #32]
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039d8:	b29a      	uxth	r2, r3
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	e061      	b.n	8003ab8 <PCD_EP_ISR_Handler+0x692>
 80039f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f6:	785b      	ldrb	r3, [r3, #1]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d15d      	bne.n	8003ab8 <PCD_EP_ISR_Handler+0x692>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	4413      	add	r3, r2
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	00da      	lsls	r2, r3, #3
 8003a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	2200      	movs	r2, #0
 8003a28:	801a      	strh	r2, [r3, #0]
 8003a2a:	e045      	b.n	8003ab8 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	785b      	ldrb	r3, [r3, #1]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d126      	bne.n	8003a88 <PCD_EP_ISR_Handler+0x662>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	4413      	add	r3, r2
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
 8003a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	00da      	lsls	r2, r3, #3
 8003a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a60:	633b      	str	r3, [r7, #48]	; 0x30
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	801a      	strh	r2, [r3, #0]
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	e017      	b.n	8003ab8 <PCD_EP_ISR_Handler+0x692>
 8003a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8a:	785b      	ldrb	r3, [r3, #1]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d113      	bne.n	8003ab8 <PCD_EP_ISR_Handler+0x692>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9e:	4413      	add	r3, r2
 8003aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	00da      	lsls	r2, r3, #3
 8003aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aaa:	4413      	add	r3, r2
 8003aac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	4619      	mov	r1, r3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f006 fd35 	bl	800a52e <HAL_PCD_DataInStageCallback>
 8003ac4:	e051      	b.n	8003b6a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003ac6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d144      	bne.n	8003b5c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	4413      	add	r3, r2
 8003aec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003af6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d907      	bls.n	8003b16 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8003b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b0e:	1ad2      	subs	r2, r2, r3
 8003b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b12:	619a      	str	r2, [r3, #24]
 8003b14:	e002      	b.n	8003b1c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8003b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b18:	2200      	movs	r2, #0
 8003b1a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f006 fcff 	bl	800a52e <HAL_PCD_DataInStageCallback>
 8003b30:	e01b      	b.n	8003b6a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b3a:	441a      	add	r2, r3
 8003b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b3e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b48:	441a      	add	r2, r3
 8003b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003b54:	4618      	mov	r0, r3
 8003b56:	f003 f98e 	bl	8006e76 <USB_EPStartXfer>
 8003b5a:	e006      	b.n	8003b6a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b5c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b60:	461a      	mov	r2, r3
 8003b62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f917 	bl	8003d98 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	b21b      	sxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f6ff ac5a 	blt.w	8003430 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3758      	adds	r7, #88	; 0x58
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b088      	sub	sp, #32
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	4613      	mov	r3, r2
 8003b92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d07c      	beq.n	8003c98 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	8b7b      	ldrh	r3, [r7, #26]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d306      	bcc.n	8003bdc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	8b7b      	ldrh	r3, [r7, #26]
 8003bd4:	1ad2      	subs	r2, r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	619a      	str	r2, [r3, #24]
 8003bda:	e002      	b.n	8003be2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d123      	bne.n	8003c32 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c04:	833b      	strh	r3, [r7, #24]
 8003c06:	8b3b      	ldrh	r3, [r7, #24]
 8003c08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c0c:	833b      	strh	r3, [r7, #24]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	441a      	add	r2, r3
 8003c1c:	8b3b      	ldrh	r3, [r7, #24]
 8003c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01f      	beq.n	8003c7c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c56:	82fb      	strh	r3, [r7, #22]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	441a      	add	r2, r3
 8003c66:	8afb      	ldrh	r3, [r7, #22]
 8003c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c7c:	8b7b      	ldrh	r3, [r7, #26]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8085 	beq.w	8003d8e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6959      	ldr	r1, [r3, #20]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	891a      	ldrh	r2, [r3, #8]
 8003c90:	8b7b      	ldrh	r3, [r7, #26]
 8003c92:	f004 fda2 	bl	80087da <USB_ReadPMA>
 8003c96:	e07a      	b.n	8003d8e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cbc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	8b7b      	ldrh	r3, [r7, #26]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d306      	bcc.n	8003cd6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	8b7b      	ldrh	r3, [r7, #26]
 8003cce:	1ad2      	subs	r2, r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	619a      	str	r2, [r3, #24]
 8003cd4:	e002      	b.n	8003cdc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d123      	bne.n	8003d2c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	83fb      	strh	r3, [r7, #30]
 8003d00:	8bfb      	ldrh	r3, [r7, #30]
 8003d02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d06:	83fb      	strh	r3, [r7, #30]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	441a      	add	r2, r3
 8003d16:	8bfb      	ldrh	r3, [r7, #30]
 8003d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d11f      	bne.n	8003d76 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d50:	83bb      	strh	r3, [r7, #28]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	441a      	add	r2, r3
 8003d60:	8bbb      	ldrh	r3, [r7, #28]
 8003d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d76:	8b7b      	ldrh	r3, [r7, #26]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6959      	ldr	r1, [r3, #20]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	895a      	ldrh	r2, [r3, #10]
 8003d88:	8b7b      	ldrh	r3, [r7, #26]
 8003d8a:	f004 fd26 	bl	80087da <USB_ReadPMA>
    }
  }

  return count;
 8003d8e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b0a2      	sub	sp, #136	; 0x88
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 81c5 	beq.w	800413c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d907      	bls.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dee:	1ad2      	subs	r2, r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	619a      	str	r2, [r3, #24]
 8003df4:	e002      	b.n	8003dfc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 80b9 	bne.w	8003f78 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d126      	bne.n	8003e5c <HAL_PCD_EP_DB_Transmit+0xc4>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	4413      	add	r3, r2
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	00da      	lsls	r2, r3, #3
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	4413      	add	r3, r2
 8003e30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	801a      	strh	r2, [r3, #0]
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	801a      	strh	r2, [r3, #0]
 8003e5a:	e01a      	b.n	8003e92 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	785b      	ldrb	r3, [r3, #1]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d116      	bne.n	8003e92 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	4413      	add	r3, r2
 8003e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	00da      	lsls	r2, r3, #3
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	4413      	add	r3, r2
 8003e86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	2200      	movs	r2, #0
 8003e90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	785b      	ldrb	r3, [r3, #1]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d126      	bne.n	8003eee <HAL_PCD_EP_DB_Transmit+0x156>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	00da      	lsls	r2, r3, #3
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	801a      	strh	r2, [r3, #0]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	e017      	b.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x186>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d113      	bne.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x186>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	4413      	add	r3, r2
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	00da      	lsls	r2, r3, #3
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	4413      	add	r3, r2
 8003f12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	4619      	mov	r1, r3
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f006 fb02 	bl	800a52e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 82d2 	beq.w	80044da <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f50:	827b      	strh	r3, [r7, #18]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	441a      	add	r2, r3
 8003f60:	8a7b      	ldrh	r3, [r7, #18]
 8003f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	8013      	strh	r3, [r2, #0]
 8003f76:	e2b0      	b.n	80044da <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d021      	beq.n	8003fc6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	441a      	add	r2, r3
 8003fae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	f040 8284 	bne.w	80044da <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fda:	441a      	add	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fe8:	441a      	add	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	6a1a      	ldr	r2, [r3, #32]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d309      	bcc.n	800400e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6a1a      	ldr	r2, [r3, #32]
 8004004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004006:	1ad2      	subs	r2, r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	621a      	str	r2, [r3, #32]
 800400c:	e015      	b.n	800403a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d107      	bne.n	8004026 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004016:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800401a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004024:	e009      	b.n	800403a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2200      	movs	r2, #0
 8004038:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	785b      	ldrb	r3, [r3, #1]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d155      	bne.n	80040ee <HAL_PCD_EP_DB_Transmit+0x356>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	63bb      	str	r3, [r7, #56]	; 0x38
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004050:	b29b      	uxth	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	4413      	add	r3, r2
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	00da      	lsls	r2, r3, #3
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	4413      	add	r3, r2
 8004064:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
 800406a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800406c:	2b3e      	cmp	r3, #62	; 0x3e
 800406e:	d916      	bls.n	800409e <HAL_PCD_EP_DB_Transmit+0x306>
 8004070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
 8004076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004082:	3b01      	subs	r3, #1
 8004084:	64bb      	str	r3, [r7, #72]	; 0x48
 8004086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004088:	b29b      	uxth	r3, r3
 800408a:	029b      	lsls	r3, r3, #10
 800408c:	b29b      	uxth	r3, r3
 800408e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004096:	b29a      	uxth	r2, r3
 8004098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409a:	801a      	strh	r2, [r3, #0]
 800409c:	e043      	b.n	8004126 <HAL_PCD_EP_DB_Transmit+0x38e>
 800409e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d112      	bne.n	80040ca <HAL_PCD_EP_DB_Transmit+0x332>
 80040a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b2:	801a      	strh	r2, [r3, #0]
 80040b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c6:	801a      	strh	r2, [r3, #0]
 80040c8:	e02d      	b.n	8004126 <HAL_PCD_EP_DB_Transmit+0x38e>
 80040ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x348>
 80040da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040dc:	3301      	adds	r3, #1
 80040de:	64bb      	str	r3, [r7, #72]	; 0x48
 80040e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	029b      	lsls	r3, r3, #10
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	e01b      	b.n	8004126 <HAL_PCD_EP_DB_Transmit+0x38e>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d117      	bne.n	8004126 <HAL_PCD_EP_DB_Transmit+0x38e>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	643b      	str	r3, [r7, #64]	; 0x40
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004104:	b29b      	uxth	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410a:	4413      	add	r3, r2
 800410c:	643b      	str	r3, [r7, #64]	; 0x40
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	00da      	lsls	r2, r3, #3
 8004114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004116:	4413      	add	r3, r2
 8004118:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800411c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800411e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004120:	b29a      	uxth	r2, r3
 8004122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004124:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6959      	ldr	r1, [r3, #20]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	891a      	ldrh	r2, [r3, #8]
 8004132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004134:	b29b      	uxth	r3, r3
 8004136:	f004 fb0e 	bl	8008756 <USB_WritePMA>
 800413a:	e1ce      	b.n	80044da <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004144:	b29b      	uxth	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	4413      	add	r3, r2
 8004156:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004160:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	699a      	ldr	r2, [r3, #24]
 8004168:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800416c:	429a      	cmp	r2, r3
 800416e:	d307      	bcc.n	8004180 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	699a      	ldr	r2, [r3, #24]
 8004174:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004178:	1ad2      	subs	r2, r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	619a      	str	r2, [r3, #24]
 800417e:	e002      	b.n	8004186 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2200      	movs	r2, #0
 8004184:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f040 80c4 	bne.w	8004318 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	785b      	ldrb	r3, [r3, #1]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d126      	bne.n	80041e6 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	66bb      	str	r3, [r7, #104]	; 0x68
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ac:	4413      	add	r3, r2
 80041ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	00da      	lsls	r2, r3, #3
 80041b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041b8:	4413      	add	r3, r2
 80041ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041be:	667b      	str	r3, [r7, #100]	; 0x64
 80041c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ce:	801a      	strh	r2, [r3, #0]
 80041d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041de:	b29a      	uxth	r2, r3
 80041e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041e2:	801a      	strh	r2, [r3, #0]
 80041e4:	e01a      	b.n	800421c <HAL_PCD_EP_DB_Transmit+0x484>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	785b      	ldrb	r3, [r3, #1]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d116      	bne.n	800421c <HAL_PCD_EP_DB_Transmit+0x484>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	673b      	str	r3, [r7, #112]	; 0x70
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004202:	4413      	add	r3, r2
 8004204:	673b      	str	r3, [r7, #112]	; 0x70
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	00da      	lsls	r2, r3, #3
 800420c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800420e:	4413      	add	r3, r2
 8004210:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004214:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004218:	2200      	movs	r2, #0
 800421a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	785b      	ldrb	r3, [r3, #1]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d12f      	bne.n	800428a <HAL_PCD_EP_DB_Transmit+0x4f2>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423a:	b29b      	uxth	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004242:	4413      	add	r3, r2
 8004244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	00da      	lsls	r2, r3, #3
 800424e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004252:	4413      	add	r3, r2
 8004254:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800425c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004268:	b29a      	uxth	r2, r3
 800426a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800426e:	801a      	strh	r2, [r3, #0]
 8004270:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004280:	b29a      	uxth	r2, r3
 8004282:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	e017      	b.n	80042ba <HAL_PCD_EP_DB_Transmit+0x522>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d113      	bne.n	80042ba <HAL_PCD_EP_DB_Transmit+0x522>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429a:	b29b      	uxth	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042a0:	4413      	add	r3, r2
 80042a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	00da      	lsls	r2, r3, #3
 80042aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042ac:	4413      	add	r3, r2
 80042ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80042b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042b6:	2200      	movs	r2, #0
 80042b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	4619      	mov	r1, r3
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f006 f934 	bl	800a52e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f040 8104 	bne.w	80044da <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	441a      	add	r2, r3
 80042fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800430a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800430e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004312:	b29b      	uxth	r3, r3
 8004314:	8013      	strh	r3, [r2, #0]
 8004316:	e0e0      	b.n	80044da <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d121      	bne.n	8004366 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800435a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800435e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004362:	b29b      	uxth	r3, r3
 8004364:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800436c:	2b01      	cmp	r3, #1
 800436e:	f040 80b4 	bne.w	80044da <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800437a:	441a      	add	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004388:	441a      	add	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	6a1a      	ldr	r2, [r3, #32]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	429a      	cmp	r2, r3
 8004398:	d309      	bcc.n	80043ae <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	6a1a      	ldr	r2, [r3, #32]
 80043a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a6:	1ad2      	subs	r2, r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	621a      	str	r2, [r3, #32]
 80043ac:	e015      	b.n	80043da <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d107      	bne.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80043b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043c4:	e009      	b.n	80043da <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2200      	movs	r2, #0
 80043d0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	663b      	str	r3, [r7, #96]	; 0x60
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d155      	bne.n	8004494 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	461a      	mov	r2, r3
 80043fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043fc:	4413      	add	r3, r2
 80043fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	00da      	lsls	r2, r3, #3
 8004406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004408:	4413      	add	r3, r2
 800440a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800440e:	657b      	str	r3, [r7, #84]	; 0x54
 8004410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004412:	2b3e      	cmp	r3, #62	; 0x3e
 8004414:	d916      	bls.n	8004444 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	677b      	str	r3, [r7, #116]	; 0x74
 800441c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <HAL_PCD_EP_DB_Transmit+0x694>
 8004426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004428:	3b01      	subs	r3, #1
 800442a:	677b      	str	r3, [r7, #116]	; 0x74
 800442c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800442e:	b29b      	uxth	r3, r3
 8004430:	029b      	lsls	r3, r3, #10
 8004432:	b29b      	uxth	r3, r3
 8004434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443c:	b29a      	uxth	r2, r3
 800443e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004440:	801a      	strh	r2, [r3, #0]
 8004442:	e040      	b.n	80044c6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004446:	2b00      	cmp	r3, #0
 8004448:	d112      	bne.n	8004470 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800444a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004454:	b29a      	uxth	r2, r3
 8004456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004458:	801a      	strh	r2, [r3, #0]
 800445a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004468:	b29a      	uxth	r2, r3
 800446a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446c:	801a      	strh	r2, [r3, #0]
 800446e:	e02a      	b.n	80044c6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	677b      	str	r3, [r7, #116]	; 0x74
 8004476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8004480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004482:	3301      	adds	r3, #1
 8004484:	677b      	str	r3, [r7, #116]	; 0x74
 8004486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004488:	b29b      	uxth	r3, r3
 800448a:	029b      	lsls	r3, r3, #10
 800448c:	b29a      	uxth	r2, r3
 800448e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	e018      	b.n	80044c6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d114      	bne.n	80044c6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044aa:	4413      	add	r3, r2
 80044ac:	663b      	str	r3, [r7, #96]	; 0x60
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	00da      	lsls	r2, r3, #3
 80044b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044b6:	4413      	add	r3, r2
 80044b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6959      	ldr	r1, [r3, #20]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	895a      	ldrh	r2, [r3, #10]
 80044d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f004 f93e 	bl	8008756 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f4:	823b      	strh	r3, [r7, #16]
 80044f6:	8a3b      	ldrh	r3, [r7, #16]
 80044f8:	f083 0310 	eor.w	r3, r3, #16
 80044fc:	823b      	strh	r3, [r7, #16]
 80044fe:	8a3b      	ldrh	r3, [r7, #16]
 8004500:	f083 0320 	eor.w	r3, r3, #32
 8004504:	823b      	strh	r3, [r7, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	441a      	add	r2, r3
 8004514:	8a3b      	ldrh	r3, [r7, #16]
 8004516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004526:	b29b      	uxth	r3, r3
 8004528:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3788      	adds	r7, #136	; 0x88
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	607b      	str	r3, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	817b      	strh	r3, [r7, #10]
 8004542:	4613      	mov	r3, r2
 8004544:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004546:	897b      	ldrh	r3, [r7, #10]
 8004548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00b      	beq.n	800456a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004552:	897b      	ldrh	r3, [r7, #10]
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e009      	b.n	800457e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800456a:	897a      	ldrh	r2, [r7, #10]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800457e:	893b      	ldrh	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d107      	bne.n	8004594 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	b29a      	uxth	r2, r3
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	80da      	strh	r2, [r3, #6]
 8004592:	e00b      	b.n	80045ac <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2201      	movs	r2, #1
 8004598:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	b29a      	uxth	r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f043 0302 	orr.w	r3, r3, #2
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d141      	bne.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800461e:	4b4b      	ldr	r3, [pc, #300]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462a:	d131      	bne.n	8004690 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800462c:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004632:	4a46      	ldr	r2, [pc, #280]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004638:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800463c:	4b43      	ldr	r3, [pc, #268]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004644:	4a41      	ldr	r2, [pc, #260]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800464a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800464c:	4b40      	ldr	r3, [pc, #256]	; (8004750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2232      	movs	r2, #50	; 0x32
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	4a3f      	ldr	r2, [pc, #252]	; (8004754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	0c9b      	lsrs	r3, r3, #18
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004662:	e002      	b.n	800466a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3b01      	subs	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800466a:	4b38      	ldr	r3, [pc, #224]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004676:	d102      	bne.n	800467e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f2      	bne.n	8004664 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800467e:	4b33      	ldr	r3, [pc, #204]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468a:	d158      	bne.n	800473e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e057      	b.n	8004740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004690:	4b2e      	ldr	r3, [pc, #184]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004696:	4a2d      	ldr	r2, [pc, #180]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800469c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046a0:	e04d      	b.n	800473e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a8:	d141      	bne.n	800472e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046aa:	4b28      	ldr	r3, [pc, #160]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b6:	d131      	bne.n	800471c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046be:	4a23      	ldr	r2, [pc, #140]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c8:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046d0:	4a1e      	ldr	r2, [pc, #120]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046d8:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2232      	movs	r2, #50	; 0x32
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	0c9b      	lsrs	r3, r3, #18
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ee:	e002      	b.n	80046f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004702:	d102      	bne.n	800470a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f2      	bne.n	80046f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800470a:	4b10      	ldr	r3, [pc, #64]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004716:	d112      	bne.n	800473e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e011      	b.n	8004740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800472c:	e007      	b.n	800473e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800472e:	4b07      	ldr	r3, [pc, #28]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004736:	4a05      	ldr	r2, [pc, #20]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800473c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40007000 	.word	0x40007000
 8004750:	20000000 	.word	0x20000000
 8004754:	431bde83 	.word	0x431bde83

08004758 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4a04      	ldr	r2, [pc, #16]	; (8004774 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004766:	6093      	str	r3, [r2, #8]
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40007000 	.word	0x40007000

08004778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e306      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d075      	beq.n	8004882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004796:	4b97      	ldr	r3, [pc, #604]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a0:	4b94      	ldr	r3, [pc, #592]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b0c      	cmp	r3, #12
 80047ae:	d102      	bne.n	80047b6 <HAL_RCC_OscConfig+0x3e>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d002      	beq.n	80047bc <HAL_RCC_OscConfig+0x44>
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d10b      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	4b8d      	ldr	r3, [pc, #564]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d05b      	beq.n	8004880 <HAL_RCC_OscConfig+0x108>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d157      	bne.n	8004880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e2e1      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047dc:	d106      	bne.n	80047ec <HAL_RCC_OscConfig+0x74>
 80047de:	4b85      	ldr	r3, [pc, #532]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a84      	ldr	r2, [pc, #528]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e01d      	b.n	8004828 <HAL_RCC_OscConfig+0xb0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x98>
 80047f6:	4b7f      	ldr	r3, [pc, #508]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7e      	ldr	r2, [pc, #504]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80047fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	4b7c      	ldr	r3, [pc, #496]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a7b      	ldr	r2, [pc, #492]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0xb0>
 8004810:	4b78      	ldr	r3, [pc, #480]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a77      	ldr	r2, [pc, #476]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b75      	ldr	r3, [pc, #468]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a74      	ldr	r2, [pc, #464]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fc fba2 	bl	8000f78 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004838:	f7fc fb9e 	bl	8000f78 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e2a6      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800484a:	4b6a      	ldr	r3, [pc, #424]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0xc0>
 8004856:	e014      	b.n	8004882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fc fb8e 	bl	8000f78 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004860:	f7fc fb8a 	bl	8000f78 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	; 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e292      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004872:	4b60      	ldr	r3, [pc, #384]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0xe8>
 800487e:	e000      	b.n	8004882 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d075      	beq.n	800497a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800488e:	4b59      	ldr	r3, [pc, #356]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004898:	4b56      	ldr	r3, [pc, #344]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d102      	bne.n	80048ae <HAL_RCC_OscConfig+0x136>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d002      	beq.n	80048b4 <HAL_RCC_OscConfig+0x13c>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d11f      	bne.n	80048f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048b4:	4b4f      	ldr	r3, [pc, #316]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_OscConfig+0x154>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e265      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048cc:	4b49      	ldr	r3, [pc, #292]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	061b      	lsls	r3, r3, #24
 80048da:	4946      	ldr	r1, [pc, #280]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048e0:	4b45      	ldr	r3, [pc, #276]	; (80049f8 <HAL_RCC_OscConfig+0x280>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fc fafb 	bl	8000ee0 <HAL_InitTick>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d043      	beq.n	8004978 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e251      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d023      	beq.n	8004944 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048fc:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3c      	ldr	r2, [pc, #240]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fc fb36 	bl	8000f78 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004910:	f7fc fb32 	bl	8000f78 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e23a      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004922:	4b34      	ldr	r3, [pc, #208]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492e:	4b31      	ldr	r3, [pc, #196]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	061b      	lsls	r3, r3, #24
 800493c:	492d      	ldr	r1, [pc, #180]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 800493e:	4313      	orrs	r3, r2
 8004940:	604b      	str	r3, [r1, #4]
 8004942:	e01a      	b.n	800497a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004944:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 800494a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800494e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fc fb12 	bl	8000f78 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004958:	f7fc fb0e 	bl	8000f78 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e216      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800496a:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x1e0>
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d041      	beq.n	8004a0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800498e:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499e:	f7fc faeb 	bl	8000f78 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a6:	f7fc fae7 	bl	8000f78 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e1ef      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049b8:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80049ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ef      	beq.n	80049a6 <HAL_RCC_OscConfig+0x22e>
 80049c6:	e020      	b.n	8004a0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80049ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ce:	4a09      	ldr	r2, [pc, #36]	; (80049f4 <HAL_RCC_OscConfig+0x27c>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d8:	f7fc face 	bl	8000f78 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049de:	e00d      	b.n	80049fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e0:	f7fc faca 	bl	8000f78 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d906      	bls.n	80049fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e1d2      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
 80049f2:	bf00      	nop
 80049f4:	40021000 	.word	0x40021000
 80049f8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049fc:	4b8c      	ldr	r3, [pc, #560]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1ea      	bne.n	80049e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80a6 	beq.w	8004b64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a1c:	4b84      	ldr	r3, [pc, #528]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_OscConfig+0x2b4>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <HAL_RCC_OscConfig+0x2b6>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00d      	beq.n	8004a4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a32:	4b7f      	ldr	r3, [pc, #508]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	4a7e      	ldr	r2, [pc, #504]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a3e:	4b7c      	ldr	r3, [pc, #496]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a4e:	4b79      	ldr	r3, [pc, #484]	; (8004c34 <HAL_RCC_OscConfig+0x4bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d118      	bne.n	8004a8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a5a:	4b76      	ldr	r3, [pc, #472]	; (8004c34 <HAL_RCC_OscConfig+0x4bc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a75      	ldr	r2, [pc, #468]	; (8004c34 <HAL_RCC_OscConfig+0x4bc>)
 8004a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a66:	f7fc fa87 	bl	8000f78 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6e:	f7fc fa83 	bl	8000f78 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e18b      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a80:	4b6c      	ldr	r3, [pc, #432]	; (8004c34 <HAL_RCC_OscConfig+0x4bc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d108      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x32e>
 8004a94:	4b66      	ldr	r3, [pc, #408]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9a:	4a65      	ldr	r2, [pc, #404]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aa4:	e024      	b.n	8004af0 <HAL_RCC_OscConfig+0x378>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	d110      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x358>
 8004aae:	4b60      	ldr	r3, [pc, #384]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	4a5e      	ldr	r2, [pc, #376]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004ab6:	f043 0304 	orr.w	r3, r3, #4
 8004aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004abe:	4b5c      	ldr	r3, [pc, #368]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac4:	4a5a      	ldr	r2, [pc, #360]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ace:	e00f      	b.n	8004af0 <HAL_RCC_OscConfig+0x378>
 8004ad0:	4b57      	ldr	r3, [pc, #348]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	4a56      	ldr	r2, [pc, #344]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004ad8:	f023 0301 	bic.w	r3, r3, #1
 8004adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae0:	4b53      	ldr	r3, [pc, #332]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae6:	4a52      	ldr	r2, [pc, #328]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004ae8:	f023 0304 	bic.w	r3, r3, #4
 8004aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d016      	beq.n	8004b26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af8:	f7fc fa3e 	bl	8000f78 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b00:	f7fc fa3a 	bl	8000f78 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e140      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b16:	4b46      	ldr	r3, [pc, #280]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0ed      	beq.n	8004b00 <HAL_RCC_OscConfig+0x388>
 8004b24:	e015      	b.n	8004b52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b26:	f7fc fa27 	bl	8000f78 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fc fa23 	bl	8000f78 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e129      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b44:	4b3a      	ldr	r3, [pc, #232]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1ed      	bne.n	8004b2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b52:	7ffb      	ldrb	r3, [r7, #31]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d105      	bne.n	8004b64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b58:	4b35      	ldr	r3, [pc, #212]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	4a34      	ldr	r2, [pc, #208]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d03c      	beq.n	8004bea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01c      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b78:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b7e:	4a2c      	ldr	r2, [pc, #176]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fc f9f6 	bl	8000f78 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b90:	f7fc f9f2 	bl	8000f78 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e0fa      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ba2:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ef      	beq.n	8004b90 <HAL_RCC_OscConfig+0x418>
 8004bb0:	e01b      	b.n	8004bea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bb8:	4a1d      	ldr	r2, [pc, #116]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fc f9d9 	bl	8000f78 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bca:	f7fc f9d5 	bl	8000f78 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e0dd      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bdc:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1ef      	bne.n	8004bca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80d1 	beq.w	8004d96 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b0c      	cmp	r3, #12
 8004bfe:	f000 808b 	beq.w	8004d18 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d15e      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a08      	ldr	r2, [pc, #32]	; (8004c30 <HAL_RCC_OscConfig+0x4b8>)
 8004c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c16:	f7fc f9af 	bl	8000f78 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c1c:	e00c      	b.n	8004c38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1e:	f7fc f9ab 	bl	8000f78 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d905      	bls.n	8004c38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e0b3      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c38:	4b59      	ldr	r3, [pc, #356]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1ec      	bne.n	8004c1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c44:	4b56      	ldr	r3, [pc, #344]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	4b56      	ldr	r3, [pc, #344]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6a11      	ldr	r1, [r2, #32]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c54:	3a01      	subs	r2, #1
 8004c56:	0112      	lsls	r2, r2, #4
 8004c58:	4311      	orrs	r1, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c5e:	0212      	lsls	r2, r2, #8
 8004c60:	4311      	orrs	r1, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c66:	0852      	lsrs	r2, r2, #1
 8004c68:	3a01      	subs	r2, #1
 8004c6a:	0552      	lsls	r2, r2, #21
 8004c6c:	4311      	orrs	r1, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c72:	0852      	lsrs	r2, r2, #1
 8004c74:	3a01      	subs	r2, #1
 8004c76:	0652      	lsls	r2, r2, #25
 8004c78:	4311      	orrs	r1, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c7e:	06d2      	lsls	r2, r2, #27
 8004c80:	430a      	orrs	r2, r1
 8004c82:	4947      	ldr	r1, [pc, #284]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c88:	4b45      	ldr	r3, [pc, #276]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a44      	ldr	r2, [pc, #272]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c94:	4b42      	ldr	r3, [pc, #264]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4a41      	ldr	r2, [pc, #260]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fc f96a 	bl	8000f78 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca8:	f7fc f966 	bl	8000f78 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e06e      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cba:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x530>
 8004cc6:	e066      	b.n	8004d96 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc8:	4b35      	ldr	r3, [pc, #212]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a34      	ldr	r2, [pc, #208]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004cd4:	4b32      	ldr	r3, [pc, #200]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4a31      	ldr	r2, [pc, #196]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ce0:	4b2f      	ldr	r3, [pc, #188]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4a2e      	ldr	r2, [pc, #184]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004ce6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fc f942 	bl	8000f78 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf8:	f7fc f93e 	bl	8000f78 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e046      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d0a:	4b25      	ldr	r3, [pc, #148]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x580>
 8004d16:	e03e      	b.n	8004d96 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e039      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <HAL_RCC_OscConfig+0x628>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f003 0203 	and.w	r2, r3, #3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d12c      	bne.n	8004d92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	3b01      	subs	r3, #1
 8004d44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d123      	bne.n	8004d92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d11b      	bne.n	8004d92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d113      	bne.n	8004d92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	085b      	lsrs	r3, r3, #1
 8004d76:	3b01      	subs	r3, #1
 8004d78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d001      	beq.n	8004d96 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	019f800c 	.word	0x019f800c

08004da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e11e      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b91      	ldr	r3, [pc, #580]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d910      	bls.n	8004df0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b8e      	ldr	r3, [pc, #568]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 020f 	bic.w	r2, r3, #15
 8004dd6:	498c      	ldr	r1, [pc, #560]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dde:	4b8a      	ldr	r3, [pc, #552]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d001      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e106      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d073      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d129      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e04:	4b81      	ldr	r3, [pc, #516]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0f4      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e14:	f000 f966 	bl	80050e4 <RCC_GetSysClockFreqFromPLLSource>
 8004e18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4a7c      	ldr	r2, [pc, #496]	; (8005010 <HAL_RCC_ClockConfig+0x268>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d93f      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e22:	4b7a      	ldr	r3, [pc, #488]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d033      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d12f      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e42:	4b72      	ldr	r3, [pc, #456]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e4a:	4a70      	ldr	r2, [pc, #448]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e024      	b.n	8004ea2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d107      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e60:	4b6a      	ldr	r3, [pc, #424]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d109      	bne.n	8004e80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0c6      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e70:	4b66      	ldr	r3, [pc, #408]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0be      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e80:	f000 f8ce 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4a61      	ldr	r2, [pc, #388]	; (8005010 <HAL_RCC_ClockConfig+0x268>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d909      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e8e:	4b5f      	ldr	r3, [pc, #380]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e96:	4a5d      	ldr	r2, [pc, #372]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ea2:	4b5a      	ldr	r3, [pc, #360]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 0203 	bic.w	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4957      	ldr	r1, [pc, #348]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb4:	f7fc f860 	bl	8000f78 <HAL_GetTick>
 8004eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ebc:	f7fc f85c 	bl	8000f78 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e095      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	4b4e      	ldr	r3, [pc, #312]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 020c 	and.w	r2, r3, #12
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d1eb      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d023      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004efc:	4b43      	ldr	r3, [pc, #268]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4a42      	ldr	r2, [pc, #264]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f14:	4b3d      	ldr	r3, [pc, #244]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f1c:	4a3b      	ldr	r2, [pc, #236]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f24:	4b39      	ldr	r3, [pc, #228]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4936      	ldr	r1, [pc, #216]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	608b      	str	r3, [r1, #8]
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b80      	cmp	r3, #128	; 0x80
 8004f3c:	d105      	bne.n	8004f4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f3e:	4b33      	ldr	r3, [pc, #204]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	4a32      	ldr	r2, [pc, #200]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f4a:	4b2f      	ldr	r3, [pc, #188]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d21d      	bcs.n	8004f94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f58:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f023 020f 	bic.w	r2, r3, #15
 8004f60:	4929      	ldr	r1, [pc, #164]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f68:	f7fc f806 	bl	8000f78 <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6e:	e00a      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f70:	f7fc f802 	bl	8000f78 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e03b      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d1ed      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fa0:	4b1a      	ldr	r3, [pc, #104]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4917      	ldr	r1, [pc, #92]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	490f      	ldr	r1, [pc, #60]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fd2:	f000 f825 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	490c      	ldr	r1, [pc, #48]	; (8005014 <HAL_RCC_ClockConfig+0x26c>)
 8004fe4:	5ccb      	ldrb	r3, [r1, r3]
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	fa22 f303 	lsr.w	r3, r2, r3
 8004fee:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <HAL_RCC_ClockConfig+0x270>)
 8004ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ff2:	4b0a      	ldr	r3, [pc, #40]	; (800501c <HAL_RCC_ClockConfig+0x274>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fb ff72 	bl	8000ee0 <HAL_InitTick>
 8004ffc:	4603      	mov	r3, r0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40022000 	.word	0x40022000
 800500c:	40021000 	.word	0x40021000
 8005010:	04c4b400 	.word	0x04c4b400
 8005014:	0800ab20 	.word	0x0800ab20
 8005018:	20000000 	.word	0x20000000
 800501c:	20000004 	.word	0x20000004

08005020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005026:	4b2c      	ldr	r3, [pc, #176]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b04      	cmp	r3, #4
 8005030:	d102      	bne.n	8005038 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005032:	4b2a      	ldr	r3, [pc, #168]	; (80050dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e047      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005038:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 030c 	and.w	r3, r3, #12
 8005040:	2b08      	cmp	r3, #8
 8005042:	d102      	bne.n	800504a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005044:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	e03e      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800504a:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b0c      	cmp	r3, #12
 8005054:	d136      	bne.n	80050c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005056:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	3301      	adds	r3, #1
 800506c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d10c      	bne.n	800508e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005074:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800507e:	68d2      	ldr	r2, [r2, #12]
 8005080:	0a12      	lsrs	r2, r2, #8
 8005082:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	617b      	str	r3, [r7, #20]
      break;
 800508c:	e00c      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800508e:	4a13      	ldr	r2, [pc, #76]	; (80050dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	4a10      	ldr	r2, [pc, #64]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005098:	68d2      	ldr	r2, [r2, #12]
 800509a:	0a12      	lsrs	r2, r2, #8
 800509c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050a0:	fb02 f303 	mul.w	r3, r2, r3
 80050a4:	617b      	str	r3, [r7, #20]
      break;
 80050a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	0e5b      	lsrs	r3, r3, #25
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	3301      	adds	r3, #1
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	e001      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050c8:	693b      	ldr	r3, [r7, #16]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000
 80050dc:	00f42400 	.word	0x00f42400
 80050e0:	00b71b00 	.word	0x00b71b00

080050e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050ea:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050f4:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	3301      	adds	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d10c      	bne.n	8005122 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005108:	4a17      	ldr	r2, [pc, #92]	; (8005168 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005110:	4a14      	ldr	r2, [pc, #80]	; (8005164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005112:	68d2      	ldr	r2, [r2, #12]
 8005114:	0a12      	lsrs	r2, r2, #8
 8005116:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	617b      	str	r3, [r7, #20]
    break;
 8005120:	e00c      	b.n	800513c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005122:	4a12      	ldr	r2, [pc, #72]	; (800516c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	fbb2 f3f3 	udiv	r3, r2, r3
 800512a:	4a0e      	ldr	r2, [pc, #56]	; (8005164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800512c:	68d2      	ldr	r2, [r2, #12]
 800512e:	0a12      	lsrs	r2, r2, #8
 8005130:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005134:	fb02 f303 	mul.w	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]
    break;
 800513a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800513c:	4b09      	ldr	r3, [pc, #36]	; (8005164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	0e5b      	lsrs	r3, r3, #25
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	3301      	adds	r3, #1
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005156:	687b      	ldr	r3, [r7, #4]
}
 8005158:	4618      	mov	r0, r3
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	40021000 	.word	0x40021000
 8005168:	00b71b00 	.word	0x00b71b00
 800516c:	00f42400 	.word	0x00f42400

08005170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005178:	2300      	movs	r3, #0
 800517a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800517c:	2300      	movs	r3, #0
 800517e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8098 	beq.w	80052be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800518e:	2300      	movs	r3, #0
 8005190:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005192:	4b43      	ldr	r3, [pc, #268]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10d      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	4a3f      	ldr	r2, [pc, #252]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a8:	6593      	str	r3, [r2, #88]	; 0x58
 80051aa:	4b3d      	ldr	r3, [pc, #244]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b2:	60bb      	str	r3, [r7, #8]
 80051b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051b6:	2301      	movs	r3, #1
 80051b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ba:	4b3a      	ldr	r3, [pc, #232]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a39      	ldr	r2, [pc, #228]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051c6:	f7fb fed7 	bl	8000f78 <HAL_GetTick>
 80051ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051cc:	e009      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ce:	f7fb fed3 	bl	8000f78 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d902      	bls.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	74fb      	strb	r3, [r7, #19]
        break;
 80051e0:	e005      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051e2:	4b30      	ldr	r3, [pc, #192]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0ef      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80051ee:	7cfb      	ldrb	r3, [r7, #19]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d159      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051f4:	4b2a      	ldr	r3, [pc, #168]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01e      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	429a      	cmp	r2, r3
 800520e:	d019      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005210:	4b23      	ldr	r3, [pc, #140]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800521c:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800521e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005222:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800522c:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005232:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800523c:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524e:	f7fb fe93 	bl	8000f78 <HAL_GetTick>
 8005252:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005254:	e00b      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005256:	f7fb fe8f 	bl	8000f78 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	f241 3288 	movw	r2, #5000	; 0x1388
 8005264:	4293      	cmp	r3, r2
 8005266:	d902      	bls.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	74fb      	strb	r3, [r7, #19]
            break;
 800526c:	e006      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0ec      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800527c:	7cfb      	ldrb	r3, [r7, #19]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10b      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005282:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	4903      	ldr	r1, [pc, #12]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005298:	e008      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800529a:	7cfb      	ldrb	r3, [r7, #19]
 800529c:	74bb      	strb	r3, [r7, #18]
 800529e:	e005      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	7cfb      	ldrb	r3, [r7, #19]
 80052aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052ac:	7c7b      	ldrb	r3, [r7, #17]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d105      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b2:	4ba6      	ldr	r3, [pc, #664]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	4aa5      	ldr	r2, [pc, #660]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052ca:	4ba0      	ldr	r3, [pc, #640]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d0:	f023 0203 	bic.w	r2, r3, #3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	499c      	ldr	r1, [pc, #624]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052ec:	4b97      	ldr	r3, [pc, #604]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f2:	f023 020c 	bic.w	r2, r3, #12
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4994      	ldr	r1, [pc, #592]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800530e:	4b8f      	ldr	r3, [pc, #572]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005314:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	498b      	ldr	r1, [pc, #556]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005330:	4b86      	ldr	r3, [pc, #536]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	4983      	ldr	r1, [pc, #524]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005352:	4b7e      	ldr	r3, [pc, #504]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005358:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	497a      	ldr	r1, [pc, #488]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005374:	4b75      	ldr	r3, [pc, #468]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	4972      	ldr	r1, [pc, #456]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005396:	4b6d      	ldr	r3, [pc, #436]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	4969      	ldr	r1, [pc, #420]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053b8:	4b64      	ldr	r3, [pc, #400]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	4961      	ldr	r1, [pc, #388]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053da:	4b5c      	ldr	r3, [pc, #368]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	4958      	ldr	r1, [pc, #352]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d015      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053fc:	4b53      	ldr	r3, [pc, #332]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540a:	4950      	ldr	r1, [pc, #320]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800541a:	d105      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800541c:	4b4b      	ldr	r3, [pc, #300]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a4a      	ldr	r2, [pc, #296]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005426:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005430:	2b00      	cmp	r3, #0
 8005432:	d015      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005434:	4b45      	ldr	r3, [pc, #276]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	4942      	ldr	r1, [pc, #264]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005452:	d105      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005454:	4b3d      	ldr	r3, [pc, #244]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4a3c      	ldr	r2, [pc, #240]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800545e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d015      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800546c:	4b37      	ldr	r3, [pc, #220]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	4934      	ldr	r1, [pc, #208]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800548a:	d105      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800548c:	4b2f      	ldr	r3, [pc, #188]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4a2e      	ldr	r2, [pc, #184]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005496:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d015      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054a4:	4b29      	ldr	r3, [pc, #164]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	4926      	ldr	r1, [pc, #152]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054c2:	d105      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c4:	4b21      	ldr	r3, [pc, #132]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4a20      	ldr	r2, [pc, #128]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d015      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054dc:	4b1b      	ldr	r3, [pc, #108]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ea:	4918      	ldr	r1, [pc, #96]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054fa:	d105      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054fc:	4b13      	ldr	r3, [pc, #76]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	4a12      	ldr	r2, [pc, #72]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005506:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d015      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	490a      	ldr	r1, [pc, #40]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005532:	d105      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4a04      	ldr	r2, [pc, #16]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005540:	7cbb      	ldrb	r3, [r7, #18]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000

08005550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e09d      	b.n	800569e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2b00      	cmp	r3, #0
 8005568:	d108      	bne.n	800557c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005572:	d009      	beq.n	8005588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	61da      	str	r2, [r3, #28]
 800557a:	e005      	b.n	8005588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fb fa6c 	bl	8000a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055c8:	d902      	bls.n	80055d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	e002      	b.n	80055d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055de:	d007      	beq.n	80055f0 <HAL_SPI_Init+0xa0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055e8:	d002      	beq.n	80055f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005632:	ea42 0103 	orr.w	r1, r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	f003 0204 	and.w	r2, r3, #4
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800566c:	ea42 0103 	orr.w	r1, r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800568c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e049      	b.n	800574c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d106      	bne.n	80056d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7fb fb31 	bl	8000d34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f000 f949 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800576e:	2302      	movs	r3, #2
 8005770:	e0ff      	b.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b14      	cmp	r3, #20
 800577e:	f200 80f0 	bhi.w	8005962 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005782:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	080057dd 	.word	0x080057dd
 800578c:	08005963 	.word	0x08005963
 8005790:	08005963 	.word	0x08005963
 8005794:	08005963 	.word	0x08005963
 8005798:	0800581d 	.word	0x0800581d
 800579c:	08005963 	.word	0x08005963
 80057a0:	08005963 	.word	0x08005963
 80057a4:	08005963 	.word	0x08005963
 80057a8:	0800585f 	.word	0x0800585f
 80057ac:	08005963 	.word	0x08005963
 80057b0:	08005963 	.word	0x08005963
 80057b4:	08005963 	.word	0x08005963
 80057b8:	0800589f 	.word	0x0800589f
 80057bc:	08005963 	.word	0x08005963
 80057c0:	08005963 	.word	0x08005963
 80057c4:	08005963 	.word	0x08005963
 80057c8:	080058e1 	.word	0x080058e1
 80057cc:	08005963 	.word	0x08005963
 80057d0:	08005963 	.word	0x08005963
 80057d4:	08005963 	.word	0x08005963
 80057d8:	08005921 	.word	0x08005921
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f95a 	bl	8005a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0208 	orr.w	r2, r2, #8
 80057f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0204 	bic.w	r2, r2, #4
 8005806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6999      	ldr	r1, [r3, #24]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	619a      	str	r2, [r3, #24]
      break;
 800581a:	e0a5      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f9ca 	bl	8005bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6999      	ldr	r1, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	021a      	lsls	r2, r3, #8
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	619a      	str	r2, [r3, #24]
      break;
 800585c:	e084      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fa33 	bl	8005cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0208 	orr.w	r2, r2, #8
 8005878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0204 	bic.w	r2, r2, #4
 8005888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69d9      	ldr	r1, [r3, #28]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	61da      	str	r2, [r3, #28]
      break;
 800589c:	e064      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fa9b 	bl	8005de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69d9      	ldr	r1, [r3, #28]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	021a      	lsls	r2, r3, #8
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	61da      	str	r2, [r3, #28]
      break;
 80058de:	e043      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fb04 	bl	8005ef4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0208 	orr.w	r2, r2, #8
 80058fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0204 	bic.w	r2, r2, #4
 800590a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800591e:	e023      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fb48 	bl	8005fbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800593a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005960:	e002      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	75fb      	strb	r3, [r7, #23]
      break;
 8005966:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005970:	7dfb      	ldrb	r3, [r7, #23]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop

0800597c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a3c      	ldr	r2, [pc, #240]	; (8005a80 <TIM_Base_SetConfig+0x104>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00f      	beq.n	80059b4 <TIM_Base_SetConfig+0x38>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599a:	d00b      	beq.n	80059b4 <TIM_Base_SetConfig+0x38>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a39      	ldr	r2, [pc, #228]	; (8005a84 <TIM_Base_SetConfig+0x108>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d007      	beq.n	80059b4 <TIM_Base_SetConfig+0x38>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a38      	ldr	r2, [pc, #224]	; (8005a88 <TIM_Base_SetConfig+0x10c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d003      	beq.n	80059b4 <TIM_Base_SetConfig+0x38>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a37      	ldr	r2, [pc, #220]	; (8005a8c <TIM_Base_SetConfig+0x110>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d108      	bne.n	80059c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2d      	ldr	r2, [pc, #180]	; (8005a80 <TIM_Base_SetConfig+0x104>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01b      	beq.n	8005a06 <TIM_Base_SetConfig+0x8a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d4:	d017      	beq.n	8005a06 <TIM_Base_SetConfig+0x8a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2a      	ldr	r2, [pc, #168]	; (8005a84 <TIM_Base_SetConfig+0x108>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <TIM_Base_SetConfig+0x8a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <TIM_Base_SetConfig+0x10c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00f      	beq.n	8005a06 <TIM_Base_SetConfig+0x8a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a28      	ldr	r2, [pc, #160]	; (8005a8c <TIM_Base_SetConfig+0x110>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00b      	beq.n	8005a06 <TIM_Base_SetConfig+0x8a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a27      	ldr	r2, [pc, #156]	; (8005a90 <TIM_Base_SetConfig+0x114>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d007      	beq.n	8005a06 <TIM_Base_SetConfig+0x8a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <TIM_Base_SetConfig+0x118>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d003      	beq.n	8005a06 <TIM_Base_SetConfig+0x8a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a25      	ldr	r2, [pc, #148]	; (8005a98 <TIM_Base_SetConfig+0x11c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d108      	bne.n	8005a18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a10      	ldr	r2, [pc, #64]	; (8005a80 <TIM_Base_SetConfig+0x104>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00f      	beq.n	8005a64 <TIM_Base_SetConfig+0xe8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a11      	ldr	r2, [pc, #68]	; (8005a8c <TIM_Base_SetConfig+0x110>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <TIM_Base_SetConfig+0xe8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a10      	ldr	r2, [pc, #64]	; (8005a90 <TIM_Base_SetConfig+0x114>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <TIM_Base_SetConfig+0xe8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a0f      	ldr	r2, [pc, #60]	; (8005a94 <TIM_Base_SetConfig+0x118>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_Base_SetConfig+0xe8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a0e      	ldr	r2, [pc, #56]	; (8005a98 <TIM_Base_SetConfig+0x11c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d103      	bne.n	8005a6c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	615a      	str	r2, [r3, #20]
}
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40000800 	.word	0x40000800
 8005a8c:	40013400 	.word	0x40013400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800

08005a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0201 	bic.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0303 	bic.w	r3, r3, #3
 8005ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f023 0302 	bic.w	r3, r3, #2
 8005ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a2c      	ldr	r2, [pc, #176]	; (8005ba8 <TIM_OC1_SetConfig+0x10c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00f      	beq.n	8005b1c <TIM_OC1_SetConfig+0x80>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <TIM_OC1_SetConfig+0x110>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00b      	beq.n	8005b1c <TIM_OC1_SetConfig+0x80>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a2a      	ldr	r2, [pc, #168]	; (8005bb0 <TIM_OC1_SetConfig+0x114>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d007      	beq.n	8005b1c <TIM_OC1_SetConfig+0x80>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a29      	ldr	r2, [pc, #164]	; (8005bb4 <TIM_OC1_SetConfig+0x118>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_OC1_SetConfig+0x80>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a28      	ldr	r2, [pc, #160]	; (8005bb8 <TIM_OC1_SetConfig+0x11c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d10c      	bne.n	8005b36 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0308 	bic.w	r3, r3, #8
 8005b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 0304 	bic.w	r3, r3, #4
 8005b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <TIM_OC1_SetConfig+0x10c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00f      	beq.n	8005b5e <TIM_OC1_SetConfig+0xc2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <TIM_OC1_SetConfig+0x110>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00b      	beq.n	8005b5e <TIM_OC1_SetConfig+0xc2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <TIM_OC1_SetConfig+0x114>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d007      	beq.n	8005b5e <TIM_OC1_SetConfig+0xc2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <TIM_OC1_SetConfig+0x118>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d003      	beq.n	8005b5e <TIM_OC1_SetConfig+0xc2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <TIM_OC1_SetConfig+0x11c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d111      	bne.n	8005b82 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	621a      	str	r2, [r3, #32]
}
 8005b9c:	bf00      	nop
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40013400 	.word	0x40013400
 8005bb0:	40014000 	.word	0x40014000
 8005bb4:	40014400 	.word	0x40014400
 8005bb8:	40014800 	.word	0x40014800

08005bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f023 0210 	bic.w	r2, r3, #16
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f023 0320 	bic.w	r3, r3, #32
 8005c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a28      	ldr	r2, [pc, #160]	; (8005cbc <TIM_OC2_SetConfig+0x100>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC2_SetConfig+0x6c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <TIM_OC2_SetConfig+0x104>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d10d      	bne.n	8005c44 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <TIM_OC2_SetConfig+0x100>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00f      	beq.n	8005c6c <TIM_OC2_SetConfig+0xb0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <TIM_OC2_SetConfig+0x104>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00b      	beq.n	8005c6c <TIM_OC2_SetConfig+0xb0>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <TIM_OC2_SetConfig+0x108>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d007      	beq.n	8005c6c <TIM_OC2_SetConfig+0xb0>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <TIM_OC2_SetConfig+0x10c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_OC2_SetConfig+0xb0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <TIM_OC2_SetConfig+0x110>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d113      	bne.n	8005c94 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40013400 	.word	0x40013400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	40014800 	.word	0x40014800

08005cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0303 	bic.w	r3, r3, #3
 8005d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <TIM_OC3_SetConfig+0xfc>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_OC3_SetConfig+0x6a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a26      	ldr	r2, [pc, #152]	; (8005dd0 <TIM_OC3_SetConfig+0x100>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d10d      	bne.n	8005d56 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <TIM_OC3_SetConfig+0xfc>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00f      	beq.n	8005d7e <TIM_OC3_SetConfig+0xae>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <TIM_OC3_SetConfig+0x100>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00b      	beq.n	8005d7e <TIM_OC3_SetConfig+0xae>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1a      	ldr	r2, [pc, #104]	; (8005dd4 <TIM_OC3_SetConfig+0x104>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d007      	beq.n	8005d7e <TIM_OC3_SetConfig+0xae>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a19      	ldr	r2, [pc, #100]	; (8005dd8 <TIM_OC3_SetConfig+0x108>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d003      	beq.n	8005d7e <TIM_OC3_SetConfig+0xae>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <TIM_OC3_SetConfig+0x10c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d113      	bne.n	8005da6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	621a      	str	r2, [r3, #32]
}
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	40012c00 	.word	0x40012c00
 8005dd0:	40013400 	.word	0x40013400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800

08005de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	031b      	lsls	r3, r3, #12
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a28      	ldr	r2, [pc, #160]	; (8005ee0 <TIM_OC4_SetConfig+0x100>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_OC4_SetConfig+0x6c>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <TIM_OC4_SetConfig+0x104>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d10d      	bne.n	8005e68 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	031b      	lsls	r3, r3, #12
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <TIM_OC4_SetConfig+0x100>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_OC4_SetConfig+0xb0>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a1c      	ldr	r2, [pc, #112]	; (8005ee4 <TIM_OC4_SetConfig+0x104>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_OC4_SetConfig+0xb0>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ee8 <TIM_OC4_SetConfig+0x108>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_OC4_SetConfig+0xb0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a1a      	ldr	r2, [pc, #104]	; (8005eec <TIM_OC4_SetConfig+0x10c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_OC4_SetConfig+0xb0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a19      	ldr	r2, [pc, #100]	; (8005ef0 <TIM_OC4_SetConfig+0x110>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d113      	bne.n	8005eb8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	019b      	lsls	r3, r3, #6
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	019b      	lsls	r3, r3, #6
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40013400 	.word	0x40013400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800

08005ef4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	041b      	lsls	r3, r3, #16
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <TIM_OC5_SetConfig+0xb4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00f      	beq.n	8005f6e <TIM_OC5_SetConfig+0x7a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a16      	ldr	r2, [pc, #88]	; (8005fac <TIM_OC5_SetConfig+0xb8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00b      	beq.n	8005f6e <TIM_OC5_SetConfig+0x7a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <TIM_OC5_SetConfig+0xbc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d007      	beq.n	8005f6e <TIM_OC5_SetConfig+0x7a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <TIM_OC5_SetConfig+0xc0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d003      	beq.n	8005f6e <TIM_OC5_SetConfig+0x7a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <TIM_OC5_SetConfig+0xc4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d109      	bne.n	8005f82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	021b      	lsls	r3, r3, #8
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	621a      	str	r2, [r3, #32]
}
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800

08005fbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	051b      	lsls	r3, r3, #20
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a18      	ldr	r2, [pc, #96]	; (8006074 <TIM_OC6_SetConfig+0xb8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00f      	beq.n	8006038 <TIM_OC6_SetConfig+0x7c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <TIM_OC6_SetConfig+0xbc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00b      	beq.n	8006038 <TIM_OC6_SetConfig+0x7c>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a16      	ldr	r2, [pc, #88]	; (800607c <TIM_OC6_SetConfig+0xc0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <TIM_OC6_SetConfig+0x7c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a15      	ldr	r2, [pc, #84]	; (8006080 <TIM_OC6_SetConfig+0xc4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_OC6_SetConfig+0x7c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a14      	ldr	r2, [pc, #80]	; (8006084 <TIM_OC6_SetConfig+0xc8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d109      	bne.n	800604c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	029b      	lsls	r3, r3, #10
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800

08006088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800609c:	2302      	movs	r3, #2
 800609e:	e065      	b.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a2c      	ldr	r2, [pc, #176]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2b      	ldr	r2, [pc, #172]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d108      	bne.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80060ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1b      	ldr	r2, [pc, #108]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d018      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006116:	d013      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a18      	ldr	r2, [pc, #96]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00e      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a17      	ldr	r2, [pc, #92]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d009      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a12      	ldr	r2, [pc, #72]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a13      	ldr	r2, [pc, #76]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d10c      	bne.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006146:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	4313      	orrs	r3, r2
 8006150:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40012c00 	.word	0x40012c00
 800617c:	40013400 	.word	0x40013400
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40014000 	.word	0x40014000

0800618c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e087      	b.n	80062b8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	041b      	lsls	r3, r3, #16
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a27      	ldr	r2, [pc, #156]	; (80062c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d004      	beq.n	8006236 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a25      	ldr	r2, [pc, #148]	; (80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d106      	bne.n	8006244 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1e      	ldr	r2, [pc, #120]	; (80062c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d004      	beq.n	8006258 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1d      	ldr	r2, [pc, #116]	; (80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d126      	bne.n	80062a6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006262:	051b      	lsls	r3, r3, #20
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a0d      	ldr	r2, [pc, #52]	; (80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d106      	bne.n	80062a6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	40012c00 	.word	0x40012c00
 80062c8:	40013400 	.word	0x40013400

080062cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062dc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80062e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006302:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006306:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	b29b      	uxth	r3, r3
 8006314:	43db      	mvns	r3, r3
 8006316:	b29b      	uxth	r3, r3
 8006318:	4013      	ands	r3, r2
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006330:	b084      	sub	sp, #16
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	f107 0014 	add.w	r0, r7, #20
 800633e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	b004      	add	sp, #16
 8006370:	4770      	bx	lr
	...

08006374 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006374:	b480      	push	{r7}
 8006376:	b09d      	sub	sp, #116	; 0x74
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	78db      	ldrb	r3, [r3, #3]
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d81f      	bhi.n	80063e6 <USB_ActivateEndpoint+0x72>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <USB_ActivateEndpoint+0x38>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063bd 	.word	0x080063bd
 80063b0:	080063d9 	.word	0x080063d9
 80063b4:	080063ef 	.word	0x080063ef
 80063b8:	080063cb 	.word	0x080063cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80063bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063c8:	e012      	b.n	80063f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80063ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80063d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063d6:	e00b      	b.n	80063f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80063d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063e4:	e004      	b.n	80063f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80063ec:	e000      	b.n	80063f0 <USB_ActivateEndpoint+0x7c>
      break;
 80063ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	441a      	add	r2, r3
 80063fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800640a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640e:	b29b      	uxth	r3, r3
 8006410:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	b21b      	sxth	r3, r3
 8006422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642a:	b21a      	sxth	r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	b21b      	sxth	r3, r3
 8006432:	4313      	orrs	r3, r2
 8006434:	b21b      	sxth	r3, r3
 8006436:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	441a      	add	r2, r3
 8006444:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006458:	b29b      	uxth	r3, r3
 800645a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	7b1b      	ldrb	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f040 8149 	bne.w	80066f8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	785b      	ldrb	r3, [r3, #1]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 8084 	beq.w	8006578 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800647a:	b29b      	uxth	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	4413      	add	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	00da      	lsls	r2, r3, #3
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	88db      	ldrh	r3, [r3, #6]
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	827b      	strh	r3, [r7, #18]
 80064b2:	8a7b      	ldrh	r3, [r7, #18]
 80064b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01b      	beq.n	80064f4 <USB_ActivateEndpoint+0x180>
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	823b      	strh	r3, [r7, #16]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	441a      	add	r2, r3
 80064de:	8a3b      	ldrh	r3, [r7, #16]
 80064e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	78db      	ldrb	r3, [r3, #3]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d020      	beq.n	800653e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006512:	81bb      	strh	r3, [r7, #12]
 8006514:	89bb      	ldrh	r3, [r7, #12]
 8006516:	f083 0320 	eor.w	r3, r3, #32
 800651a:	81bb      	strh	r3, [r7, #12]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	89bb      	ldrh	r3, [r7, #12]
 8006528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006538:	b29b      	uxth	r3, r3
 800653a:	8013      	strh	r3, [r2, #0]
 800653c:	e2a6      	b.n	8006a8c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006554:	81fb      	strh	r3, [r7, #14]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	89fb      	ldrh	r3, [r7, #14]
 8006562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006572:	b29b      	uxth	r3, r3
 8006574:	8013      	strh	r3, [r2, #0]
 8006576:	e289      	b.n	8006a8c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	633b      	str	r3, [r7, #48]	; 0x30
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006582:	b29b      	uxth	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	4413      	add	r3, r2
 800658a:	633b      	str	r3, [r7, #48]	; 0x30
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	00da      	lsls	r2, r3, #3
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	4413      	add	r3, r2
 8006596:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	88db      	ldrh	r3, [r3, #6]
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	4413      	add	r3, r2
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	00da      	lsls	r2, r3, #3
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b3e      	cmp	r3, #62	; 0x3e
 80065d6:	d918      	bls.n	800660a <USB_ActivateEndpoint+0x296>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	66bb      	str	r3, [r7, #104]	; 0x68
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <USB_ActivateEndpoint+0x27e>
 80065ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065ee:	3b01      	subs	r3, #1
 80065f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80065f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	029b      	lsls	r3, r3, #10
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006602:	b29a      	uxth	r2, r3
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	801a      	strh	r2, [r3, #0]
 8006608:	e029      	b.n	800665e <USB_ActivateEndpoint+0x2ea>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d112      	bne.n	8006638 <USB_ActivateEndpoint+0x2c4>
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800661c:	b29a      	uxth	r2, r3
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006630:	b29a      	uxth	r2, r3
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	e012      	b.n	800665e <USB_ActivateEndpoint+0x2ea>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	085b      	lsrs	r3, r3, #1
 800663e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <USB_ActivateEndpoint+0x2de>
 800664c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800664e:	3301      	adds	r3, #1
 8006650:	66bb      	str	r3, [r7, #104]	; 0x68
 8006652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006654:	b29b      	uxth	r3, r3
 8006656:	029b      	lsls	r3, r3, #10
 8006658:	b29a      	uxth	r2, r3
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	847b      	strh	r3, [r7, #34]	; 0x22
 800666c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800666e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01b      	beq.n	80066ae <USB_ActivateEndpoint+0x33a>
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668c:	843b      	strh	r3, [r7, #32]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	441a      	add	r2, r3
 8006698:	8c3b      	ldrh	r3, [r7, #32]
 800669a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c4:	83fb      	strh	r3, [r7, #30]
 80066c6:	8bfb      	ldrh	r3, [r7, #30]
 80066c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066cc:	83fb      	strh	r3, [r7, #30]
 80066ce:	8bfb      	ldrh	r3, [r7, #30]
 80066d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066d4:	83fb      	strh	r3, [r7, #30]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	441a      	add	r2, r3
 80066e0:	8bfb      	ldrh	r3, [r7, #30]
 80066e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	8013      	strh	r3, [r2, #0]
 80066f6:	e1c9      	b.n	8006a8c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	78db      	ldrb	r3, [r3, #3]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d11e      	bne.n	800673e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	441a      	add	r2, r3
 8006724:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800672c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006730:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006738:	b29b      	uxth	r3, r3
 800673a:	8013      	strh	r3, [r2, #0]
 800673c:	e01d      	b.n	800677a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006754:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	441a      	add	r2, r3
 8006762:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006776:	b29b      	uxth	r3, r3
 8006778:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006784:	b29b      	uxth	r3, r3
 8006786:	461a      	mov	r2, r3
 8006788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800678a:	4413      	add	r3, r2
 800678c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	00da      	lsls	r2, r3, #3
 8006794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006796:	4413      	add	r3, r2
 8006798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679c:	65bb      	str	r3, [r7, #88]	; 0x58
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	891b      	ldrh	r3, [r3, #8]
 80067a2:	085b      	lsrs	r3, r3, #1
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	657b      	str	r3, [r7, #84]	; 0x54
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067be:	4413      	add	r3, r2
 80067c0:	657b      	str	r3, [r7, #84]	; 0x54
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	00da      	lsls	r2, r3, #3
 80067c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ca:	4413      	add	r3, r2
 80067cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067d0:	653b      	str	r3, [r7, #80]	; 0x50
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	895b      	ldrh	r3, [r3, #10]
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	b29b      	uxth	r3, r3
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f040 8093 	bne.w	8006912 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80067fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01b      	beq.n	8006840 <USB_ActivateEndpoint+0x4cc>
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	441a      	add	r2, r3
 800682a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800682c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683c:	b29b      	uxth	r3, r3
 800683e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800684e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01b      	beq.n	8006890 <USB_ActivateEndpoint+0x51c>
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	441a      	add	r2, r3
 800687a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800687c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006888:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800688c:	b29b      	uxth	r3, r3
 800688e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29b      	uxth	r3, r3
 800689e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a6:	873b      	strh	r3, [r7, #56]	; 0x38
 80068a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80068b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	441a      	add	r2, r3
 80068c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ee:	86fb      	strh	r3, [r7, #54]	; 0x36
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	441a      	add	r2, r3
 80068fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690c:	b29b      	uxth	r3, r3
 800690e:	8013      	strh	r3, [r2, #0]
 8006910:	e0bc      	b.n	8006a8c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006922:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01d      	beq.n	800696a <USB_ActivateEndpoint+0x5f6>
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006944:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	441a      	add	r2, r3
 8006952:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006966:	b29b      	uxth	r3, r3
 8006968:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800697a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800697e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01d      	beq.n	80069c2 <USB_ActivateEndpoint+0x64e>
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069be:	b29b      	uxth	r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	78db      	ldrb	r3, [r3, #3]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d024      	beq.n	8006a14 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069e8:	f083 0320 	eor.w	r3, r3, #32
 80069ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	8013      	strh	r3, [r2, #0]
 8006a12:	e01d      	b.n	8006a50 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	441a      	add	r2, r3
 8006a38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	441a      	add	r2, r3
 8006a74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006a8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3774      	adds	r7, #116	; 0x74
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b08d      	sub	sp, #52	; 0x34
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	7b1b      	ldrb	r3, [r3, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f040 808e 	bne.w	8006bcc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	785b      	ldrb	r3, [r3, #1]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d044      	beq.n	8006b42 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	81bb      	strh	r3, [r7, #12]
 8006ac6:	89bb      	ldrh	r3, [r7, #12]
 8006ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d01b      	beq.n	8006b08 <USB_DeactivateEndpoint+0x6c>
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	817b      	strh	r3, [r7, #10]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	441a      	add	r2, r3
 8006af2:	897b      	ldrh	r3, [r7, #10]
 8006af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1e:	813b      	strh	r3, [r7, #8]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	441a      	add	r2, r3
 8006b2a:	893b      	ldrh	r3, [r7, #8]
 8006b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8013      	strh	r3, [r2, #0]
 8006b40:	e192      	b.n	8006e68 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	827b      	strh	r3, [r7, #18]
 8006b50:	8a7b      	ldrh	r3, [r7, #18]
 8006b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d01b      	beq.n	8006b92 <USB_DeactivateEndpoint+0xf6>
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b70:	823b      	strh	r3, [r7, #16]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	8a3b      	ldrh	r3, [r7, #16]
 8006b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba8:	81fb      	strh	r3, [r7, #14]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	441a      	add	r2, r3
 8006bb4:	89fb      	ldrh	r3, [r7, #14]
 8006bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	8013      	strh	r3, [r2, #0]
 8006bca:	e14d      	b.n	8006e68 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	785b      	ldrb	r3, [r3, #1]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f040 80a5 	bne.w	8006d20 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	843b      	strh	r3, [r7, #32]
 8006be4:	8c3b      	ldrh	r3, [r7, #32]
 8006be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01b      	beq.n	8006c26 <USB_DeactivateEndpoint+0x18a>
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c04:	83fb      	strh	r3, [r7, #30]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	441a      	add	r2, r3
 8006c10:	8bfb      	ldrh	r3, [r7, #30]
 8006c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	83bb      	strh	r3, [r7, #28]
 8006c34:	8bbb      	ldrh	r3, [r7, #28]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01b      	beq.n	8006c76 <USB_DeactivateEndpoint+0x1da>
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	837b      	strh	r3, [r7, #26]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	441a      	add	r2, r3
 8006c60:	8b7b      	ldrh	r3, [r7, #26]
 8006c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8c:	833b      	strh	r3, [r7, #24]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	441a      	add	r2, r3
 8006c98:	8b3b      	ldrh	r3, [r7, #24]
 8006c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc4:	82fb      	strh	r3, [r7, #22]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	441a      	add	r2, r3
 8006cd0:	8afb      	ldrh	r3, [r7, #22]
 8006cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfc:	82bb      	strh	r3, [r7, #20]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	441a      	add	r2, r3
 8006d08:	8abb      	ldrh	r3, [r7, #20]
 8006d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	8013      	strh	r3, [r2, #0]
 8006d1e:	e0a3      	b.n	8006e68 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01b      	beq.n	8006d70 <USB_DeactivateEndpoint+0x2d4>
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	441a      	add	r2, r3
 8006d5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01b      	beq.n	8006dc0 <USB_DeactivateEndpoint+0x324>
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	441a      	add	r2, r3
 8006daa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	441a      	add	r2, r3
 8006de2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	441a      	add	r2, r3
 8006e1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	441a      	add	r2, r3
 8006e52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3734      	adds	r7, #52	; 0x34
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b0c2      	sub	sp, #264	; 0x108
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e84:	6018      	str	r0, [r3, #0]
 8006e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	785b      	ldrb	r3, [r3, #1]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	f040 867b 	bne.w	8007b98 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699a      	ldr	r2, [r3, #24]
 8006eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d908      	bls.n	8006ed0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ece:	e007      	b.n	8006ee0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	7b1b      	ldrb	r3, [r3, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d13a      	bne.n	8006f66 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6959      	ldr	r1, [r3, #20]
 8006efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	88da      	ldrh	r2, [r3, #6]
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f16:	6800      	ldr	r0, [r0, #0]
 8006f18:	f001 fc1d 	bl	8008756 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	00da      	lsls	r2, r3, #3
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4413      	add	r3, r2
 8006f52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	801a      	strh	r2, [r3, #0]
 8006f62:	f000 bde3 	b.w	8007b2c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	78db      	ldrb	r3, [r3, #3]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	f040 843a 	bne.w	80077ec <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6a1a      	ldr	r2, [r3, #32]
 8006f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	f240 83b7 	bls.w	8007704 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	441a      	add	r2, r3
 8006fda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6a1a      	ldr	r2, [r3, #32]
 8006ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007002:	1ad2      	subs	r2, r2, r3
 8007004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 81b3 	beq.w	800739e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	633b      	str	r3, [r7, #48]	; 0x30
 8007044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d16d      	bne.n	8007130 <USB_EPStartXfer+0x2ba>
 8007054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800706e:	b29b      	uxth	r3, r3
 8007070:	461a      	mov	r2, r3
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	4413      	add	r3, r2
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
 8007078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	00da      	lsls	r2, r3, #3
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	4413      	add	r3, r2
 800708a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007094:	2b3e      	cmp	r3, #62	; 0x3e
 8007096:	d91c      	bls.n	80070d2 <USB_EPStartXfer+0x25c>
 8007098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a6:	f003 031f 	and.w	r3, r3, #31
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <USB_EPStartXfer+0x242>
 80070ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070b2:	3b01      	subs	r3, #1
 80070b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070bc:	b29b      	uxth	r3, r3
 80070be:	029b      	lsls	r3, r3, #10
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	801a      	strh	r2, [r3, #0]
 80070d0:	e053      	b.n	800717a <USB_EPStartXfer+0x304>
 80070d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d112      	bne.n	8007100 <USB_EPStartXfer+0x28a>
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	801a      	strh	r2, [r3, #0]
 80070fe:	e03c      	b.n	800717a <USB_EPStartXfer+0x304>
 8007100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007104:	085b      	lsrs	r3, r3, #1
 8007106:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800710a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d004      	beq.n	8007120 <USB_EPStartXfer+0x2aa>
 8007116:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800711a:	3301      	adds	r3, #1
 800711c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007120:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007124:	b29b      	uxth	r3, r3
 8007126:	029b      	lsls	r3, r3, #10
 8007128:	b29a      	uxth	r2, r3
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	801a      	strh	r2, [r3, #0]
 800712e:	e024      	b.n	800717a <USB_EPStartXfer+0x304>
 8007130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	785b      	ldrb	r3, [r3, #1]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d11c      	bne.n	800717a <USB_EPStartXfer+0x304>
 8007140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007144:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800714e:	b29b      	uxth	r3, r3
 8007150:	461a      	mov	r2, r3
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	4413      	add	r3, r2
 8007156:	633b      	str	r3, [r7, #48]	; 0x30
 8007158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	00da      	lsls	r2, r3, #3
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	4413      	add	r3, r2
 800716a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800716e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007174:	b29a      	uxth	r2, r3
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800717a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	895b      	ldrh	r3, [r3, #10]
 8007186:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800718a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6959      	ldr	r1, [r3, #20]
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719a:	b29b      	uxth	r3, r3
 800719c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071a8:	6800      	ldr	r0, [r0, #0]
 80071aa:	f001 fad4 	bl	8008756 <USB_WritePMA>
            ep->xfer_buff += len;
 80071ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071be:	441a      	add	r2, r3
 80071c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6a1a      	ldr	r2, [r3, #32]
 80071d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d90f      	bls.n	8007208 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80071e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f8:	1ad2      	subs	r2, r2, r3
 80071fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	621a      	str	r2, [r3, #32]
 8007206:	e00e      	b.n	8007226 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2200      	movs	r2, #0
 8007224:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d16d      	bne.n	8007312 <USB_EPStartXfer+0x49c>
 8007236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007246:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007250:	b29b      	uxth	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	4413      	add	r3, r2
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800725e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	00da      	lsls	r2, r3, #3
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	4413      	add	r3, r2
 800726c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007276:	2b3e      	cmp	r3, #62	; 0x3e
 8007278:	d91c      	bls.n	80072b4 <USB_EPStartXfer+0x43e>
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007288:	f003 031f 	and.w	r3, r3, #31
 800728c:	2b00      	cmp	r3, #0
 800728e:	d104      	bne.n	800729a <USB_EPStartXfer+0x424>
 8007290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007294:	3b01      	subs	r3, #1
 8007296:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800729a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800729e:	b29b      	uxth	r3, r3
 80072a0:	029b      	lsls	r3, r3, #10
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	801a      	strh	r2, [r3, #0]
 80072b2:	e059      	b.n	8007368 <USB_EPStartXfer+0x4f2>
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d112      	bne.n	80072e2 <USB_EPStartXfer+0x46c>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072da:	b29a      	uxth	r2, r3
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	801a      	strh	r2, [r3, #0]
 80072e0:	e042      	b.n	8007368 <USB_EPStartXfer+0x4f2>
 80072e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d004      	beq.n	8007302 <USB_EPStartXfer+0x48c>
 80072f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072fc:	3301      	adds	r3, #1
 80072fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007306:	b29b      	uxth	r3, r3
 8007308:	029b      	lsls	r3, r3, #10
 800730a:	b29a      	uxth	r2, r3
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	e02a      	b.n	8007368 <USB_EPStartXfer+0x4f2>
 8007312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	785b      	ldrb	r3, [r3, #1]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d122      	bne.n	8007368 <USB_EPStartXfer+0x4f2>
 8007322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007326:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	623b      	str	r3, [r7, #32]
 800732e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733c:	b29b      	uxth	r3, r3
 800733e:	461a      	mov	r2, r3
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	4413      	add	r3, r2
 8007344:	623b      	str	r3, [r7, #32]
 8007346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	00da      	lsls	r2, r3, #3
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	4413      	add	r3, r2
 8007358:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007362:	b29a      	uxth	r2, r3
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	891b      	ldrh	r3, [r3, #8]
 8007374:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6959      	ldr	r1, [r3, #20]
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007388:	b29b      	uxth	r3, r3
 800738a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800738e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007392:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007396:	6800      	ldr	r0, [r0, #0]
 8007398:	f001 f9dd 	bl	8008756 <USB_WritePMA>
 800739c:	e3c6      	b.n	8007b2c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800739e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	785b      	ldrb	r3, [r3, #1]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d16d      	bne.n	800748a <USB_EPStartXfer+0x614>
 80073ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ce:	4413      	add	r3, r2
 80073d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	00da      	lsls	r2, r3, #3
 80073e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e2:	4413      	add	r3, r2
 80073e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073e8:	647b      	str	r3, [r7, #68]	; 0x44
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ee:	2b3e      	cmp	r3, #62	; 0x3e
 80073f0:	d91c      	bls.n	800742c <USB_EPStartXfer+0x5b6>
 80073f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f6:	095b      	lsrs	r3, r3, #5
 80073f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <USB_EPStartXfer+0x59c>
 8007408:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800740c:	3b01      	subs	r3, #1
 800740e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007416:	b29b      	uxth	r3, r3
 8007418:	029b      	lsls	r3, r3, #10
 800741a:	b29b      	uxth	r3, r3
 800741c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007424:	b29a      	uxth	r2, r3
 8007426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	e059      	b.n	80074e0 <USB_EPStartXfer+0x66a>
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007430:	2b00      	cmp	r3, #0
 8007432:	d112      	bne.n	800745a <USB_EPStartXfer+0x5e4>
 8007434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800743e:	b29a      	uxth	r2, r3
 8007440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007452:	b29a      	uxth	r2, r3
 8007454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	e042      	b.n	80074e0 <USB_EPStartXfer+0x66a>
 800745a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <USB_EPStartXfer+0x604>
 8007470:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007474:	3301      	adds	r3, #1
 8007476:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800747a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800747e:	b29b      	uxth	r3, r3
 8007480:	029b      	lsls	r3, r3, #10
 8007482:	b29a      	uxth	r2, r3
 8007484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007486:	801a      	strh	r2, [r3, #0]
 8007488:	e02a      	b.n	80074e0 <USB_EPStartXfer+0x66a>
 800748a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	785b      	ldrb	r3, [r3, #1]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d122      	bne.n	80074e0 <USB_EPStartXfer+0x66a>
 800749a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	653b      	str	r3, [r7, #80]	; 0x50
 80074a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	461a      	mov	r2, r3
 80074b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ba:	4413      	add	r3, r2
 80074bc:	653b      	str	r3, [r7, #80]	; 0x50
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	00da      	lsls	r2, r3, #3
 80074cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ce:	4413      	add	r3, r2
 80074d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074da:	b29a      	uxth	r2, r3
 80074dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	891b      	ldrh	r3, [r3, #8]
 80074ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6959      	ldr	r1, [r3, #20]
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007500:	b29b      	uxth	r3, r3
 8007502:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007506:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800750a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800750e:	6800      	ldr	r0, [r0, #0]
 8007510:	f001 f921 	bl	8008756 <USB_WritePMA>
            ep->xfer_buff += len;
 8007514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695a      	ldr	r2, [r3, #20]
 8007520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007524:	441a      	add	r2, r3
 8007526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6a1a      	ldr	r2, [r3, #32]
 800753e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	429a      	cmp	r2, r3
 800754c:	d90f      	bls.n	800756e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800754e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6a1a      	ldr	r2, [r3, #32]
 800755a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	621a      	str	r2, [r3, #32]
 800756c:	e00e      	b.n	800758c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800756e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800757e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2200      	movs	r2, #0
 800758a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800758c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	643b      	str	r3, [r7, #64]	; 0x40
 8007598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d16d      	bne.n	8007684 <USB_EPStartXfer+0x80e>
 80075a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	4413      	add	r3, r2
 80075ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80075cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	00da      	lsls	r2, r3, #3
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	4413      	add	r3, r2
 80075de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075e2:	637b      	str	r3, [r7, #52]	; 0x34
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e8:	2b3e      	cmp	r3, #62	; 0x3e
 80075ea:	d91c      	bls.n	8007626 <USB_EPStartXfer+0x7b0>
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fa:	f003 031f 	and.w	r3, r3, #31
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d104      	bne.n	800760c <USB_EPStartXfer+0x796>
 8007602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007606:	3b01      	subs	r3, #1
 8007608:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007610:	b29b      	uxth	r3, r3
 8007612:	029b      	lsls	r3, r3, #10
 8007614:	b29b      	uxth	r3, r3
 8007616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800761e:	b29a      	uxth	r2, r3
 8007620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007622:	801a      	strh	r2, [r3, #0]
 8007624:	e053      	b.n	80076ce <USB_EPStartXfer+0x858>
 8007626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762a:	2b00      	cmp	r3, #0
 800762c:	d112      	bne.n	8007654 <USB_EPStartXfer+0x7de>
 800762e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007638:	b29a      	uxth	r2, r3
 800763a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764c:	b29a      	uxth	r2, r3
 800764e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	e03c      	b.n	80076ce <USB_EPStartXfer+0x858>
 8007654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007658:	085b      	lsrs	r3, r3, #1
 800765a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800765e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d004      	beq.n	8007674 <USB_EPStartXfer+0x7fe>
 800766a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766e:	3301      	adds	r3, #1
 8007670:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007678:	b29b      	uxth	r3, r3
 800767a:	029b      	lsls	r3, r3, #10
 800767c:	b29a      	uxth	r2, r3
 800767e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007680:	801a      	strh	r2, [r3, #0]
 8007682:	e024      	b.n	80076ce <USB_EPStartXfer+0x858>
 8007684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d11c      	bne.n	80076ce <USB_EPStartXfer+0x858>
 8007694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	461a      	mov	r2, r3
 80076a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a8:	4413      	add	r3, r2
 80076aa:	643b      	str	r3, [r7, #64]	; 0x40
 80076ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	00da      	lsls	r2, r3, #3
 80076ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076bc:	4413      	add	r3, r2
 80076be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80076ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	895b      	ldrh	r3, [r3, #10]
 80076da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6959      	ldr	r1, [r3, #20]
 80076ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80076f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80076f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80076fc:	6800      	ldr	r0, [r0, #0]
 80076fe:	f001 f82a 	bl	8008756 <USB_WritePMA>
 8007702:	e213      	b.n	8007b2c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	b29b      	uxth	r3, r3
 8007732:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800773e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	441a      	add	r2, r3
 8007758:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800775c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800776c:	b29b      	uxth	r3, r3
 800776e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800777c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800778a:	b29b      	uxth	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007790:	4413      	add	r3, r2
 8007792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	00da      	lsls	r2, r3, #3
 80077a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a4:	4413      	add	r3, r2
 80077a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80077ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	891b      	ldrh	r3, [r3, #8]
 80077c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6959      	ldr	r1, [r3, #20]
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077e4:	6800      	ldr	r0, [r0, #0]
 80077e6:	f000 ffb6 	bl	8008756 <USB_WritePMA>
 80077ea:	e19f      	b.n	8007b2c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80077ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6a1a      	ldr	r2, [r3, #32]
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fc:	1ad2      	subs	r2, r2, r3
 80077fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800780a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80bc 	beq.w	80079aa <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	673b      	str	r3, [r7, #112]	; 0x70
 800783e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d16d      	bne.n	800792a <USB_EPStartXfer+0xab4>
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	66bb      	str	r3, [r7, #104]	; 0x68
 800785a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007868:	b29b      	uxth	r3, r3
 800786a:	461a      	mov	r2, r3
 800786c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800786e:	4413      	add	r3, r2
 8007870:	66bb      	str	r3, [r7, #104]	; 0x68
 8007872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	00da      	lsls	r2, r3, #3
 8007880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007882:	4413      	add	r3, r2
 8007884:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007888:	667b      	str	r3, [r7, #100]	; 0x64
 800788a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788e:	2b3e      	cmp	r3, #62	; 0x3e
 8007890:	d91c      	bls.n	80078cc <USB_EPStartXfer+0xa56>
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007896:	095b      	lsrs	r3, r3, #5
 8007898:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a0:	f003 031f 	and.w	r3, r3, #31
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <USB_EPStartXfer+0xa3c>
 80078a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078ac:	3b01      	subs	r3, #1
 80078ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	029b      	lsls	r3, r3, #10
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078c8:	801a      	strh	r2, [r3, #0]
 80078ca:	e053      	b.n	8007974 <USB_EPStartXfer+0xafe>
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d112      	bne.n	80078fa <USB_EPStartXfer+0xa84>
 80078d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078de:	b29a      	uxth	r2, r3
 80078e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078f6:	801a      	strh	r2, [r3, #0]
 80078f8:	e03c      	b.n	8007974 <USB_EPStartXfer+0xafe>
 80078fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d004      	beq.n	800791a <USB_EPStartXfer+0xaa4>
 8007910:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007914:	3301      	adds	r3, #1
 8007916:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800791a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800791e:	b29b      	uxth	r3, r3
 8007920:	029b      	lsls	r3, r3, #10
 8007922:	b29a      	uxth	r2, r3
 8007924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	e024      	b.n	8007974 <USB_EPStartXfer+0xafe>
 800792a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d11c      	bne.n	8007974 <USB_EPStartXfer+0xafe>
 800793a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007948:	b29b      	uxth	r3, r3
 800794a:	461a      	mov	r2, r3
 800794c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800794e:	4413      	add	r3, r2
 8007950:	673b      	str	r3, [r7, #112]	; 0x70
 8007952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	00da      	lsls	r2, r3, #3
 8007960:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007962:	4413      	add	r3, r2
 8007964:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796e:	b29a      	uxth	r2, r3
 8007970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007972:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	895b      	ldrh	r3, [r3, #10]
 8007980:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6959      	ldr	r1, [r3, #20]
 8007990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007994:	b29b      	uxth	r3, r3
 8007996:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800799a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800799e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80079a2:	6800      	ldr	r0, [r0, #0]
 80079a4:	f000 fed7 	bl	8008756 <USB_WritePMA>
 80079a8:	e0c0      	b.n	8007b2c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d16d      	bne.n	8007a96 <USB_EPStartXfer+0xc20>
 80079ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079da:	4413      	add	r3, r2
 80079dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	00da      	lsls	r2, r3, #3
 80079ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ee:	4413      	add	r3, r2
 80079f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80079f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079fa:	2b3e      	cmp	r3, #62	; 0x3e
 80079fc:	d91c      	bls.n	8007a38 <USB_EPStartXfer+0xbc2>
 80079fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a0c:	f003 031f 	and.w	r3, r3, #31
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <USB_EPStartXfer+0xba8>
 8007a14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	029b      	lsls	r3, r3, #10
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	e05f      	b.n	8007af8 <USB_EPStartXfer+0xc82>
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d112      	bne.n	8007a66 <USB_EPStartXfer+0xbf0>
 8007a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a4e:	801a      	strh	r2, [r3, #0]
 8007a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a62:	801a      	strh	r2, [r3, #0]
 8007a64:	e048      	b.n	8007af8 <USB_EPStartXfer+0xc82>
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6a:	085b      	lsrs	r3, r3, #1
 8007a6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <USB_EPStartXfer+0xc10>
 8007a7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a80:	3301      	adds	r3, #1
 8007a82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	029b      	lsls	r3, r3, #10
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a92:	801a      	strh	r2, [r3, #0]
 8007a94:	e030      	b.n	8007af8 <USB_EPStartXfer+0xc82>
 8007a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	785b      	ldrb	r3, [r3, #1]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d128      	bne.n	8007af8 <USB_EPStartXfer+0xc82>
 8007aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aca:	4413      	add	r3, r2
 8007acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	00da      	lsls	r2, r3, #3
 8007ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ae8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007af6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	891b      	ldrh	r3, [r3, #8]
 8007b04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6959      	ldr	r1, [r3, #20]
 8007b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b26:	6800      	ldr	r0, [r0, #0]
 8007b28:	f000 fe15 	bl	8008756 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b52:	817b      	strh	r3, [r7, #10]
 8007b54:	897b      	ldrh	r3, [r7, #10]
 8007b56:	f083 0310 	eor.w	r3, r3, #16
 8007b5a:	817b      	strh	r3, [r7, #10]
 8007b5c:	897b      	ldrh	r3, [r7, #10]
 8007b5e:	f083 0320 	eor.w	r3, r3, #32
 8007b62:	817b      	strh	r3, [r7, #10]
 8007b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	441a      	add	r2, r3
 8007b7e:	897b      	ldrh	r3, [r7, #10]
 8007b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	8013      	strh	r3, [r2, #0]
 8007b94:	f000 bc9f 	b.w	80084d6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	7b1b      	ldrb	r3, [r3, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f040 80ae 	bne.w	8007d06 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d917      	bls.n	8007bf6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be6:	1ad2      	subs	r2, r2, r3
 8007be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	619a      	str	r2, [r3, #24]
 8007bf4:	e00e      	b.n	8007c14 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2200      	movs	r2, #0
 8007c12:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c38:	4413      	add	r3, r2
 8007c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	00da      	lsls	r2, r3, #3
 8007c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c60:	d91d      	bls.n	8007c9e <USB_EPStartXfer+0xe28>
 8007c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <USB_EPStartXfer+0xe0c>
 8007c78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	029b      	lsls	r3, r3, #10
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	e3e1      	b.n	8008462 <USB_EPStartXfer+0x15ec>
 8007c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d116      	bne.n	8007cd4 <USB_EPStartXfer+0xe5e>
 8007ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cd0:	801a      	strh	r2, [r3, #0]
 8007cd2:	e3c6      	b.n	8008462 <USB_EPStartXfer+0x15ec>
 8007cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd8:	085b      	lsrs	r3, r3, #1
 8007cda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d004      	beq.n	8007cf4 <USB_EPStartXfer+0xe7e>
 8007cea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cee:	3301      	adds	r3, #1
 8007cf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	029b      	lsls	r3, r3, #10
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d02:	801a      	strh	r2, [r3, #0]
 8007d04:	e3ad      	b.n	8008462 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	78db      	ldrb	r3, [r3, #3]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	f040 8200 	bne.w	8008118 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f040 8091 	bne.w	8007e4c <USB_EPStartXfer+0xfd6>
 8007d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d4e:	4413      	add	r3, r2
 8007d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	00da      	lsls	r2, r3, #3
 8007d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d66:	4413      	add	r3, r2
 8007d68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d7e:	d925      	bls.n	8007dcc <USB_EPStartXfer+0xf56>
 8007d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f003 031f 	and.w	r3, r3, #31
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d104      	bne.n	8007db0 <USB_EPStartXfer+0xf3a>
 8007da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007daa:	3b01      	subs	r3, #1
 8007dac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	029b      	lsls	r3, r3, #10
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	e074      	b.n	8007eb6 <USB_EPStartXfer+0x1040>
 8007dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d116      	bne.n	8007e0a <USB_EPStartXfer+0xf94>
 8007ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e06:	801a      	strh	r2, [r3, #0]
 8007e08:	e055      	b.n	8007eb6 <USB_EPStartXfer+0x1040>
 8007e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	085b      	lsrs	r3, r3, #1
 8007e18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <USB_EPStartXfer+0xfc4>
 8007e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e34:	3301      	adds	r3, #1
 8007e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	029b      	lsls	r3, r3, #10
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	e034      	b.n	8007eb6 <USB_EPStartXfer+0x1040>
 8007e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	785b      	ldrb	r3, [r3, #1]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d12c      	bne.n	8007eb6 <USB_EPStartXfer+0x1040>
 8007e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e80:	4413      	add	r3, r2
 8007e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	00da      	lsls	r2, r3, #3
 8007e94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e98:	4413      	add	r3, r2
 8007e9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007eb4:	801a      	strh	r2, [r3, #0]
 8007eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	785b      	ldrb	r3, [r3, #1]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f040 8091 	bne.w	8007ff8 <USB_EPStartXfer+0x1182>
 8007ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007efa:	4413      	add	r3, r2
 8007efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	00da      	lsls	r2, r3, #3
 8007f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f12:	4413      	add	r3, r2
 8007f14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b3e      	cmp	r3, #62	; 0x3e
 8007f2a:	d925      	bls.n	8007f78 <USB_EPStartXfer+0x1102>
 8007f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	095b      	lsrs	r3, r3, #5
 8007f3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 031f 	and.w	r3, r3, #31
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d104      	bne.n	8007f5c <USB_EPStartXfer+0x10e6>
 8007f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f56:	3b01      	subs	r3, #1
 8007f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	029b      	lsls	r3, r3, #10
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f74:	801a      	strh	r2, [r3, #0]
 8007f76:	e06d      	b.n	8008054 <USB_EPStartXfer+0x11de>
 8007f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d116      	bne.n	8007fb6 <USB_EPStartXfer+0x1140>
 8007f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fb2:	801a      	strh	r2, [r3, #0]
 8007fb4:	e04e      	b.n	8008054 <USB_EPStartXfer+0x11de>
 8007fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	085b      	lsrs	r3, r3, #1
 8007fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d004      	beq.n	8007fe6 <USB_EPStartXfer+0x1170>
 8007fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	029b      	lsls	r3, r3, #10
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ff4:	801a      	strh	r2, [r3, #0]
 8007ff6:	e02d      	b.n	8008054 <USB_EPStartXfer+0x11de>
 8007ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	785b      	ldrb	r3, [r3, #1]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d125      	bne.n	8008054 <USB_EPStartXfer+0x11de>
 8008008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008016:	b29b      	uxth	r3, r3
 8008018:	461a      	mov	r2, r3
 800801a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800801e:	4413      	add	r3, r2
 8008020:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	00da      	lsls	r2, r3, #3
 8008032:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008036:	4413      	add	r3, r2
 8008038:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800803c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	b29a      	uxth	r2, r3
 800804e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008052:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 81fe 	beq.w	8008462 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008086:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800808a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d005      	beq.n	800809e <USB_EPStartXfer+0x1228>
 8008092:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10d      	bne.n	80080ba <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800809e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f040 81db 	bne.w	8008462 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f040 81d4 	bne.w	8008462 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80080ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80080e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	441a      	add	r2, r3
 80080fe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800810a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800810e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008112:	b29b      	uxth	r3, r3
 8008114:	8013      	strh	r3, [r2, #0]
 8008116:	e1a4      	b.n	8008462 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	78db      	ldrb	r3, [r3, #3]
 8008124:	2b01      	cmp	r3, #1
 8008126:	f040 819a 	bne.w	800845e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800812a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699a      	ldr	r2, [r3, #24]
 8008136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	429a      	cmp	r2, r3
 8008144:	d917      	bls.n	8008176 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8008146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008166:	1ad2      	subs	r2, r2, r3
 8008168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	619a      	str	r2, [r3, #24]
 8008174:	e00e      	b.n	8008194 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8008176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2200      	movs	r2, #0
 8008192:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	785b      	ldrb	r3, [r3, #1]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d178      	bne.n	8008296 <USB_EPStartXfer+0x1420>
 80081a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081c8:	4413      	add	r3, r2
 80081ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	00da      	lsls	r2, r3, #3
 80081dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081e0:	4413      	add	r3, r2
 80081e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ee:	2b3e      	cmp	r3, #62	; 0x3e
 80081f0:	d91d      	bls.n	800822e <USB_EPStartXfer+0x13b8>
 80081f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f6:	095b      	lsrs	r3, r3, #5
 80081f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008200:	f003 031f 	and.w	r3, r3, #31
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <USB_EPStartXfer+0x139c>
 8008208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800820c:	3b01      	subs	r3, #1
 800820e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008216:	b29b      	uxth	r3, r3
 8008218:	029b      	lsls	r3, r3, #10
 800821a:	b29b      	uxth	r3, r3
 800821c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008224:	b29a      	uxth	r2, r3
 8008226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800822a:	801a      	strh	r2, [r3, #0]
 800822c:	e064      	b.n	80082f8 <USB_EPStartXfer+0x1482>
 800822e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008232:	2b00      	cmp	r3, #0
 8008234:	d116      	bne.n	8008264 <USB_EPStartXfer+0x13ee>
 8008236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008242:	b29a      	uxth	r2, r3
 8008244:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008248:	801a      	strh	r2, [r3, #0]
 800824a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	b29b      	uxth	r3, r3
 8008252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800825a:	b29a      	uxth	r2, r3
 800825c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008260:	801a      	strh	r2, [r3, #0]
 8008262:	e049      	b.n	80082f8 <USB_EPStartXfer+0x1482>
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008268:	085b      	lsrs	r3, r3, #1
 800826a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800826e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d004      	beq.n	8008284 <USB_EPStartXfer+0x140e>
 800827a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800827e:	3301      	adds	r3, #1
 8008280:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008288:	b29b      	uxth	r3, r3
 800828a:	029b      	lsls	r3, r3, #10
 800828c:	b29a      	uxth	r2, r3
 800828e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008292:	801a      	strh	r2, [r3, #0]
 8008294:	e030      	b.n	80082f8 <USB_EPStartXfer+0x1482>
 8008296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d128      	bne.n	80082f8 <USB_EPStartXfer+0x1482>
 80082a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	461a      	mov	r2, r3
 80082c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082ca:	4413      	add	r3, r2
 80082cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	00da      	lsls	r2, r3, #3
 80082de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082e2:	4413      	add	r3, r2
 80082e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	785b      	ldrb	r3, [r3, #1]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d178      	bne.n	8008408 <USB_EPStartXfer+0x1592>
 8008316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800831a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008328:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008332:	b29b      	uxth	r3, r3
 8008334:	461a      	mov	r2, r3
 8008336:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800833a:	4413      	add	r3, r2
 800833c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	00da      	lsls	r2, r3, #3
 800834e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008352:	4413      	add	r3, r2
 8008354:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800835c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008360:	2b3e      	cmp	r3, #62	; 0x3e
 8008362:	d91d      	bls.n	80083a0 <USB_EPStartXfer+0x152a>
 8008364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800836e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008372:	f003 031f 	and.w	r3, r3, #31
 8008376:	2b00      	cmp	r3, #0
 8008378:	d104      	bne.n	8008384 <USB_EPStartXfer+0x150e>
 800837a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800837e:	3b01      	subs	r3, #1
 8008380:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008388:	b29b      	uxth	r3, r3
 800838a:	029b      	lsls	r3, r3, #10
 800838c:	b29b      	uxth	r3, r3
 800838e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008396:	b29a      	uxth	r2, r3
 8008398:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	e060      	b.n	8008462 <USB_EPStartXfer+0x15ec>
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d116      	bne.n	80083d6 <USB_EPStartXfer+0x1560>
 80083a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083ba:	801a      	strh	r2, [r3, #0]
 80083bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083d2:	801a      	strh	r2, [r3, #0]
 80083d4:	e045      	b.n	8008462 <USB_EPStartXfer+0x15ec>
 80083d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083da:	085b      	lsrs	r3, r3, #1
 80083dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d004      	beq.n	80083f6 <USB_EPStartXfer+0x1580>
 80083ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083f0:	3301      	adds	r3, #1
 80083f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	029b      	lsls	r3, r3, #10
 80083fe:	b29a      	uxth	r2, r3
 8008400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008404:	801a      	strh	r2, [r3, #0]
 8008406:	e02c      	b.n	8008462 <USB_EPStartXfer+0x15ec>
 8008408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800840c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	785b      	ldrb	r3, [r3, #1]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d124      	bne.n	8008462 <USB_EPStartXfer+0x15ec>
 8008418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008426:	b29b      	uxth	r3, r3
 8008428:	461a      	mov	r2, r3
 800842a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800842e:	4413      	add	r3, r2
 8008430:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	00da      	lsls	r2, r3, #3
 8008442:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008446:	4413      	add	r3, r2
 8008448:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800844c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008454:	b29a      	uxth	r2, r3
 8008456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800845a:	801a      	strh	r2, [r3, #0]
 800845c:	e001      	b.n	8008462 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e03a      	b.n	80084d8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008466:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008488:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800848c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008490:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008494:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008498:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800849c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80084a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	441a      	add	r2, r3
 80084be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80084c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b085      	sub	sp, #20
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d020      	beq.n	8008536 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800850a:	81bb      	strh	r3, [r7, #12]
 800850c:	89bb      	ldrh	r3, [r7, #12]
 800850e:	f083 0310 	eor.w	r3, r3, #16
 8008512:	81bb      	strh	r3, [r7, #12]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	441a      	add	r2, r3
 800851e:	89bb      	ldrh	r3, [r7, #12]
 8008520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800852c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008530:	b29b      	uxth	r3, r3
 8008532:	8013      	strh	r3, [r2, #0]
 8008534:	e01f      	b.n	8008576 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29b      	uxth	r3, r3
 8008544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854c:	81fb      	strh	r3, [r7, #14]
 800854e:	89fb      	ldrh	r3, [r7, #14]
 8008550:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008554:	81fb      	strh	r3, [r7, #14]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	441a      	add	r2, r3
 8008560:	89fb      	ldrh	r3, [r7, #14]
 8008562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800856a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800856e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008572:	b29b      	uxth	r3, r3
 8008574:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	7b1b      	ldrb	r3, [r3, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f040 809d 	bne.w	80086d2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d04c      	beq.n	800863a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	823b      	strh	r3, [r7, #16]
 80085ae:	8a3b      	ldrh	r3, [r7, #16]
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01b      	beq.n	80085f0 <USB_EPClearStall+0x6c>
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ce:	81fb      	strh	r3, [r7, #14]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	441a      	add	r2, r3
 80085da:	89fb      	ldrh	r3, [r7, #14]
 80085dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	78db      	ldrb	r3, [r3, #3]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d06c      	beq.n	80086d2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	b29b      	uxth	r3, r3
 8008606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800860a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800860e:	81bb      	strh	r3, [r7, #12]
 8008610:	89bb      	ldrh	r3, [r7, #12]
 8008612:	f083 0320 	eor.w	r3, r3, #32
 8008616:	81bb      	strh	r3, [r7, #12]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	441a      	add	r2, r3
 8008622:	89bb      	ldrh	r3, [r7, #12]
 8008624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800862c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008634:	b29b      	uxth	r3, r3
 8008636:	8013      	strh	r3, [r2, #0]
 8008638:	e04b      	b.n	80086d2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	82fb      	strh	r3, [r7, #22]
 8008648:	8afb      	ldrh	r3, [r7, #22]
 800864a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01b      	beq.n	800868a <USB_EPClearStall+0x106>
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008668:	82bb      	strh	r3, [r7, #20]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	441a      	add	r2, r3
 8008674:	8abb      	ldrh	r3, [r7, #20]
 8008676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800867a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800867e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008686:	b29b      	uxth	r3, r3
 8008688:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800869c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a0:	827b      	strh	r3, [r7, #18]
 80086a2:	8a7b      	ldrh	r3, [r7, #18]
 80086a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086a8:	827b      	strh	r3, [r7, #18]
 80086aa:	8a7b      	ldrh	r3, [r7, #18]
 80086ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086b0:	827b      	strh	r3, [r7, #18]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	441a      	add	r2, r3
 80086bc:	8a7b      	ldrh	r3, [r7, #18]
 80086be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d103      	bne.n	80086fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2280      	movs	r2, #128	; 0x80
 80086f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008716:	b29b      	uxth	r3, r3
 8008718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800871c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008720:	b29a      	uxth	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008736:	b480      	push	{r7}
 8008738:	b085      	sub	sp, #20
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008744:	b29b      	uxth	r3, r3
 8008746:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008748:	68fb      	ldr	r3, [r7, #12]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008756:	b480      	push	{r7}
 8008758:	b08d      	sub	sp, #52	; 0x34
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	4611      	mov	r1, r2
 8008762:	461a      	mov	r2, r3
 8008764:	460b      	mov	r3, r1
 8008766:	80fb      	strh	r3, [r7, #6]
 8008768:	4613      	mov	r3, r2
 800876a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800876c:	88bb      	ldrh	r3, [r7, #4]
 800876e:	3301      	adds	r3, #1
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800877c:	88fa      	ldrh	r2, [r7, #6]
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008786:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800878c:	e01b      	b.n	80087c6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	3301      	adds	r3, #1
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	3302      	adds	r3, #2
 80087b8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	3301      	adds	r3, #1
 80087be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80087c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c2:	3b01      	subs	r3, #1
 80087c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e0      	bne.n	800878e <USB_WritePMA+0x38>
  }
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	3734      	adds	r7, #52	; 0x34
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087da:	b480      	push	{r7}
 80087dc:	b08b      	sub	sp, #44	; 0x2c
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	4611      	mov	r1, r2
 80087e6:	461a      	mov	r2, r3
 80087e8:	460b      	mov	r3, r1
 80087ea:	80fb      	strh	r3, [r7, #6]
 80087ec:	4613      	mov	r3, r2
 80087ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087f0:	88bb      	ldrh	r3, [r7, #4]
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008800:	88fa      	ldrh	r2, [r7, #6]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800880a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	627b      	str	r3, [r7, #36]	; 0x24
 8008810:	e018      	b.n	8008844 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	b29b      	uxth	r3, r3
 8008818:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	3302      	adds	r3, #2
 800881e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	b2da      	uxtb	r2, r3
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	3301      	adds	r3, #1
 800882c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	0a1b      	lsrs	r3, r3, #8
 8008832:	b2da      	uxtb	r2, r3
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	3301      	adds	r3, #1
 800883c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	3b01      	subs	r3, #1
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1e3      	bne.n	8008812 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800884a:	88bb      	ldrh	r3, [r7, #4]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	b29b      	uxth	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d007      	beq.n	8008866 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	b29b      	uxth	r3, r3
 800885c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	b2da      	uxtb	r2, r3
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	701a      	strb	r2, [r3, #0]
  }
}
 8008866:	bf00      	nop
 8008868:	372c      	adds	r7, #44	; 0x2c
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800887e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008882:	f002 f8a7 	bl	800a9d4 <USBD_static_malloc>
 8008886:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d105      	bne.n	800889a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008896:	2302      	movs	r3, #2
 8008898:	e066      	b.n	8008968 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	7c1b      	ldrb	r3, [r3, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d119      	bne.n	80088de <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ae:	2202      	movs	r2, #2
 80088b0:	2181      	movs	r1, #129	; 0x81
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 ff33 	bl	800a71e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088c2:	2202      	movs	r2, #2
 80088c4:	2101      	movs	r1, #1
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 ff29 	bl	800a71e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2210      	movs	r2, #16
 80088d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80088dc:	e016      	b.n	800890c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088de:	2340      	movs	r3, #64	; 0x40
 80088e0:	2202      	movs	r2, #2
 80088e2:	2181      	movs	r1, #129	; 0x81
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 ff1a 	bl	800a71e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088f0:	2340      	movs	r3, #64	; 0x40
 80088f2:	2202      	movs	r2, #2
 80088f4:	2101      	movs	r1, #1
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 ff11 	bl	800a71e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2210      	movs	r2, #16
 8008908:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800890c:	2308      	movs	r3, #8
 800890e:	2203      	movs	r2, #3
 8008910:	2182      	movs	r1, #130	; 0x82
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f001 ff03 	bl	800a71e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	7c1b      	ldrb	r3, [r3, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d109      	bne.n	8008956 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800894c:	2101      	movs	r1, #1
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 ffd5 	bl	800a8fe <USBD_LL_PrepareReceive>
 8008954:	e007      	b.n	8008966 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800895c:	2340      	movs	r3, #64	; 0x40
 800895e:	2101      	movs	r1, #1
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 ffcc 	bl	800a8fe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	460b      	mov	r3, r1
 800897a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800897c:	2181      	movs	r1, #129	; 0x81
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 fef3 	bl	800a76a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800898a:	2101      	movs	r1, #1
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 feec 	bl	800a76a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800899a:	2182      	movs	r1, #130	; 0x82
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 fee4 	bl	800a76a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00e      	beq.n	80089da <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089cc:	4618      	mov	r0, r3
 80089ce:	f002 f80f 	bl	800a9f0 <USBD_static_free>
    pdev->pClassData = NULL;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e0af      	b.n	8008b6c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d03f      	beq.n	8008a98 <USBD_CDC_Setup+0xb4>
 8008a18:	2b20      	cmp	r3, #32
 8008a1a:	f040 809f 	bne.w	8008b5c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	88db      	ldrh	r3, [r3, #6]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d02e      	beq.n	8008a84 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	b25b      	sxtb	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	da16      	bge.n	8008a5e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008a3c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	88d2      	ldrh	r2, [r2, #6]
 8008a42:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	88db      	ldrh	r3, [r3, #6]
 8008a48:	2b07      	cmp	r3, #7
 8008a4a:	bf28      	it	cs
 8008a4c:	2307      	movcs	r3, #7
 8008a4e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	89fa      	ldrh	r2, [r7, #14]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 fa9f 	bl	8009f9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008a5c:	e085      	b.n	8008b6a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	785a      	ldrb	r2, [r3, #1]
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	88db      	ldrh	r3, [r3, #6]
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a74:	6939      	ldr	r1, [r7, #16]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	88db      	ldrh	r3, [r3, #6]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 fab8 	bl	8009ff2 <USBD_CtlPrepareRx>
      break;
 8008a82:	e072      	b.n	8008b6a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	7850      	ldrb	r0, [r2, #1]
 8008a90:	2200      	movs	r2, #0
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	4798      	blx	r3
      break;
 8008a96:	e068      	b.n	8008b6a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	785b      	ldrb	r3, [r3, #1]
 8008a9c:	2b0b      	cmp	r3, #11
 8008a9e:	d852      	bhi.n	8008b46 <USBD_CDC_Setup+0x162>
 8008aa0:	a201      	add	r2, pc, #4	; (adr r2, 8008aa8 <USBD_CDC_Setup+0xc4>)
 8008aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa6:	bf00      	nop
 8008aa8:	08008ad9 	.word	0x08008ad9
 8008aac:	08008b55 	.word	0x08008b55
 8008ab0:	08008b47 	.word	0x08008b47
 8008ab4:	08008b47 	.word	0x08008b47
 8008ab8:	08008b47 	.word	0x08008b47
 8008abc:	08008b47 	.word	0x08008b47
 8008ac0:	08008b47 	.word	0x08008b47
 8008ac4:	08008b47 	.word	0x08008b47
 8008ac8:	08008b47 	.word	0x08008b47
 8008acc:	08008b47 	.word	0x08008b47
 8008ad0:	08008b03 	.word	0x08008b03
 8008ad4:	08008b2d 	.word	0x08008b2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d107      	bne.n	8008af4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ae4:	f107 030a 	add.w	r3, r7, #10
 8008ae8:	2202      	movs	r2, #2
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f001 fa54 	bl	8009f9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008af2:	e032      	b.n	8008b5a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f001 f9de 	bl	8009eb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008afc:	2303      	movs	r3, #3
 8008afe:	75fb      	strb	r3, [r7, #23]
          break;
 8008b00:	e02b      	b.n	8008b5a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d107      	bne.n	8008b1e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b0e:	f107 030d 	add.w	r3, r7, #13
 8008b12:	2201      	movs	r2, #1
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 fa3f 	bl	8009f9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b1c:	e01d      	b.n	8008b5a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 f9c9 	bl	8009eb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b26:	2303      	movs	r3, #3
 8008b28:	75fb      	strb	r3, [r7, #23]
          break;
 8008b2a:	e016      	b.n	8008b5a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d00f      	beq.n	8008b58 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f9bc 	bl	8009eb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b40:	2303      	movs	r3, #3
 8008b42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b44:	e008      	b.n	8008b58 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f001 f9b5 	bl	8009eb8 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	75fb      	strb	r3, [r7, #23]
          break;
 8008b52:	e002      	b.n	8008b5a <USBD_CDC_Setup+0x176>
          break;
 8008b54:	bf00      	nop
 8008b56:	e008      	b.n	8008b6a <USBD_CDC_Setup+0x186>
          break;
 8008b58:	bf00      	nop
      }
      break;
 8008b5a:	e006      	b.n	8008b6a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f001 f9aa 	bl	8009eb8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b64:	2303      	movs	r3, #3
 8008b66:	75fb      	strb	r3, [r7, #23]
      break;
 8008b68:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e04f      	b.n	8008c36 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	3318      	adds	r3, #24
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d029      	beq.n	8008c08 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008bb4:	78fa      	ldrb	r2, [r7, #3]
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	3318      	adds	r3, #24
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	78f9      	ldrb	r1, [r7, #3]
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	440b      	add	r3, r1
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	4403      	add	r3, r0
 8008bd4:	3338      	adds	r3, #56	; 0x38
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bdc:	fb01 f303 	mul.w	r3, r1, r3
 8008be0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d110      	bne.n	8008c08 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008be6:	78fa      	ldrb	r2, [r7, #3]
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	4613      	mov	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	440b      	add	r3, r1
 8008bf4:	3318      	adds	r3, #24
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bfa:	78f9      	ldrb	r1, [r7, #3]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	2200      	movs	r2, #0
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 fe5b 	bl	800a8bc <USBD_LL_Transmit>
 8008c06:	e015      	b.n	8008c34 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00b      	beq.n	8008c34 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008c30:	78fa      	ldrb	r2, [r7, #3]
 8008c32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e015      	b.n	8008c8c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 fe6b 	bl	800a940 <USBD_LL_GetRxDataSize>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c86:	4611      	mov	r1, r2
 8008c88:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ca2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e01b      	b.n	8008ce6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d015      	beq.n	8008ce4 <USBD_CDC_EP0_RxReady+0x50>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008cbe:	2bff      	cmp	r3, #255	; 0xff
 8008cc0:	d010      	beq.n	8008ce4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008cd0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cd8:	b292      	uxth	r2, r2
 8008cda:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	22ff      	movs	r2, #255	; 0xff
 8008ce0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2243      	movs	r2, #67	; 0x43
 8008cfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008cfe:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	20000094 	.word	0x20000094

08008d10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2243      	movs	r2, #67	; 0x43
 8008d1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008d1e:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	20000050 	.word	0x20000050

08008d30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2243      	movs	r2, #67	; 0x43
 8008d3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008d3e:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	200000d8 	.word	0x200000d8

08008d50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	220a      	movs	r2, #10
 8008d5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d5e:	4b03      	ldr	r3, [pc, #12]	; (8008d6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	2000000c 	.word	0x2000000c

08008d70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e004      	b.n	8008d8e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b087      	sub	sp, #28
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e008      	b.n	8008dca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	371c      	adds	r7, #28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b085      	sub	sp, #20
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008de6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e004      	b.n	8008dfc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d101      	bne.n	8008e26 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e016      	b.n	8008e54 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	7c1b      	ldrb	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d109      	bne.n	8008e42 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e38:	2101      	movs	r1, #1
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 fd5f 	bl	800a8fe <USBD_LL_PrepareReceive>
 8008e40:	e007      	b.n	8008e52 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e48:	2340      	movs	r3, #64	; 0x40
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f001 fd56 	bl	800a8fe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	4613      	mov	r3, r2
 8008e68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e01f      	b.n	8008eb4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	79fa      	ldrb	r2, [r7, #7]
 8008ea6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f001 fbbd 	bl	800a628 <USBD_LL_Init>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3718      	adds	r7, #24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e016      	b.n	8008f02 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00b      	beq.n	8008f00 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	f107 020e 	add.w	r2, r7, #14
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4798      	blx	r3
 8008ef8:	4602      	mov	r2, r0
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 fbe8 	bl	800a6e8 <USBD_LL_Start>
 8008f18:	4603      	mov	r3, r0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b083      	sub	sp, #12
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	460b      	mov	r3, r1
 8008f42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f44:	2303      	movs	r3, #3
 8008f46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d009      	beq.n	8008f66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	4798      	blx	r3
 8008f62:	4603      	mov	r3, r0
 8008f64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d007      	beq.n	8008f96 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	4611      	mov	r1, r2
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
  }

  return USBD_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 ff46 	bl	8009e44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fd4:	f003 031f 	and.w	r3, r3, #31
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d01a      	beq.n	8009012 <USBD_LL_SetupStage+0x72>
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d822      	bhi.n	8009026 <USBD_LL_SetupStage+0x86>
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <USBD_LL_SetupStage+0x4a>
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d00a      	beq.n	8008ffe <USBD_LL_SetupStage+0x5e>
 8008fe8:	e01d      	b.n	8009026 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f9ee 	bl	80093d4 <USBD_StdDevReq>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffc:	e020      	b.n	8009040 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa52 	bl	80094b0 <USBD_StdItfReq>
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
      break;
 8009010:	e016      	b.n	8009040 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fa91 	bl	8009542 <USBD_StdEPReq>
 8009020:	4603      	mov	r3, r0
 8009022:	73fb      	strb	r3, [r7, #15]
      break;
 8009024:	e00c      	b.n	8009040 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800902c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009030:	b2db      	uxtb	r3, r3
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f001 fbb7 	bl	800a7a8 <USBD_LL_StallEP>
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]
      break;
 800903e:	bf00      	nop
  }

  return ret;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b086      	sub	sp, #24
 800904e:	af00      	add	r7, sp, #0
 8009050:	60f8      	str	r0, [r7, #12]
 8009052:	460b      	mov	r3, r1
 8009054:	607a      	str	r2, [r7, #4]
 8009056:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d138      	bne.n	80090d0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009064:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800906c:	2b03      	cmp	r3, #3
 800906e:	d14a      	bne.n	8009106 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	429a      	cmp	r2, r3
 800907a:	d913      	bls.n	80090a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	1ad2      	subs	r2, r2, r3
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	4293      	cmp	r3, r2
 8009094:	bf28      	it	cs
 8009096:	4613      	movcs	r3, r2
 8009098:	461a      	mov	r2, r3
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 ffc5 	bl	800a02c <USBD_CtlContinueRx>
 80090a2:	e030      	b.n	8009106 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d10b      	bne.n	80090c8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 ffc0 	bl	800a04e <USBD_CtlSendStatus>
 80090ce:	e01a      	b.n	8009106 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d114      	bne.n	8009106 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00e      	beq.n	8009106 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	7afa      	ldrb	r2, [r7, #11]
 80090f2:	4611      	mov	r1, r2
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	4798      	blx	r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	e000      	b.n	8009108 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	460b      	mov	r3, r1
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800911e:	7afb      	ldrb	r3, [r7, #11]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d16b      	bne.n	80091fc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3314      	adds	r3, #20
 8009128:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009130:	2b02      	cmp	r3, #2
 8009132:	d156      	bne.n	80091e2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	689a      	ldr	r2, [r3, #8]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	429a      	cmp	r2, r3
 800913e:	d914      	bls.n	800916a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	1ad2      	subs	r2, r2, r3
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	461a      	mov	r2, r3
 8009154:	6879      	ldr	r1, [r7, #4]
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 ff3a 	bl	8009fd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800915c:	2300      	movs	r3, #0
 800915e:	2200      	movs	r2, #0
 8009160:	2100      	movs	r1, #0
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f001 fbcb 	bl	800a8fe <USBD_LL_PrepareReceive>
 8009168:	e03b      	b.n	80091e2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	429a      	cmp	r2, r3
 8009174:	d11c      	bne.n	80091b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800917e:	429a      	cmp	r2, r3
 8009180:	d316      	bcc.n	80091b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800918c:	429a      	cmp	r2, r3
 800918e:	d20f      	bcs.n	80091b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009190:	2200      	movs	r2, #0
 8009192:	2100      	movs	r1, #0
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 ff1b 	bl	8009fd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091a2:	2300      	movs	r3, #0
 80091a4:	2200      	movs	r2, #0
 80091a6:	2100      	movs	r1, #0
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f001 fba8 	bl	800a8fe <USBD_LL_PrepareReceive>
 80091ae:	e018      	b.n	80091e2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d10b      	bne.n	80091d4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d005      	beq.n	80091d4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80091d4:	2180      	movs	r1, #128	; 0x80
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f001 fae6 	bl	800a7a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 ff49 	bl	800a074 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d122      	bne.n	8009232 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f7ff fe98 	bl	8008f22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80091fa:	e01a      	b.n	8009232 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009202:	b2db      	uxtb	r3, r3
 8009204:	2b03      	cmp	r3, #3
 8009206:	d114      	bne.n	8009232 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00e      	beq.n	8009232 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	7afa      	ldrb	r2, [r7, #11]
 800921e:	4611      	mov	r1, r2
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	4798      	blx	r3
 8009224:	4603      	mov	r3, r0
 8009226:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	e000      	b.n	8009234 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800926c:	2303      	movs	r3, #3
 800926e:	e02f      	b.n	80092d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00f      	beq.n	800929a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d009      	beq.n	800929a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	6852      	ldr	r2, [r2, #4]
 8009292:	b2d2      	uxtb	r2, r2
 8009294:	4611      	mov	r1, r2
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800929a:	2340      	movs	r3, #64	; 0x40
 800929c:	2200      	movs	r2, #0
 800929e:	2100      	movs	r1, #0
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 fa3c 	bl	800a71e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2240      	movs	r2, #64	; 0x40
 80092b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092b6:	2340      	movs	r3, #64	; 0x40
 80092b8:	2200      	movs	r2, #0
 80092ba:	2180      	movs	r1, #128	; 0x80
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 fa2e 	bl	800a71e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2240      	movs	r2, #64	; 0x40
 80092cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	78fa      	ldrb	r2, [r7, #3]
 80092e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009306:	b2da      	uxtb	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2204      	movs	r2, #4
 8009312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b04      	cmp	r3, #4
 8009336:	d106      	bne.n	8009346 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800933e:	b2da      	uxtb	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009366:	2303      	movs	r3, #3
 8009368:	e012      	b.n	8009390 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b03      	cmp	r3, #3
 8009374:	d10b      	bne.n	800938e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d005      	beq.n	800938e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	3301      	adds	r3, #1
 80093ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80093b6:	8a3b      	ldrh	r3, [r7, #16]
 80093b8:	021b      	lsls	r3, r3, #8
 80093ba:	b21a      	sxth	r2, r3
 80093bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	b21b      	sxth	r3, r3
 80093c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093c6:	89fb      	ldrh	r3, [r7, #14]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	371c      	adds	r7, #28
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093ea:	2b40      	cmp	r3, #64	; 0x40
 80093ec:	d005      	beq.n	80093fa <USBD_StdDevReq+0x26>
 80093ee:	2b40      	cmp	r3, #64	; 0x40
 80093f0:	d853      	bhi.n	800949a <USBD_StdDevReq+0xc6>
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00b      	beq.n	800940e <USBD_StdDevReq+0x3a>
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	d14f      	bne.n	800949a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	4798      	blx	r3
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]
      break;
 800940c:	e04a      	b.n	80094a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	785b      	ldrb	r3, [r3, #1]
 8009412:	2b09      	cmp	r3, #9
 8009414:	d83b      	bhi.n	800948e <USBD_StdDevReq+0xba>
 8009416:	a201      	add	r2, pc, #4	; (adr r2, 800941c <USBD_StdDevReq+0x48>)
 8009418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941c:	08009471 	.word	0x08009471
 8009420:	08009485 	.word	0x08009485
 8009424:	0800948f 	.word	0x0800948f
 8009428:	0800947b 	.word	0x0800947b
 800942c:	0800948f 	.word	0x0800948f
 8009430:	0800944f 	.word	0x0800944f
 8009434:	08009445 	.word	0x08009445
 8009438:	0800948f 	.word	0x0800948f
 800943c:	08009467 	.word	0x08009467
 8009440:	08009459 	.word	0x08009459
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f9de 	bl	8009808 <USBD_GetDescriptor>
          break;
 800944c:	e024      	b.n	8009498 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fb6d 	bl	8009b30 <USBD_SetAddress>
          break;
 8009456:	e01f      	b.n	8009498 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fbac 	bl	8009bb8 <USBD_SetConfig>
 8009460:	4603      	mov	r3, r0
 8009462:	73fb      	strb	r3, [r7, #15]
          break;
 8009464:	e018      	b.n	8009498 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fc4b 	bl	8009d04 <USBD_GetConfig>
          break;
 800946e:	e013      	b.n	8009498 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fc7c 	bl	8009d70 <USBD_GetStatus>
          break;
 8009478:	e00e      	b.n	8009498 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fcab 	bl	8009dd8 <USBD_SetFeature>
          break;
 8009482:	e009      	b.n	8009498 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fcba 	bl	8009e00 <USBD_ClrFeature>
          break;
 800948c:	e004      	b.n	8009498 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fd11 	bl	8009eb8 <USBD_CtlError>
          break;
 8009496:	bf00      	nop
      }
      break;
 8009498:	e004      	b.n	80094a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fd0b 	bl	8009eb8 <USBD_CtlError>
      break;
 80094a2:	bf00      	nop
  }

  return ret;
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop

080094b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094c6:	2b40      	cmp	r3, #64	; 0x40
 80094c8:	d005      	beq.n	80094d6 <USBD_StdItfReq+0x26>
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d82f      	bhi.n	800952e <USBD_StdItfReq+0x7e>
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <USBD_StdItfReq+0x26>
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	d12b      	bne.n	800952e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d81d      	bhi.n	8009520 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	889b      	ldrh	r3, [r3, #4]
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d813      	bhi.n	8009516 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	4798      	blx	r3
 80094fc:	4603      	mov	r3, r0
 80094fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	88db      	ldrh	r3, [r3, #6]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d110      	bne.n	800952a <USBD_StdItfReq+0x7a>
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10d      	bne.n	800952a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fd9d 	bl	800a04e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009514:	e009      	b.n	800952a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fccd 	bl	8009eb8 <USBD_CtlError>
          break;
 800951e:	e004      	b.n	800952a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fcc8 	bl	8009eb8 <USBD_CtlError>
          break;
 8009528:	e000      	b.n	800952c <USBD_StdItfReq+0x7c>
          break;
 800952a:	bf00      	nop
      }
      break;
 800952c:	e004      	b.n	8009538 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fcc1 	bl	8009eb8 <USBD_CtlError>
      break;
 8009536:	bf00      	nop
  }

  return ret;
 8009538:	7bfb      	ldrb	r3, [r7, #15]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	889b      	ldrh	r3, [r3, #4]
 8009554:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800955e:	2b40      	cmp	r3, #64	; 0x40
 8009560:	d007      	beq.n	8009572 <USBD_StdEPReq+0x30>
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	f200 8145 	bhi.w	80097f2 <USBD_StdEPReq+0x2b0>
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00c      	beq.n	8009586 <USBD_StdEPReq+0x44>
 800956c:	2b20      	cmp	r3, #32
 800956e:	f040 8140 	bne.w	80097f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	4798      	blx	r3
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]
      break;
 8009584:	e13a      	b.n	80097fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	785b      	ldrb	r3, [r3, #1]
 800958a:	2b03      	cmp	r3, #3
 800958c:	d007      	beq.n	800959e <USBD_StdEPReq+0x5c>
 800958e:	2b03      	cmp	r3, #3
 8009590:	f300 8129 	bgt.w	80097e6 <USBD_StdEPReq+0x2a4>
 8009594:	2b00      	cmp	r3, #0
 8009596:	d07f      	beq.n	8009698 <USBD_StdEPReq+0x156>
 8009598:	2b01      	cmp	r3, #1
 800959a:	d03c      	beq.n	8009616 <USBD_StdEPReq+0xd4>
 800959c:	e123      	b.n	80097e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d002      	beq.n	80095b0 <USBD_StdEPReq+0x6e>
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d016      	beq.n	80095dc <USBD_StdEPReq+0x9a>
 80095ae:	e02c      	b.n	800960a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095b0:	7bbb      	ldrb	r3, [r7, #14]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00d      	beq.n	80095d2 <USBD_StdEPReq+0x90>
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	2b80      	cmp	r3, #128	; 0x80
 80095ba:	d00a      	beq.n	80095d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 f8f1 	bl	800a7a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095c6:	2180      	movs	r1, #128	; 0x80
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f001 f8ed 	bl	800a7a8 <USBD_LL_StallEP>
 80095ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095d0:	e020      	b.n	8009614 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fc6f 	bl	8009eb8 <USBD_CtlError>
              break;
 80095da:	e01b      	b.n	8009614 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	885b      	ldrh	r3, [r3, #2]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10e      	bne.n	8009602 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <USBD_StdEPReq+0xc0>
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	2b80      	cmp	r3, #128	; 0x80
 80095ee:	d008      	beq.n	8009602 <USBD_StdEPReq+0xc0>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	88db      	ldrh	r3, [r3, #6]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d104      	bne.n	8009602 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f001 f8d3 	bl	800a7a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fd23 	bl	800a04e <USBD_CtlSendStatus>

              break;
 8009608:	e004      	b.n	8009614 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fc53 	bl	8009eb8 <USBD_CtlError>
              break;
 8009612:	bf00      	nop
          }
          break;
 8009614:	e0ec      	b.n	80097f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b02      	cmp	r3, #2
 8009620:	d002      	beq.n	8009628 <USBD_StdEPReq+0xe6>
 8009622:	2b03      	cmp	r3, #3
 8009624:	d016      	beq.n	8009654 <USBD_StdEPReq+0x112>
 8009626:	e030      	b.n	800968a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00d      	beq.n	800964a <USBD_StdEPReq+0x108>
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	2b80      	cmp	r3, #128	; 0x80
 8009632:	d00a      	beq.n	800964a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f001 f8b5 	bl	800a7a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800963e:	2180      	movs	r1, #128	; 0x80
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f001 f8b1 	bl	800a7a8 <USBD_LL_StallEP>
 8009646:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009648:	e025      	b.n	8009696 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fc33 	bl	8009eb8 <USBD_CtlError>
              break;
 8009652:	e020      	b.n	8009696 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	885b      	ldrh	r3, [r3, #2]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d11b      	bne.n	8009694 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800965c:	7bbb      	ldrb	r3, [r7, #14]
 800965e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009662:	2b00      	cmp	r3, #0
 8009664:	d004      	beq.n	8009670 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f001 f8bb 	bl	800a7e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fcec 	bl	800a04e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	4798      	blx	r3
 8009684:	4603      	mov	r3, r0
 8009686:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009688:	e004      	b.n	8009694 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fc13 	bl	8009eb8 <USBD_CtlError>
              break;
 8009692:	e000      	b.n	8009696 <USBD_StdEPReq+0x154>
              break;
 8009694:	bf00      	nop
          }
          break;
 8009696:	e0ab      	b.n	80097f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d002      	beq.n	80096aa <USBD_StdEPReq+0x168>
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d032      	beq.n	800970e <USBD_StdEPReq+0x1cc>
 80096a8:	e097      	b.n	80097da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d007      	beq.n	80096c0 <USBD_StdEPReq+0x17e>
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	2b80      	cmp	r3, #128	; 0x80
 80096b4:	d004      	beq.n	80096c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fbfd 	bl	8009eb8 <USBD_CtlError>
                break;
 80096be:	e091      	b.n	80097e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	da0b      	bge.n	80096e0 <USBD_StdEPReq+0x19e>
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
 80096ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	3310      	adds	r3, #16
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	4413      	add	r3, r2
 80096dc:	3304      	adds	r3, #4
 80096de:	e00b      	b.n	80096f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096e0:	7bbb      	ldrb	r3, [r7, #14]
 80096e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096e6:	4613      	mov	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	4413      	add	r3, r2
 80096f6:	3304      	adds	r3, #4
 80096f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2200      	movs	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2202      	movs	r2, #2
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fc47 	bl	8009f9a <USBD_CtlSendData>
              break;
 800970c:	e06a      	b.n	80097e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800970e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009712:	2b00      	cmp	r3, #0
 8009714:	da11      	bge.n	800973a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	f003 020f 	and.w	r2, r3, #15
 800971c:	6879      	ldr	r1, [r7, #4]
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	440b      	add	r3, r1
 8009728:	3324      	adds	r3, #36	; 0x24
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d117      	bne.n	8009760 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fbc0 	bl	8009eb8 <USBD_CtlError>
                  break;
 8009738:	e054      	b.n	80097e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800973a:	7bbb      	ldrb	r3, [r7, #14]
 800973c:	f003 020f 	and.w	r2, r3, #15
 8009740:	6879      	ldr	r1, [r7, #4]
 8009742:	4613      	mov	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	440b      	add	r3, r1
 800974c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d104      	bne.n	8009760 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fbad 	bl	8009eb8 <USBD_CtlError>
                  break;
 800975e:	e041      	b.n	80097e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009764:	2b00      	cmp	r3, #0
 8009766:	da0b      	bge.n	8009780 <USBD_StdEPReq+0x23e>
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800976e:	4613      	mov	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	3310      	adds	r3, #16
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	4413      	add	r3, r2
 800977c:	3304      	adds	r3, #4
 800977e:	e00b      	b.n	8009798 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009786:	4613      	mov	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	4413      	add	r3, r2
 8009796:	3304      	adds	r3, #4
 8009798:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800979a:	7bbb      	ldrb	r3, [r7, #14]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <USBD_StdEPReq+0x264>
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	2b80      	cmp	r3, #128	; 0x80
 80097a4:	d103      	bne.n	80097ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	e00e      	b.n	80097cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 f836 	bl	800a824 <USBD_LL_IsStallEP>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2201      	movs	r2, #1
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	e002      	b.n	80097cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2202      	movs	r2, #2
 80097d0:	4619      	mov	r1, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fbe1 	bl	8009f9a <USBD_CtlSendData>
              break;
 80097d8:	e004      	b.n	80097e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fb6b 	bl	8009eb8 <USBD_CtlError>
              break;
 80097e2:	bf00      	nop
          }
          break;
 80097e4:	e004      	b.n	80097f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fb65 	bl	8009eb8 <USBD_CtlError>
          break;
 80097ee:	bf00      	nop
      }
      break;
 80097f0:	e004      	b.n	80097fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fb5f 	bl	8009eb8 <USBD_CtlError>
      break;
 80097fa:	bf00      	nop
  }

  return ret;
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009816:	2300      	movs	r3, #0
 8009818:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	885b      	ldrh	r3, [r3, #2]
 8009822:	0a1b      	lsrs	r3, r3, #8
 8009824:	b29b      	uxth	r3, r3
 8009826:	3b01      	subs	r3, #1
 8009828:	2b0e      	cmp	r3, #14
 800982a:	f200 8152 	bhi.w	8009ad2 <USBD_GetDescriptor+0x2ca>
 800982e:	a201      	add	r2, pc, #4	; (adr r2, 8009834 <USBD_GetDescriptor+0x2c>)
 8009830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009834:	080098a5 	.word	0x080098a5
 8009838:	080098bd 	.word	0x080098bd
 800983c:	080098fd 	.word	0x080098fd
 8009840:	08009ad3 	.word	0x08009ad3
 8009844:	08009ad3 	.word	0x08009ad3
 8009848:	08009a73 	.word	0x08009a73
 800984c:	08009a9f 	.word	0x08009a9f
 8009850:	08009ad3 	.word	0x08009ad3
 8009854:	08009ad3 	.word	0x08009ad3
 8009858:	08009ad3 	.word	0x08009ad3
 800985c:	08009ad3 	.word	0x08009ad3
 8009860:	08009ad3 	.word	0x08009ad3
 8009864:	08009ad3 	.word	0x08009ad3
 8009868:	08009ad3 	.word	0x08009ad3
 800986c:	08009871 	.word	0x08009871
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00b      	beq.n	8009894 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	7c12      	ldrb	r2, [r2, #16]
 8009888:	f107 0108 	add.w	r1, r7, #8
 800988c:	4610      	mov	r0, r2
 800988e:	4798      	blx	r3
 8009890:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009892:	e126      	b.n	8009ae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fb0e 	bl	8009eb8 <USBD_CtlError>
        err++;
 800989c:	7afb      	ldrb	r3, [r7, #11]
 800989e:	3301      	adds	r3, #1
 80098a0:	72fb      	strb	r3, [r7, #11]
      break;
 80098a2:	e11e      	b.n	8009ae2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	7c12      	ldrb	r2, [r2, #16]
 80098b0:	f107 0108 	add.w	r1, r7, #8
 80098b4:	4610      	mov	r0, r2
 80098b6:	4798      	blx	r3
 80098b8:	60f8      	str	r0, [r7, #12]
      break;
 80098ba:	e112      	b.n	8009ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	7c1b      	ldrb	r3, [r3, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10d      	bne.n	80098e0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098cc:	f107 0208 	add.w	r2, r7, #8
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3301      	adds	r3, #1
 80098da:	2202      	movs	r2, #2
 80098dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098de:	e100      	b.n	8009ae2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	f107 0208 	add.w	r2, r7, #8
 80098ec:	4610      	mov	r0, r2
 80098ee:	4798      	blx	r3
 80098f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3301      	adds	r3, #1
 80098f6:	2202      	movs	r2, #2
 80098f8:	701a      	strb	r2, [r3, #0]
      break;
 80098fa:	e0f2      	b.n	8009ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	885b      	ldrh	r3, [r3, #2]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b05      	cmp	r3, #5
 8009904:	f200 80ac 	bhi.w	8009a60 <USBD_GetDescriptor+0x258>
 8009908:	a201      	add	r2, pc, #4	; (adr r2, 8009910 <USBD_GetDescriptor+0x108>)
 800990a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990e:	bf00      	nop
 8009910:	08009929 	.word	0x08009929
 8009914:	0800995d 	.word	0x0800995d
 8009918:	08009991 	.word	0x08009991
 800991c:	080099c5 	.word	0x080099c5
 8009920:	080099f9 	.word	0x080099f9
 8009924:	08009a2d 	.word	0x08009a2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	7c12      	ldrb	r2, [r2, #16]
 8009940:	f107 0108 	add.w	r1, r7, #8
 8009944:	4610      	mov	r0, r2
 8009946:	4798      	blx	r3
 8009948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800994a:	e091      	b.n	8009a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fab2 	bl	8009eb8 <USBD_CtlError>
            err++;
 8009954:	7afb      	ldrb	r3, [r7, #11]
 8009956:	3301      	adds	r3, #1
 8009958:	72fb      	strb	r3, [r7, #11]
          break;
 800995a:	e089      	b.n	8009a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00b      	beq.n	8009980 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	7c12      	ldrb	r2, [r2, #16]
 8009974:	f107 0108 	add.w	r1, r7, #8
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800997e:	e077      	b.n	8009a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fa98 	bl	8009eb8 <USBD_CtlError>
            err++;
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	3301      	adds	r3, #1
 800998c:	72fb      	strb	r3, [r7, #11]
          break;
 800998e:	e06f      	b.n	8009a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00b      	beq.n	80099b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	7c12      	ldrb	r2, [r2, #16]
 80099a8:	f107 0108 	add.w	r1, r7, #8
 80099ac:	4610      	mov	r0, r2
 80099ae:	4798      	blx	r3
 80099b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099b2:	e05d      	b.n	8009a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fa7e 	bl	8009eb8 <USBD_CtlError>
            err++;
 80099bc:	7afb      	ldrb	r3, [r7, #11]
 80099be:	3301      	adds	r3, #1
 80099c0:	72fb      	strb	r3, [r7, #11]
          break;
 80099c2:	e055      	b.n	8009a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00b      	beq.n	80099e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	7c12      	ldrb	r2, [r2, #16]
 80099dc:	f107 0108 	add.w	r1, r7, #8
 80099e0:	4610      	mov	r0, r2
 80099e2:	4798      	blx	r3
 80099e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099e6:	e043      	b.n	8009a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fa64 	bl	8009eb8 <USBD_CtlError>
            err++;
 80099f0:	7afb      	ldrb	r3, [r7, #11]
 80099f2:	3301      	adds	r3, #1
 80099f4:	72fb      	strb	r3, [r7, #11]
          break;
 80099f6:	e03b      	b.n	8009a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00b      	beq.n	8009a1c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	7c12      	ldrb	r2, [r2, #16]
 8009a10:	f107 0108 	add.w	r1, r7, #8
 8009a14:	4610      	mov	r0, r2
 8009a16:	4798      	blx	r3
 8009a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a1a:	e029      	b.n	8009a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fa4a 	bl	8009eb8 <USBD_CtlError>
            err++;
 8009a24:	7afb      	ldrb	r3, [r7, #11]
 8009a26:	3301      	adds	r3, #1
 8009a28:	72fb      	strb	r3, [r7, #11]
          break;
 8009a2a:	e021      	b.n	8009a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	7c12      	ldrb	r2, [r2, #16]
 8009a44:	f107 0108 	add.w	r1, r7, #8
 8009a48:	4610      	mov	r0, r2
 8009a4a:	4798      	blx	r3
 8009a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a4e:	e00f      	b.n	8009a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fa30 	bl	8009eb8 <USBD_CtlError>
            err++;
 8009a58:	7afb      	ldrb	r3, [r7, #11]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a5e:	e007      	b.n	8009a70 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa28 	bl	8009eb8 <USBD_CtlError>
          err++;
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009a6e:	bf00      	nop
      }
      break;
 8009a70:	e037      	b.n	8009ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	7c1b      	ldrb	r3, [r3, #16]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d109      	bne.n	8009a8e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a82:	f107 0208 	add.w	r2, r7, #8
 8009a86:	4610      	mov	r0, r2
 8009a88:	4798      	blx	r3
 8009a8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a8c:	e029      	b.n	8009ae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fa11 	bl	8009eb8 <USBD_CtlError>
        err++;
 8009a96:	7afb      	ldrb	r3, [r7, #11]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	72fb      	strb	r3, [r7, #11]
      break;
 8009a9c:	e021      	b.n	8009ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	7c1b      	ldrb	r3, [r3, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10d      	bne.n	8009ac2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aae:	f107 0208 	add.w	r2, r7, #8
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	4798      	blx	r3
 8009ab6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3301      	adds	r3, #1
 8009abc:	2207      	movs	r2, #7
 8009abe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ac0:	e00f      	b.n	8009ae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f9f7 	bl	8009eb8 <USBD_CtlError>
        err++;
 8009aca:	7afb      	ldrb	r3, [r7, #11]
 8009acc:	3301      	adds	r3, #1
 8009ace:	72fb      	strb	r3, [r7, #11]
      break;
 8009ad0:	e007      	b.n	8009ae2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f9ef 	bl	8009eb8 <USBD_CtlError>
      err++;
 8009ada:	7afb      	ldrb	r3, [r7, #11]
 8009adc:	3301      	adds	r3, #1
 8009ade:	72fb      	strb	r3, [r7, #11]
      break;
 8009ae0:	bf00      	nop
  }

  if (err != 0U)
 8009ae2:	7afb      	ldrb	r3, [r7, #11]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d11e      	bne.n	8009b26 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	88db      	ldrh	r3, [r3, #6]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d016      	beq.n	8009b1e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009af0:	893b      	ldrh	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00e      	beq.n	8009b14 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	88da      	ldrh	r2, [r3, #6]
 8009afa:	893b      	ldrh	r3, [r7, #8]
 8009afc:	4293      	cmp	r3, r2
 8009afe:	bf28      	it	cs
 8009b00:	4613      	movcs	r3, r2
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b06:	893b      	ldrh	r3, [r7, #8]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	68f9      	ldr	r1, [r7, #12]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fa44 	bl	8009f9a <USBD_CtlSendData>
 8009b12:	e009      	b.n	8009b28 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f9ce 	bl	8009eb8 <USBD_CtlError>
 8009b1c:	e004      	b.n	8009b28 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fa95 	bl	800a04e <USBD_CtlSendStatus>
 8009b24:	e000      	b.n	8009b28 <USBD_GetDescriptor+0x320>
    return;
 8009b26:	bf00      	nop
  }
}
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop

08009b30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	889b      	ldrh	r3, [r3, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d131      	bne.n	8009ba6 <USBD_SetAddress+0x76>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	88db      	ldrh	r3, [r3, #6]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d12d      	bne.n	8009ba6 <USBD_SetAddress+0x76>
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	885b      	ldrh	r3, [r3, #2]
 8009b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8009b50:	d829      	bhi.n	8009ba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	885b      	ldrh	r3, [r3, #2]
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d104      	bne.n	8009b74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f9a3 	bl	8009eb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b72:	e01d      	b.n	8009bb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	7bfa      	ldrb	r2, [r7, #15]
 8009b78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fe7c 	bl	800a87e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fa61 	bl	800a04e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d004      	beq.n	8009b9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2202      	movs	r2, #2
 8009b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b9a:	e009      	b.n	8009bb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ba4:	e004      	b.n	8009bb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f985 	bl	8009eb8 <USBD_CtlError>
  }
}
 8009bae:	bf00      	nop
 8009bb0:	bf00      	nop
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	885b      	ldrh	r3, [r3, #2]
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	4b4c      	ldr	r3, [pc, #304]	; (8009d00 <USBD_SetConfig+0x148>)
 8009bce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009bd0:	4b4b      	ldr	r3, [pc, #300]	; (8009d00 <USBD_SetConfig+0x148>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d905      	bls.n	8009be4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f96c 	bl	8009eb8 <USBD_CtlError>
    return USBD_FAIL;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e088      	b.n	8009cf6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d002      	beq.n	8009bf6 <USBD_SetConfig+0x3e>
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d025      	beq.n	8009c40 <USBD_SetConfig+0x88>
 8009bf4:	e071      	b.n	8009cda <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009bf6:	4b42      	ldr	r3, [pc, #264]	; (8009d00 <USBD_SetConfig+0x148>)
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d01c      	beq.n	8009c38 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009bfe:	4b40      	ldr	r3, [pc, #256]	; (8009d00 <USBD_SetConfig+0x148>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c08:	4b3d      	ldr	r3, [pc, #244]	; (8009d00 <USBD_SetConfig+0x148>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7ff f992 	bl	8008f38 <USBD_SetClassConfig>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d004      	beq.n	8009c28 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f949 	bl	8009eb8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c26:	e065      	b.n	8009cf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fa10 	bl	800a04e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2203      	movs	r2, #3
 8009c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c36:	e05d      	b.n	8009cf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fa08 	bl	800a04e <USBD_CtlSendStatus>
      break;
 8009c3e:	e059      	b.n	8009cf4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c40:	4b2f      	ldr	r3, [pc, #188]	; (8009d00 <USBD_SetConfig+0x148>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d112      	bne.n	8009c6e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009c50:	4b2b      	ldr	r3, [pc, #172]	; (8009d00 <USBD_SetConfig+0x148>)
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	461a      	mov	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c5a:	4b29      	ldr	r3, [pc, #164]	; (8009d00 <USBD_SetConfig+0x148>)
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff f985 	bl	8008f70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f9f1 	bl	800a04e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c6c:	e042      	b.n	8009cf4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009c6e:	4b24      	ldr	r3, [pc, #144]	; (8009d00 <USBD_SetConfig+0x148>)
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d02a      	beq.n	8009cd2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff f973 	bl	8008f70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c8a:	4b1d      	ldr	r3, [pc, #116]	; (8009d00 <USBD_SetConfig+0x148>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c94:	4b1a      	ldr	r3, [pc, #104]	; (8009d00 <USBD_SetConfig+0x148>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7ff f94c 	bl	8008f38 <USBD_SetClassConfig>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00f      	beq.n	8009cca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f903 	bl	8009eb8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff f958 	bl	8008f70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cc8:	e014      	b.n	8009cf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f9bf 	bl	800a04e <USBD_CtlSendStatus>
      break;
 8009cd0:	e010      	b.n	8009cf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f9bb 	bl	800a04e <USBD_CtlSendStatus>
      break;
 8009cd8:	e00c      	b.n	8009cf4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f8eb 	bl	8009eb8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ce2:	4b07      	ldr	r3, [pc, #28]	; (8009d00 <USBD_SetConfig+0x148>)
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff f941 	bl	8008f70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8009cf2:	bf00      	nop
  }

  return ret;
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000408 	.word	0x20000408

08009d04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	88db      	ldrh	r3, [r3, #6]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d004      	beq.n	8009d20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f8cd 	bl	8009eb8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d1e:	e023      	b.n	8009d68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	dc02      	bgt.n	8009d32 <USBD_GetConfig+0x2e>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dc03      	bgt.n	8009d38 <USBD_GetConfig+0x34>
 8009d30:	e015      	b.n	8009d5e <USBD_GetConfig+0x5a>
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d00b      	beq.n	8009d4e <USBD_GetConfig+0x4a>
 8009d36:	e012      	b.n	8009d5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	3308      	adds	r3, #8
 8009d42:	2201      	movs	r2, #1
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f927 	bl	8009f9a <USBD_CtlSendData>
        break;
 8009d4c:	e00c      	b.n	8009d68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3304      	adds	r3, #4
 8009d52:	2201      	movs	r2, #1
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f91f 	bl	8009f9a <USBD_CtlSendData>
        break;
 8009d5c:	e004      	b.n	8009d68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f8a9 	bl	8009eb8 <USBD_CtlError>
        break;
 8009d66:	bf00      	nop
}
 8009d68:	bf00      	nop
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	3b01      	subs	r3, #1
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d81e      	bhi.n	8009dc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	88db      	ldrh	r3, [r3, #6]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d004      	beq.n	8009d9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f890 	bl	8009eb8 <USBD_CtlError>
        break;
 8009d98:	e01a      	b.n	8009dd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d005      	beq.n	8009db6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f043 0202 	orr.w	r2, r3, #2
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	330c      	adds	r3, #12
 8009dba:	2202      	movs	r2, #2
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f8eb 	bl	8009f9a <USBD_CtlSendData>
      break;
 8009dc4:	e004      	b.n	8009dd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f875 	bl	8009eb8 <USBD_CtlError>
      break;
 8009dce:	bf00      	nop
  }
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	885b      	ldrh	r3, [r3, #2]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d106      	bne.n	8009df8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f92b 	bl	800a04e <USBD_CtlSendStatus>
  }
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	3b01      	subs	r3, #1
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d80b      	bhi.n	8009e30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	885b      	ldrh	r3, [r3, #2]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d10c      	bne.n	8009e3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f910 	bl	800a04e <USBD_CtlSendStatus>
      }
      break;
 8009e2e:	e004      	b.n	8009e3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f840 	bl	8009eb8 <USBD_CtlError>
      break;
 8009e38:	e000      	b.n	8009e3c <USBD_ClrFeature+0x3c>
      break;
 8009e3a:	bf00      	nop
  }
}
 8009e3c:	bf00      	nop
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	781a      	ldrb	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	781a      	ldrb	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7ff fa92 	bl	8009398 <SWAPBYTE>
 8009e74:	4603      	mov	r3, r0
 8009e76:	461a      	mov	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3301      	adds	r3, #1
 8009e86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f7ff fa85 	bl	8009398 <SWAPBYTE>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	461a      	mov	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f7ff fa78 	bl	8009398 <SWAPBYTE>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	461a      	mov	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	80da      	strh	r2, [r3, #6]
}
 8009eb0:	bf00      	nop
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ec2:	2180      	movs	r1, #128	; 0x80
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fc6f 	bl	800a7a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009eca:	2100      	movs	r1, #0
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fc6b 	bl	800a7a8 <USBD_LL_StallEP>
}
 8009ed2:	bf00      	nop
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b086      	sub	sp, #24
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d036      	beq.n	8009f5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009ef4:	6938      	ldr	r0, [r7, #16]
 8009ef6:	f000 f836 	bl	8009f66 <USBD_GetLen>
 8009efa:	4603      	mov	r3, r0
 8009efc:	3301      	adds	r3, #1
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	7812      	ldrb	r2, [r2, #0]
 8009f12:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
 8009f16:	3301      	adds	r3, #1
 8009f18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	4413      	add	r3, r2
 8009f20:	2203      	movs	r2, #3
 8009f22:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	3301      	adds	r3, #1
 8009f28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f2a:	e013      	b.n	8009f54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f2c:	7dfb      	ldrb	r3, [r7, #23]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	4413      	add	r3, r2
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	7812      	ldrb	r2, [r2, #0]
 8009f36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	613b      	str	r3, [r7, #16]
    idx++;
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	3301      	adds	r3, #1
 8009f42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	4413      	add	r3, r2
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
 8009f50:	3301      	adds	r3, #1
 8009f52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1e7      	bne.n	8009f2c <USBD_GetString+0x52>
 8009f5c:	e000      	b.n	8009f60 <USBD_GetString+0x86>
    return;
 8009f5e:	bf00      	nop
  }
}
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f76:	e005      	b.n	8009f84 <USBD_GetLen+0x1e>
  {
    len++;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	3301      	adds	r3, #1
 8009f82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1f5      	bne.n	8009f78 <USBD_GetLen+0x12>
  }

  return len;
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	60f8      	str	r0, [r7, #12]
 8009fa2:	60b9      	str	r1, [r7, #8]
 8009fa4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2202      	movs	r2, #2
 8009faa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 fc7b 	bl	800a8bc <USBD_LL_Transmit>

  return USBD_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f000 fc6a 	bl	800a8bc <USBD_LL_Transmit>

  return USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	60b9      	str	r1, [r7, #8]
 8009ffc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2203      	movs	r2, #3
 800a002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	2100      	movs	r1, #0
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 fc6e 	bl	800a8fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	2100      	movs	r1, #0
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 fc5d 	bl	800a8fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b082      	sub	sp, #8
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2204      	movs	r2, #4
 800a05a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a05e:	2300      	movs	r3, #0
 800a060:	2200      	movs	r2, #0
 800a062:	2100      	movs	r1, #0
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fc29 	bl	800a8bc <USBD_LL_Transmit>

  return USBD_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2205      	movs	r2, #5
 800a080:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a084:	2300      	movs	r3, #0
 800a086:	2200      	movs	r2, #0
 800a088:	2100      	movs	r1, #0
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fc37 	bl	800a8fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
	...

0800a09c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	4912      	ldr	r1, [pc, #72]	; (800a0ec <MX_USB_Device_Init+0x50>)
 800a0a4:	4812      	ldr	r0, [pc, #72]	; (800a0f0 <MX_USB_Device_Init+0x54>)
 800a0a6:	f7fe fed9 	bl	8008e5c <USBD_Init>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d001      	beq.n	800a0b4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a0b0:	f7f6 fca3 	bl	80009fa <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a0b4:	490f      	ldr	r1, [pc, #60]	; (800a0f4 <MX_USB_Device_Init+0x58>)
 800a0b6:	480e      	ldr	r0, [pc, #56]	; (800a0f0 <MX_USB_Device_Init+0x54>)
 800a0b8:	f7fe ff00 	bl	8008ebc <USBD_RegisterClass>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a0c2:	f7f6 fc9a 	bl	80009fa <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a0c6:	490c      	ldr	r1, [pc, #48]	; (800a0f8 <MX_USB_Device_Init+0x5c>)
 800a0c8:	4809      	ldr	r0, [pc, #36]	; (800a0f0 <MX_USB_Device_Init+0x54>)
 800a0ca:	f7fe fe51 	bl	8008d70 <USBD_CDC_RegisterInterface>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a0d4:	f7f6 fc91 	bl	80009fa <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a0d8:	4805      	ldr	r0, [pc, #20]	; (800a0f0 <MX_USB_Device_Init+0x54>)
 800a0da:	f7fe ff16 	bl	8008f0a <USBD_Start>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a0e4:	f7f6 fc89 	bl	80009fa <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a0e8:	bf00      	nop
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	20000130 	.word	0x20000130
 800a0f0:	2000040c 	.word	0x2000040c
 800a0f4:	20000018 	.word	0x20000018
 800a0f8:	2000011c 	.word	0x2000011c

0800a0fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a100:	2200      	movs	r2, #0
 800a102:	4905      	ldr	r1, [pc, #20]	; (800a118 <CDC_Init_FS+0x1c>)
 800a104:	4805      	ldr	r0, [pc, #20]	; (800a11c <CDC_Init_FS+0x20>)
 800a106:	f7fe fe48 	bl	8008d9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a10a:	4905      	ldr	r1, [pc, #20]	; (800a120 <CDC_Init_FS+0x24>)
 800a10c:	4803      	ldr	r0, [pc, #12]	; (800a11c <CDC_Init_FS+0x20>)
 800a10e:	f7fe fe62 	bl	8008dd6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a112:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a114:	4618      	mov	r0, r3
 800a116:	bd80      	pop	{r7, pc}
 800a118:	20000ac4 	.word	0x20000ac4
 800a11c:	2000040c 	.word	0x2000040c
 800a120:	200006dc 	.word	0x200006dc

0800a124 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a124:	b480      	push	{r7}
 800a126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a128:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	4603      	mov	r3, r0
 800a13c:	6039      	str	r1, [r7, #0]
 800a13e:	71fb      	strb	r3, [r7, #7]
 800a140:	4613      	mov	r3, r2
 800a142:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a144:	79fb      	ldrb	r3, [r7, #7]
 800a146:	2b23      	cmp	r3, #35	; 0x23
 800a148:	d84a      	bhi.n	800a1e0 <CDC_Control_FS+0xac>
 800a14a:	a201      	add	r2, pc, #4	; (adr r2, 800a150 <CDC_Control_FS+0x1c>)
 800a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a150:	0800a1e1 	.word	0x0800a1e1
 800a154:	0800a1e1 	.word	0x0800a1e1
 800a158:	0800a1e1 	.word	0x0800a1e1
 800a15c:	0800a1e1 	.word	0x0800a1e1
 800a160:	0800a1e1 	.word	0x0800a1e1
 800a164:	0800a1e1 	.word	0x0800a1e1
 800a168:	0800a1e1 	.word	0x0800a1e1
 800a16c:	0800a1e1 	.word	0x0800a1e1
 800a170:	0800a1e1 	.word	0x0800a1e1
 800a174:	0800a1e1 	.word	0x0800a1e1
 800a178:	0800a1e1 	.word	0x0800a1e1
 800a17c:	0800a1e1 	.word	0x0800a1e1
 800a180:	0800a1e1 	.word	0x0800a1e1
 800a184:	0800a1e1 	.word	0x0800a1e1
 800a188:	0800a1e1 	.word	0x0800a1e1
 800a18c:	0800a1e1 	.word	0x0800a1e1
 800a190:	0800a1e1 	.word	0x0800a1e1
 800a194:	0800a1e1 	.word	0x0800a1e1
 800a198:	0800a1e1 	.word	0x0800a1e1
 800a19c:	0800a1e1 	.word	0x0800a1e1
 800a1a0:	0800a1e1 	.word	0x0800a1e1
 800a1a4:	0800a1e1 	.word	0x0800a1e1
 800a1a8:	0800a1e1 	.word	0x0800a1e1
 800a1ac:	0800a1e1 	.word	0x0800a1e1
 800a1b0:	0800a1e1 	.word	0x0800a1e1
 800a1b4:	0800a1e1 	.word	0x0800a1e1
 800a1b8:	0800a1e1 	.word	0x0800a1e1
 800a1bc:	0800a1e1 	.word	0x0800a1e1
 800a1c0:	0800a1e1 	.word	0x0800a1e1
 800a1c4:	0800a1e1 	.word	0x0800a1e1
 800a1c8:	0800a1e1 	.word	0x0800a1e1
 800a1cc:	0800a1e1 	.word	0x0800a1e1
 800a1d0:	0800a1e1 	.word	0x0800a1e1
 800a1d4:	0800a1e1 	.word	0x0800a1e1
 800a1d8:	0800a1e1 	.word	0x0800a1e1
 800a1dc:	0800a1e1 	.word	0x0800a1e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1e0:	bf00      	nop
  }

  return (USBD_OK);
 800a1e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	4805      	ldr	r0, [pc, #20]	; (800a214 <CDC_Receive_FS+0x24>)
 800a1fe:	f7fe fdea 	bl	8008dd6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a202:	4804      	ldr	r0, [pc, #16]	; (800a214 <CDC_Receive_FS+0x24>)
 800a204:	f7fe fe00 	bl	8008e08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a208:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	2000040c 	.word	0x2000040c

0800a218 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a218:	b480      	push	{r7}
 800a21a:	b087      	sub	sp, #28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	4613      	mov	r3, r2
 800a224:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a22a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
	...

0800a23c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	6039      	str	r1, [r7, #0]
 800a246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2212      	movs	r2, #18
 800a24c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a24e:	4b03      	ldr	r3, [pc, #12]	; (800a25c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20000150 	.word	0x20000150

0800a260 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	6039      	str	r1, [r7, #0]
 800a26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2204      	movs	r2, #4
 800a270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a272:	4b03      	ldr	r3, [pc, #12]	; (800a280 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a274:	4618      	mov	r0, r3
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	20000164 	.word	0x20000164

0800a284 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d105      	bne.n	800a2a2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	4907      	ldr	r1, [pc, #28]	; (800a2b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a29a:	4808      	ldr	r0, [pc, #32]	; (800a2bc <USBD_CDC_ProductStrDescriptor+0x38>)
 800a29c:	f7ff fe1d 	bl	8009eda <USBD_GetString>
 800a2a0:	e004      	b.n	800a2ac <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	4904      	ldr	r1, [pc, #16]	; (800a2b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a2a6:	4805      	ldr	r0, [pc, #20]	; (800a2bc <USBD_CDC_ProductStrDescriptor+0x38>)
 800a2a8:	f7ff fe17 	bl	8009eda <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2ac:	4b02      	ldr	r3, [pc, #8]	; (800a2b8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20000eac 	.word	0x20000eac
 800a2bc:	0800aad8 	.word	0x0800aad8

0800a2c0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	6039      	str	r1, [r7, #0]
 800a2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	4904      	ldr	r1, [pc, #16]	; (800a2e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a2d0:	4804      	ldr	r0, [pc, #16]	; (800a2e4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a2d2:	f7ff fe02 	bl	8009eda <USBD_GetString>
  return USBD_StrDesc;
 800a2d6:	4b02      	ldr	r3, [pc, #8]	; (800a2e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	20000eac 	.word	0x20000eac
 800a2e4:	0800aaf0 	.word	0x0800aaf0

0800a2e8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	6039      	str	r1, [r7, #0]
 800a2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	221a      	movs	r2, #26
 800a2f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2fa:	f000 f843 	bl	800a384 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a2fe:	4b02      	ldr	r3, [pc, #8]	; (800a308 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	20000168 	.word	0x20000168

0800a30c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a318:	79fb      	ldrb	r3, [r7, #7]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d105      	bne.n	800a32a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	4907      	ldr	r1, [pc, #28]	; (800a340 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a322:	4808      	ldr	r0, [pc, #32]	; (800a344 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a324:	f7ff fdd9 	bl	8009eda <USBD_GetString>
 800a328:	e004      	b.n	800a334 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	4904      	ldr	r1, [pc, #16]	; (800a340 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a32e:	4805      	ldr	r0, [pc, #20]	; (800a344 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a330:	f7ff fdd3 	bl	8009eda <USBD_GetString>
  }
  return USBD_StrDesc;
 800a334:	4b02      	ldr	r3, [pc, #8]	; (800a340 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20000eac 	.word	0x20000eac
 800a344:	0800ab04 	.word	0x0800ab04

0800a348 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	4603      	mov	r3, r0
 800a350:	6039      	str	r1, [r7, #0]
 800a352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d105      	bne.n	800a366 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	4907      	ldr	r1, [pc, #28]	; (800a37c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a35e:	4808      	ldr	r0, [pc, #32]	; (800a380 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a360:	f7ff fdbb 	bl	8009eda <USBD_GetString>
 800a364:	e004      	b.n	800a370 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4904      	ldr	r1, [pc, #16]	; (800a37c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a36a:	4805      	ldr	r0, [pc, #20]	; (800a380 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a36c:	f7ff fdb5 	bl	8009eda <USBD_GetString>
  }
  return USBD_StrDesc;
 800a370:	4b02      	ldr	r3, [pc, #8]	; (800a37c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a372:	4618      	mov	r0, r3
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	20000eac 	.word	0x20000eac
 800a380:	0800ab10 	.word	0x0800ab10

0800a384 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a38a:	4b0f      	ldr	r3, [pc, #60]	; (800a3c8 <Get_SerialNum+0x44>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a390:	4b0e      	ldr	r3, [pc, #56]	; (800a3cc <Get_SerialNum+0x48>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a396:	4b0e      	ldr	r3, [pc, #56]	; (800a3d0 <Get_SerialNum+0x4c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d009      	beq.n	800a3be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3aa:	2208      	movs	r2, #8
 800a3ac:	4909      	ldr	r1, [pc, #36]	; (800a3d4 <Get_SerialNum+0x50>)
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 f814 	bl	800a3dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	4908      	ldr	r1, [pc, #32]	; (800a3d8 <Get_SerialNum+0x54>)
 800a3b8:	68b8      	ldr	r0, [r7, #8]
 800a3ba:	f000 f80f 	bl	800a3dc <IntToUnicode>
  }
}
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	1fff7590 	.word	0x1fff7590
 800a3cc:	1fff7594 	.word	0x1fff7594
 800a3d0:	1fff7598 	.word	0x1fff7598
 800a3d4:	2000016a 	.word	0x2000016a
 800a3d8:	2000017a 	.word	0x2000017a

0800a3dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	75fb      	strb	r3, [r7, #23]
 800a3f2:	e027      	b.n	800a444 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	0f1b      	lsrs	r3, r3, #28
 800a3f8:	2b09      	cmp	r3, #9
 800a3fa:	d80b      	bhi.n	800a414 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	0f1b      	lsrs	r3, r3, #28
 800a400:	b2da      	uxtb	r2, r3
 800a402:	7dfb      	ldrb	r3, [r7, #23]
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	4619      	mov	r1, r3
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	440b      	add	r3, r1
 800a40c:	3230      	adds	r2, #48	; 0x30
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	701a      	strb	r2, [r3, #0]
 800a412:	e00a      	b.n	800a42a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	0f1b      	lsrs	r3, r3, #28
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	4619      	mov	r1, r3
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	440b      	add	r3, r1
 800a424:	3237      	adds	r2, #55	; 0x37
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	011b      	lsls	r3, r3, #4
 800a42e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a430:	7dfb      	ldrb	r3, [r7, #23]
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	3301      	adds	r3, #1
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	4413      	add	r3, r2
 800a43a:	2200      	movs	r2, #0
 800a43c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	3301      	adds	r3, #1
 800a442:	75fb      	strb	r3, [r7, #23]
 800a444:	7dfa      	ldrb	r2, [r7, #23]
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d3d3      	bcc.n	800a3f4 <IntToUnicode+0x18>
  }
}
 800a44c:	bf00      	nop
 800a44e:	bf00      	nop
 800a450:	371c      	adds	r7, #28
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
	...

0800a45c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b094      	sub	sp, #80	; 0x50
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a464:	f107 030c 	add.w	r3, r7, #12
 800a468:	2244      	movs	r2, #68	; 0x44
 800a46a:	2100      	movs	r1, #0
 800a46c:	4618      	mov	r0, r3
 800a46e:	f000 fb1f 	bl	800aab0 <memset>
  if(pcdHandle->Instance==USB)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a15      	ldr	r2, [pc, #84]	; (800a4cc <HAL_PCD_MspInit+0x70>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d122      	bne.n	800a4c2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a47c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a480:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a482:	2300      	movs	r3, #0
 800a484:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a486:	f107 030c 	add.w	r3, r7, #12
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fa fe70 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800a496:	f7f6 fab0 	bl	80009fa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a49a:	4b0d      	ldr	r3, [pc, #52]	; (800a4d0 <HAL_PCD_MspInit+0x74>)
 800a49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a49e:	4a0c      	ldr	r2, [pc, #48]	; (800a4d0 <HAL_PCD_MspInit+0x74>)
 800a4a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a4a4:	6593      	str	r3, [r2, #88]	; 0x58
 800a4a6:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <HAL_PCD_MspInit+0x74>)
 800a4a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4ae:	60bb      	str	r3, [r7, #8]
 800a4b0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	2014      	movs	r0, #20
 800a4b8:	f7f7 feb7 	bl	800222a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a4bc:	2014      	movs	r0, #20
 800a4be:	f7f7 fece 	bl	800225e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a4c2:	bf00      	nop
 800a4c4:	3750      	adds	r7, #80	; 0x50
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	40005c00 	.word	0x40005c00
 800a4d0:	40021000 	.word	0x40021000

0800a4d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	f7fe fd58 	bl	8008fa0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a50a:	78fa      	ldrb	r2, [r7, #3]
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	4613      	mov	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	00db      	lsls	r3, r3, #3
 800a516:	440b      	add	r3, r1
 800a518:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	78fb      	ldrb	r3, [r7, #3]
 800a520:	4619      	mov	r1, r3
 800a522:	f7fe fd92 	bl	800904a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a526:	bf00      	nop
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b082      	sub	sp, #8
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a540:	78fa      	ldrb	r2, [r7, #3]
 800a542:	6879      	ldr	r1, [r7, #4]
 800a544:	4613      	mov	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	440b      	add	r3, r1
 800a54e:	333c      	adds	r3, #60	; 0x3c
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	78fb      	ldrb	r3, [r7, #3]
 800a554:	4619      	mov	r1, r3
 800a556:	f7fe fddb 	bl	8009110 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a570:	4618      	mov	r0, r3
 800a572:	f7fe feef 	bl	8009354 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a576:	bf00      	nop
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a586:	2301      	movs	r3, #1
 800a588:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d001      	beq.n	800a596 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a592:	f7f6 fa32 	bl	80009fa <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a59c:	7bfa      	ldrb	r2, [r7, #15]
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fe fe99 	bl	80092d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe fe45 	bl	800923c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a5b2:	bf00      	nop
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
	...

0800a5bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe fe94 	bl	80092f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d005      	beq.n	800a5e4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5d8:	4b04      	ldr	r3, [pc, #16]	; (800a5ec <HAL_PCD_SuspendCallback+0x30>)
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	4a03      	ldr	r2, [pc, #12]	; (800a5ec <HAL_PCD_SuspendCallback+0x30>)
 800a5de:	f043 0306 	orr.w	r3, r3, #6
 800a5e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	e000ed00 	.word	0xe000ed00

0800a5f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d007      	beq.n	800a610 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a600:	4b08      	ldr	r3, [pc, #32]	; (800a624 <HAL_PCD_ResumeCallback+0x34>)
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	4a07      	ldr	r2, [pc, #28]	; (800a624 <HAL_PCD_ResumeCallback+0x34>)
 800a606:	f023 0306 	bic.w	r3, r3, #6
 800a60a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a60c:	f000 f9fa 	bl	800aa04 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe fe84 	bl	8009324 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a61c:	bf00      	nop
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	e000ed00 	.word	0xe000ed00

0800a628 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a630:	4a2b      	ldr	r2, [pc, #172]	; (800a6e0 <USBD_LL_Init+0xb8>)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a29      	ldr	r2, [pc, #164]	; (800a6e0 <USBD_LL_Init+0xb8>)
 800a63c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a640:	4b27      	ldr	r3, [pc, #156]	; (800a6e0 <USBD_LL_Init+0xb8>)
 800a642:	4a28      	ldr	r2, [pc, #160]	; (800a6e4 <USBD_LL_Init+0xbc>)
 800a644:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a646:	4b26      	ldr	r3, [pc, #152]	; (800a6e0 <USBD_LL_Init+0xb8>)
 800a648:	2208      	movs	r2, #8
 800a64a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a64c:	4b24      	ldr	r3, [pc, #144]	; (800a6e0 <USBD_LL_Init+0xb8>)
 800a64e:	2202      	movs	r2, #2
 800a650:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a652:	4b23      	ldr	r3, [pc, #140]	; (800a6e0 <USBD_LL_Init+0xb8>)
 800a654:	2202      	movs	r2, #2
 800a656:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a658:	4b21      	ldr	r3, [pc, #132]	; (800a6e0 <USBD_LL_Init+0xb8>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a65e:	4b20      	ldr	r3, [pc, #128]	; (800a6e0 <USBD_LL_Init+0xb8>)
 800a660:	2200      	movs	r2, #0
 800a662:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a664:	4b1e      	ldr	r3, [pc, #120]	; (800a6e0 <USBD_LL_Init+0xb8>)
 800a666:	2200      	movs	r2, #0
 800a668:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a66a:	4b1d      	ldr	r3, [pc, #116]	; (800a6e0 <USBD_LL_Init+0xb8>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a670:	481b      	ldr	r0, [pc, #108]	; (800a6e0 <USBD_LL_Init+0xb8>)
 800a672:	f7f8 fa99 	bl	8002ba8 <HAL_PCD_Init>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a67c:	f7f6 f9bd 	bl	80009fa <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a686:	2318      	movs	r3, #24
 800a688:	2200      	movs	r2, #0
 800a68a:	2100      	movs	r1, #0
 800a68c:	f7f9 ff52 	bl	8004534 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a696:	2358      	movs	r3, #88	; 0x58
 800a698:	2200      	movs	r2, #0
 800a69a:	2180      	movs	r1, #128	; 0x80
 800a69c:	f7f9 ff4a 	bl	8004534 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a6a6:	23c0      	movs	r3, #192	; 0xc0
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2181      	movs	r1, #129	; 0x81
 800a6ac:	f7f9 ff42 	bl	8004534 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a6b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2101      	movs	r1, #1
 800a6be:	f7f9 ff39 	bl	8004534 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a6c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2182      	movs	r1, #130	; 0x82
 800a6d0:	f7f9 ff30 	bl	8004534 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	200010ac 	.word	0x200010ac
 800a6e4:	40005c00 	.word	0x40005c00

0800a6e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7f8 fb37 	bl	8002d72 <HAL_PCD_Start>
 800a704:	4603      	mov	r3, r0
 800a706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 f980 	bl	800aa10 <USBD_Get_USB_Status>
 800a710:	4603      	mov	r3, r0
 800a712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a714:	7bbb      	ldrb	r3, [r7, #14]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	4608      	mov	r0, r1
 800a728:	4611      	mov	r1, r2
 800a72a:	461a      	mov	r2, r3
 800a72c:	4603      	mov	r3, r0
 800a72e:	70fb      	strb	r3, [r7, #3]
 800a730:	460b      	mov	r3, r1
 800a732:	70bb      	strb	r3, [r7, #2]
 800a734:	4613      	mov	r3, r2
 800a736:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a746:	78bb      	ldrb	r3, [r7, #2]
 800a748:	883a      	ldrh	r2, [r7, #0]
 800a74a:	78f9      	ldrb	r1, [r7, #3]
 800a74c:	f7f8 fc7f 	bl	800304e <HAL_PCD_EP_Open>
 800a750:	4603      	mov	r3, r0
 800a752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a754:	7bfb      	ldrb	r3, [r7, #15]
 800a756:	4618      	mov	r0, r3
 800a758:	f000 f95a 	bl	800aa10 <USBD_Get_USB_Status>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a760:	7bbb      	ldrb	r3, [r7, #14]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a784:	78fa      	ldrb	r2, [r7, #3]
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f7f8 fcc6 	bl	800311a <HAL_PCD_EP_Close>
 800a78e:	4603      	mov	r3, r0
 800a790:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	4618      	mov	r0, r3
 800a796:	f000 f93b 	bl	800aa10 <USBD_Get_USB_Status>
 800a79a:	4603      	mov	r3, r0
 800a79c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7c2:	78fa      	ldrb	r2, [r7, #3]
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7f8 fd87 	bl	80032da <HAL_PCD_EP_SetStall>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 f91c 	bl	800aa10 <USBD_Get_USB_Status>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b084      	sub	sp, #16
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a800:	78fa      	ldrb	r2, [r7, #3]
 800a802:	4611      	mov	r1, r2
 800a804:	4618      	mov	r0, r3
 800a806:	f7f8 fdba 	bl	800337e <HAL_PCD_EP_ClrStall>
 800a80a:	4603      	mov	r3, r0
 800a80c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
 800a810:	4618      	mov	r0, r3
 800a812:	f000 f8fd 	bl	800aa10 <USBD_Get_USB_Status>
 800a816:	4603      	mov	r3, r0
 800a818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a81a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a836:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	da0c      	bge.n	800a85a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a846:	68f9      	ldr	r1, [r7, #12]
 800a848:	1c5a      	adds	r2, r3, #1
 800a84a:	4613      	mov	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	00db      	lsls	r3, r3, #3
 800a852:	440b      	add	r3, r1
 800a854:	3302      	adds	r3, #2
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	e00b      	b.n	800a872 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a85a:	78fb      	ldrb	r3, [r7, #3]
 800a85c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a860:	68f9      	ldr	r1, [r7, #12]
 800a862:	4613      	mov	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	440b      	add	r3, r1
 800a86c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a870:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	460b      	mov	r3, r1
 800a888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a898:	78fa      	ldrb	r2, [r7, #3]
 800a89a:	4611      	mov	r1, r2
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7f8 fbb1 	bl	8003004 <HAL_PCD_SetAddress>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 f8b1 	bl	800aa10 <USBD_Get_USB_Status>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	607a      	str	r2, [r7, #4]
 800a8c6:	603b      	str	r3, [r7, #0]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a8da:	7af9      	ldrb	r1, [r7, #11]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	f7f8 fcb8 	bl	8003254 <HAL_PCD_EP_Transmit>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 f890 	bl	800aa10 <USBD_Get_USB_Status>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3718      	adds	r7, #24
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b086      	sub	sp, #24
 800a902:	af00      	add	r7, sp, #0
 800a904:	60f8      	str	r0, [r7, #12]
 800a906:	607a      	str	r2, [r7, #4]
 800a908:	603b      	str	r3, [r7, #0]
 800a90a:	460b      	mov	r3, r1
 800a90c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a91c:	7af9      	ldrb	r1, [r7, #11]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	f7f8 fc42 	bl	80031aa <HAL_PCD_EP_Receive>
 800a926:	4603      	mov	r3, r0
 800a928:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f000 f86f 	bl	800aa10 <USBD_Get_USB_Status>
 800a932:	4603      	mov	r3, r0
 800a934:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a936:	7dbb      	ldrb	r3, [r7, #22]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	460b      	mov	r3, r1
 800a94a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a952:	78fa      	ldrb	r2, [r7, #3]
 800a954:	4611      	mov	r1, r2
 800a956:	4618      	mov	r0, r3
 800a958:	f7f8 fc64 	bl	8003224 <HAL_PCD_EP_GetRxCount>
 800a95c:	4603      	mov	r3, r0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
	...

0800a968 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a974:	78fb      	ldrb	r3, [r7, #3]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d002      	beq.n	800a980 <HAL_PCDEx_LPM_Callback+0x18>
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d013      	beq.n	800a9a6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a97e:	e023      	b.n	800a9c8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d007      	beq.n	800a998 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a988:	f000 f83c 	bl	800aa04 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a98c:	4b10      	ldr	r3, [pc, #64]	; (800a9d0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	4a0f      	ldr	r2, [pc, #60]	; (800a9d0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a992:	f023 0306 	bic.w	r3, r3, #6
 800a996:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe fcc0 	bl	8009324 <USBD_LL_Resume>
    break;
 800a9a4:	e010      	b.n	800a9c8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fe fca3 	bl	80092f8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d005      	beq.n	800a9c6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9ba:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	4a04      	ldr	r2, [pc, #16]	; (800a9d0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a9c0:	f043 0306 	orr.w	r3, r3, #6
 800a9c4:	6113      	str	r3, [r2, #16]
    break;
 800a9c6:	bf00      	nop
}
 800a9c8:	bf00      	nop
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	e000ed00 	.word	0xe000ed00

0800a9d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a9dc:	4b03      	ldr	r3, [pc, #12]	; (800a9ec <USBD_static_malloc+0x18>)
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	200013a0 	.word	0x200013a0

0800a9f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]

}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800aa08:	f7f5 ffac 	bl	8000964 <SystemClock_Config>
}
 800aa0c:	bf00      	nop
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d817      	bhi.n	800aa54 <USBD_Get_USB_Status+0x44>
 800aa24:	a201      	add	r2, pc, #4	; (adr r2, 800aa2c <USBD_Get_USB_Status+0x1c>)
 800aa26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2a:	bf00      	nop
 800aa2c:	0800aa3d 	.word	0x0800aa3d
 800aa30:	0800aa43 	.word	0x0800aa43
 800aa34:	0800aa49 	.word	0x0800aa49
 800aa38:	0800aa4f 	.word	0x0800aa4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa40:	e00b      	b.n	800aa5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa42:	2303      	movs	r3, #3
 800aa44:	73fb      	strb	r3, [r7, #15]
    break;
 800aa46:	e008      	b.n	800aa5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa4c:	e005      	b.n	800aa5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	73fb      	strb	r3, [r7, #15]
    break;
 800aa52:	e002      	b.n	800aa5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa54:	2303      	movs	r3, #3
 800aa56:	73fb      	strb	r3, [r7, #15]
    break;
 800aa58:	bf00      	nop
  }
  return usb_status;
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <__libc_init_array>:
 800aa68:	b570      	push	{r4, r5, r6, lr}
 800aa6a:	4d0d      	ldr	r5, [pc, #52]	; (800aaa0 <__libc_init_array+0x38>)
 800aa6c:	4c0d      	ldr	r4, [pc, #52]	; (800aaa4 <__libc_init_array+0x3c>)
 800aa6e:	1b64      	subs	r4, r4, r5
 800aa70:	10a4      	asrs	r4, r4, #2
 800aa72:	2600      	movs	r6, #0
 800aa74:	42a6      	cmp	r6, r4
 800aa76:	d109      	bne.n	800aa8c <__libc_init_array+0x24>
 800aa78:	4d0b      	ldr	r5, [pc, #44]	; (800aaa8 <__libc_init_array+0x40>)
 800aa7a:	4c0c      	ldr	r4, [pc, #48]	; (800aaac <__libc_init_array+0x44>)
 800aa7c:	f000 f820 	bl	800aac0 <_init>
 800aa80:	1b64      	subs	r4, r4, r5
 800aa82:	10a4      	asrs	r4, r4, #2
 800aa84:	2600      	movs	r6, #0
 800aa86:	42a6      	cmp	r6, r4
 800aa88:	d105      	bne.n	800aa96 <__libc_init_array+0x2e>
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}
 800aa8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa90:	4798      	blx	r3
 800aa92:	3601      	adds	r6, #1
 800aa94:	e7ee      	b.n	800aa74 <__libc_init_array+0xc>
 800aa96:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa9a:	4798      	blx	r3
 800aa9c:	3601      	adds	r6, #1
 800aa9e:	e7f2      	b.n	800aa86 <__libc_init_array+0x1e>
 800aaa0:	0800ab30 	.word	0x0800ab30
 800aaa4:	0800ab30 	.word	0x0800ab30
 800aaa8:	0800ab30 	.word	0x0800ab30
 800aaac:	0800ab34 	.word	0x0800ab34

0800aab0 <memset>:
 800aab0:	4402      	add	r2, r0
 800aab2:	4603      	mov	r3, r0
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d100      	bne.n	800aaba <memset+0xa>
 800aab8:	4770      	bx	lr
 800aaba:	f803 1b01 	strb.w	r1, [r3], #1
 800aabe:	e7f9      	b.n	800aab4 <memset+0x4>

0800aac0 <_init>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	bf00      	nop
 800aac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac6:	bc08      	pop	{r3}
 800aac8:	469e      	mov	lr, r3
 800aaca:	4770      	bx	lr

0800aacc <_fini>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	bf00      	nop
 800aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	469e      	mov	lr, r3
 800aad6:	4770      	bx	lr
